Search.setIndex({"alltitles": {"ABS": [[1393, "abs"]], "ACOS": [[1396, "acos"]], "ACOSD": [[1396, "acosd"]], "ARRAY_AGG": [[1389, "array-agg"]], "ARRAY_CONTAINS": [[1389, "array-contains"]], "ARRAY_GET": [[1389, "array-get"]], "ARRAY_LENGTH": [[1389, "array-length"]], "ARRAY_LOWER": [[1389, "array-lower"]], "ARRAY_MEAN": [[1389, "array-mean"]], "ARRAY_REVERSE": [[1389, "array-reverse"]], "ARRAY_SUM": [[1389, "array-sum"]], "ARRAY_TO_STRING": [[1389, "array-to-string"]], "ARRAY_UNIQUE": [[1389, "array-unique"]], "ARRAY_UPPER": [[1389, "array-upper"]], "ASIN": [[1396, "asin"]], "ASIND": [[1396, "asind"]], "ATAN": [[1396, "atan"]], "ATAN2": [[1396, "atan2"]], "ATAN2D": [[1396, "atan2d"]], "ATAND": [[1396, "atand"]], "AVG": [[1388, "avg"]], "Aggregate": [[1388, null]], "Aggregation": [[208, null], [364, null], [864, null], [976, null]], "Aliases": [[1388, null], [1388, null], [1388, null], [1393, null], [1393, null], [1394, null], [1394, null]], "Array": [[842, null], [1363, null], [1389, null]], "Asserts": [[1402, "asserts"]], "Attributes": [[351, null], [964, null], [1364, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[863, "avro"]], "BIT_AND": [[1390, "bit-and"]], "BIT_COUNT": [[1390, "bit-count"]], "BIT_LENGTH": [[1394, "bit-length"]], "BIT_OR": [[1390, "bit-or"]], "BIT_XOR": [[1390, "bit-xor"]], "Binary": [[843, null], [856, "binary"], [1365, null]], "Bitwise": [[1390, null]], "Boolean": [[844, null], [1366, null]], "CAST": [[1397, "cast"]], "CBRT": [[1393, "cbrt"]], "CEIL": [[1393, "ceil"]], "COALESCE": [[1391, "coalesce"]], "CONCAT": [[1394, "concat"]], "CONCAT_WS": [[1394, "concat-ws"]], "CORR": [[1388, "corr"]], "COS": [[1396, "cos"]], "COSD": [[1396, "cosd"]], "COT": [[1396, "cot"]], "COTD": [[1396, "cotd"]], "COUNT": [[1388, "count"]], "CREATE TABLE": [[1401, "create-table"]], "CSV": [[863, "csv"]], "Catalog": [[205, null]], "Categories": [[845, null], [1367, null]], "Clipboard": [[863, "clipboard"]], "Cloud Credentials": [[863, "cloud-credentials"]], "Columns / names": [[847, null]], "Comparison": [[856, "comparison"], [1375, "comparison"]], "Computation": [[352, null], [848, null], [1368, null]], "Conditional": [[1391, null]], "Config": [[207, null]], "Config load, save, state": [[207, "config-load-save-state"]], "Config options": [[207, "config-options"]], "Conjunction": [[856, "conjunction"]], "Conversion": [[861, "conversion"]], "DATE": [[1394, "date"]], "DATE_PART": [[1395, "date-part"]], "DEGREES": [[1396, "degrees"]], "DELETE": [[1401, "delete"]], "DISTINCT": [[1387, "distinct"]], "DIV": [[1393, "div"]], "DROP TABLES": [[1401, "drop-tables"]], "Data types": [[362, null]], "DataFrame": [[356, null]], "DataType": [[362, "datatype"]], "DataType expressions": [[361, null]], "Database": [[863, "database"]], "Delta Lake": [[863, "delta-lake"]], "Descriptive": [[353, null], [965, null], [1369, null]], "Documentation": [[1399, null], [1399, null], [1399, null]], "ENDS_WITH": [[1394, "ends-with"]], "EXCEPT": [[1400, "except"]], "EXP": [[1393, "exp"]], "EXPLAIN": [[1401, "explain"]], "EXTRACT": [[1395, "extract"]], "Errors": [[363, "errors"]], "Examples": [[1, "examples"], [975, "examples"], [1402, "examples"]], "Excel / ODS": [[863, "excel-ods"]], "Exceptions": [[363, null]], "Export": [[354, null], [1370, null]], "Expression SQL": [[1399, "expression-sql"]], "Expression plugins": [[973, "expression-plugins"]], "Expressions": [[850, null]], "Extending the API": [[1, null]], "FIRST": [[1388, "first"]], "FLOOR": [[1393, "floor"]], "FROM": [[1387, "from"]], "Feather / IPC": [[863, "feather-ipc"]], "Frame SQL": [[1399, "frame-sql"]], "Functions": [[361, "functions"], [849, null], [861, null], [975, "functions"]], "GPUEngine": [[966, null]], "GREATEST": [[1391, "greatest"]], "GROUP BY": [[1387, "group-by"]], "Global SQL": [[1399, "global-sql"]], "GroupBy": [[355, null], [967, null]], "HAVING": [[1387, "having"]], "IF": [[1391, "if"]], "IFNULL": [[1391, "ifnull"]], "INITCAP": [[1394, "initcap"]], "INTERSECT": [[1400, "intersect"]], "IO plugins": [[973, "io-plugins"]], "Iceberg": [[863, "iceberg"]], "Importing": [[975, "importing"]], "InProcessQuery": [[968, null]], "Index": [[0, null]], "Input/output": [[863, null]], "Introduction": [[1399, "introduction"]], "JOIN": [[1387, "join"]], "JSON": [[863, "json"]], "LAST": [[1388, "last"]], "LEAST": [[1391, "least"]], "LEFT": [[1394, "left"]], "LENGTH": [[1394, "length"]], "LIMIT": [[1387, "limit"]], "LN": [[1393, "ln"]], "LOG": [[1393, "log"]], "LOG10": [[1393, "log10"]], "LOG1P": [[1393, "log1p"]], "LOG2": [[1393, "log2"]], "LOWER": [[1394, "lower"]], "LTRIM": [[1394, "ltrim"]], "LazyFrame": [[969, null]], "List": [[851, null], [1372, null]], "MAX": [[1388, "max"]], "MEDIAN": [[1388, "median"]], "MIN": [[1388, "min"]], "MOD": [[1393, "mod"]], "Manipulation/selection": [[358, null], [854, null], [971, null], [1374, null]], "Math": [[1393, null]], "Meta": [[852, null]], "Metadata": [[972, null]], "Methods": [[1399, "methods"]], "Miscellaneous": [[357, null], [853, null], [861, "miscellaneous"], [970, null], [1373, null]], "Multiple Config instances": [[207, "multiple-config-instances"]], "Multiple queries": [[861, "multiple-queries"]], "NORMALIZE": [[1394, "normalize"]], "NULLIF": [[1391, "nullif"]], "Name": [[855, null]], "Nested": [[362, "nested"]], "Numeric": [[362, "numeric"], [856, "numeric"], [1375, "numeric"]], "OCTET_LENGTH": [[1394, "octet-length"]], "OFFSET": [[1387, "offset"]], "ORDER BY": [[1387, "order-by"]], "Operators": [[856, null], [1375, null]], "Other": [[362, "other"]], "PI": [[1393, "pi"]], "POW": [[1393, "pow"]], "Panic": [[363, "panic"]], "Parametric testing": [[1402, "parametric-testing"]], "Parquet": [[863, "parquet"]], "Partition": [[863, "partition"]], "Plot": [[359, null], [1376, null]], "Plugins": [[973, null]], "Polars strategies": [[1402, "polars-strategies"]], "Profiles": [[1402, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[863, "pyarrow-datasets"]], "Python API": [[1399, null]], "Python API reference": [[862, null]], "QUANTILE_CONT": [[1388, "quantile-cont"]], "QUANTILE_DISC": [[1388, "quantile-disc"]], "Querying": [[1399, "querying"]], "RADIANS": [[1396, "radians"]], "REGEXP_LIKE": [[1394, "regexp-like"]], "REPLACE": [[1394, "replace"]], "REVERSE": [[1394, "reverse"]], "RIGHT": [[1394, "right"]], "ROUND": [[1393, "round"]], "RTRIM": [[1394, "rtrim"]], "Random": [[861, "random"]], "SELECT": [[1387, "select"]], "SHOW TABLES": [[1401, "show-tables"]], "SIGN": [[1393, "sign"]], "SIN": [[1396, "sin"]], "SIND": [[1396, "sind"]], "SPLIT_PART": [[1394, "split-part"]], "SQL Clauses": [[1387, null]], "SQL Functions": [[1392, null]], "SQL Interface": [[1398, null]], "SQLContext": [[1399, "sqlcontext"]], "SQRT": [[1393, "sqrt"]], "STARTS_WITH": [[1394, "starts-with"]], "STDDEV": [[1388, "stddev"]], "STRFTIME": [[1395, "strftime"]], "STRING_TO_ARRAY": [[1394, "string-to-array"]], "STRPOS": [[1394, "strpos"]], "STRPTIME": [[1394, "strptime"]], "SUBSTR": [[1394, "substr"]], "SUM": [[1388, "sum"]], "Scan Cast Options": [[863, "scan-cast-options"]], "Schema": [[974, null]], "Selectors": [[975, null]], "Serialization": [[357, "serialization"], [970, "serialization"]], "Series": [[1371, null]], "Set Operations": [[1400, null]], "Set operations": [[975, "set-operations"]], "Strategy helpers": [[1402, "strategy-helpers"]], "String": [[362, "string"], [857, null], [1377, null], [1394, null]], "StringCache": [[861, "stringcache"]], "Struct": [[858, null], [1378, null]], "Style": [[360, null]], "TAN": [[1396, "tan"]], "TAND": [[1396, "tand"]], "TIMESTAMP": [[1394, "timestamp"]], "TRUNCATE": [[1401, "truncate"]], "TRY_CAST": [[1397, "try-cast"]], "Table Operations": [[1401, null]], "Temporal": [[362, "temporal"], [859, null], [1379, null], [1395, null]], "Testing": [[1402, null]], "Trigonometry": [[1396, null]], "Types": [[1397, null]], "UNION": [[1400, "union"]], "UNION ALL": [[1400, "union-all"]], "UNION BY NAME": [[1400, "union-by-name"]], "UNNEST": [[1389, "unnest"], [1401, "unnest"]], "UPPER": [[1394, "upper"]], "Unity Catalog": [[206, null]], "Use as a context manager": [[207, "use-as-a-context-manager"]], "Use as a decorator": [[207, "use-as-a-decorator"]], "VARIANCE": [[1388, "variance"]], "WHERE": [[1387, "where"]], "Warnings": [[363, "warnings"]], "Window": [[860, null]], "polars.Catalog": [[192, null]], "polars.Catalog.get_table_info": [[193, null]], "polars.Catalog.list_catalogs": [[194, null]], "polars.Catalog.list_namespaces": [[195, null]], "polars.Catalog.list_tables": [[196, null]], "polars.Catalog.scan_table": [[197, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_engine_affinity": [[10, null]], "polars.Config.set_float_precision": [[11, null]], "polars.Config.set_fmt_float": [[12, null]], "polars.Config.set_fmt_str_lengths": [[13, null]], "polars.Config.set_fmt_table_cell_list_len": [[14, null]], "polars.Config.set_streaming_chunk_size": [[15, null]], "polars.Config.set_tbl_cell_alignment": [[16, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, null]], "polars.Config.set_tbl_cols": [[18, null]], "polars.Config.set_tbl_column_data_type_inline": [[19, null]], "polars.Config.set_tbl_dataframe_shape_below": [[20, null]], "polars.Config.set_tbl_formatting": [[21, null]], "polars.Config.set_tbl_hide_column_data_types": [[22, null]], "polars.Config.set_tbl_hide_column_names": [[23, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, null]], "polars.Config.set_tbl_hide_dtype_separator": [[25, null]], "polars.Config.set_tbl_rows": [[26, null]], "polars.Config.set_tbl_width_chars": [[27, null]], "polars.Config.set_thousands_separator": [[28, null]], "polars.Config.set_trim_decimal_zeros": [[29, null]], "polars.Config.set_verbose": [[30, null]], "polars.Config.state": [[31, null]], "polars.CredentialProvider": [[32, null]], "polars.CredentialProviderAWS": [[33, null]], "polars.CredentialProviderAzure": [[34, null]], "polars.CredentialProviderGCP": [[35, null]], "polars.DataFrame.__array__": [[209, null]], "polars.DataFrame.__arrow_c_stream__": [[210, null]], "polars.DataFrame.__dataframe__": [[211, null]], "polars.DataFrame.__getitem__": [[212, null]], "polars.DataFrame.__setitem__": [[213, null]], "polars.DataFrame.approx_n_unique": [[214, null]], "polars.DataFrame.bottom_k": [[215, null]], "polars.DataFrame.cast": [[216, null]], "polars.DataFrame.clear": [[217, null]], "polars.DataFrame.clone": [[218, null]], "polars.DataFrame.collect_schema": [[219, null]], "polars.DataFrame.columns": [[220, null]], "polars.DataFrame.corr": [[221, null]], "polars.DataFrame.count": [[222, null]], "polars.DataFrame.describe": [[223, null]], "polars.DataFrame.deserialize": [[224, null]], "polars.DataFrame.drop": [[225, null]], "polars.DataFrame.drop_in_place": [[226, null]], "polars.DataFrame.drop_nans": [[227, null]], "polars.DataFrame.drop_nulls": [[228, null]], "polars.DataFrame.dtypes": [[229, null]], "polars.DataFrame.equals": [[230, null]], "polars.DataFrame.estimated_size": [[231, null]], "polars.DataFrame.explode": [[232, null]], "polars.DataFrame.extend": [[233, null]], "polars.DataFrame.fill_nan": [[234, null]], "polars.DataFrame.fill_null": [[235, null]], "polars.DataFrame.filter": [[236, null]], "polars.DataFrame.flags": [[237, null]], "polars.DataFrame.fold": [[238, null]], "polars.DataFrame.gather_every": [[239, null]], "polars.DataFrame.get_column": [[240, null]], "polars.DataFrame.get_column_index": [[241, null]], "polars.DataFrame.get_columns": [[242, null]], "polars.DataFrame.glimpse": [[243, null]], "polars.DataFrame.group_by": [[244, null]], "polars.DataFrame.group_by_dynamic": [[245, null]], "polars.DataFrame.hash_rows": [[246, null]], "polars.DataFrame.head": [[247, null]], "polars.DataFrame.height": [[248, null]], "polars.DataFrame.hstack": [[249, null]], "polars.DataFrame.insert_column": [[250, null]], "polars.DataFrame.interpolate": [[251, null]], "polars.DataFrame.is_duplicated": [[252, null]], "polars.DataFrame.is_empty": [[253, null]], "polars.DataFrame.is_unique": [[254, null]], "polars.DataFrame.item": [[255, null]], "polars.DataFrame.iter_columns": [[256, null]], "polars.DataFrame.iter_rows": [[257, null]], "polars.DataFrame.iter_slices": [[258, null]], "polars.DataFrame.join": [[259, null]], "polars.DataFrame.join_asof": [[260, null]], "polars.DataFrame.join_where": [[261, null]], "polars.DataFrame.lazy": [[262, null]], "polars.DataFrame.limit": [[263, null]], "polars.DataFrame.map_rows": [[264, null]], "polars.DataFrame.match_to_schema": [[265, null]], "polars.DataFrame.max": [[266, null]], "polars.DataFrame.max_horizontal": [[267, null]], "polars.DataFrame.mean": [[268, null]], "polars.DataFrame.mean_horizontal": [[269, null]], "polars.DataFrame.median": [[270, null]], "polars.DataFrame.melt": [[271, null]], "polars.DataFrame.merge_sorted": [[272, null]], "polars.DataFrame.min": [[273, null]], "polars.DataFrame.min_horizontal": [[274, null]], "polars.DataFrame.n_chunks": [[275, null]], "polars.DataFrame.n_unique": [[276, null]], "polars.DataFrame.null_count": [[277, null]], "polars.DataFrame.partition_by": [[278, null]], "polars.DataFrame.pipe": [[279, null]], "polars.DataFrame.pivot": [[280, null]], "polars.DataFrame.product": [[281, null]], "polars.DataFrame.quantile": [[282, null]], "polars.DataFrame.rechunk": [[283, null]], "polars.DataFrame.remove": [[284, null]], "polars.DataFrame.rename": [[285, null]], "polars.DataFrame.replace_column": [[286, null]], "polars.DataFrame.reverse": [[287, null]], "polars.DataFrame.rolling": [[288, null]], "polars.DataFrame.row": [[289, null]], "polars.DataFrame.rows": [[290, null]], "polars.DataFrame.rows_by_key": [[291, null]], "polars.DataFrame.sample": [[292, null]], "polars.DataFrame.schema": [[293, null]], "polars.DataFrame.select": [[294, null]], "polars.DataFrame.select_seq": [[295, null]], "polars.DataFrame.serialize": [[296, null]], "polars.DataFrame.set_sorted": [[297, null]], "polars.DataFrame.shape": [[298, null]], "polars.DataFrame.shift": [[299, null]], "polars.DataFrame.shrink_to_fit": [[300, null]], "polars.DataFrame.slice": [[301, null]], "polars.DataFrame.sort": [[302, null]], "polars.DataFrame.sql": [[303, null]], "polars.DataFrame.std": [[304, null]], "polars.DataFrame.sum": [[305, null]], "polars.DataFrame.sum_horizontal": [[306, null]], "polars.DataFrame.tail": [[307, null]], "polars.DataFrame.to_arrow": [[308, null]], "polars.DataFrame.to_dict": [[309, null]], "polars.DataFrame.to_dicts": [[310, null]], "polars.DataFrame.to_dummies": [[311, null]], "polars.DataFrame.to_init_repr": [[312, null]], "polars.DataFrame.to_jax": [[313, null]], "polars.DataFrame.to_numpy": [[314, null]], "polars.DataFrame.to_pandas": [[315, null]], "polars.DataFrame.to_series": [[316, null]], "polars.DataFrame.to_struct": [[317, null]], "polars.DataFrame.to_torch": [[318, null]], "polars.DataFrame.top_k": [[319, null]], "polars.DataFrame.transpose": [[320, null]], "polars.DataFrame.unique": [[321, null]], "polars.DataFrame.unnest": [[322, null]], "polars.DataFrame.unpivot": [[323, null]], "polars.DataFrame.unstack": [[324, null]], "polars.DataFrame.update": [[325, null]], "polars.DataFrame.upsample": [[326, null]], "polars.DataFrame.var": [[327, null]], "polars.DataFrame.vstack": [[328, null]], "polars.DataFrame.width": [[329, null]], "polars.DataFrame.with_columns": [[330, null]], "polars.DataFrame.with_columns_seq": [[331, null]], "polars.DataFrame.with_row_count": [[332, null]], "polars.DataFrame.with_row_index": [[333, null]], "polars.DataFrame.write_avro": [[36, null]], "polars.DataFrame.write_clipboard": [[37, null]], "polars.DataFrame.write_csv": [[38, null]], "polars.DataFrame.write_database": [[39, null]], "polars.DataFrame.write_delta": [[40, null]], "polars.DataFrame.write_excel": [[41, null]], "polars.DataFrame.write_iceberg": [[42, null]], "polars.DataFrame.write_ipc": [[43, null]], "polars.DataFrame.write_ipc_stream": [[44, null]], "polars.DataFrame.write_json": [[45, null]], "polars.DataFrame.write_ndjson": [[46, null]], "polars.DataFrame.write_parquet": [[47, null]], "polars.DataType.to_dtype_expr": [[48, null]], "polars.Expr.abs": [[365, null]], "polars.Expr.add": [[366, null]], "polars.Expr.agg_groups": [[367, null]], "polars.Expr.alias": [[368, null]], "polars.Expr.all": [[369, null]], "polars.Expr.and_": [[370, null]], "polars.Expr.any": [[371, null]], "polars.Expr.append": [[372, null]], "polars.Expr.approx_n_unique": [[373, null]], "polars.Expr.arccos": [[374, null]], "polars.Expr.arccosh": [[375, null]], "polars.Expr.arcsin": [[376, null]], "polars.Expr.arcsinh": [[377, null]], "polars.Expr.arctan": [[378, null]], "polars.Expr.arctanh": [[379, null]], "polars.Expr.arg_max": [[380, null]], "polars.Expr.arg_min": [[381, null]], "polars.Expr.arg_sort": [[382, null]], "polars.Expr.arg_true": [[383, null]], "polars.Expr.arg_unique": [[384, null]], "polars.Expr.arr.all": [[385, null]], "polars.Expr.arr.any": [[386, null]], "polars.Expr.arr.arg_max": [[387, null]], "polars.Expr.arr.arg_min": [[388, null]], "polars.Expr.arr.contains": [[389, null]], "polars.Expr.arr.count_matches": [[390, null]], "polars.Expr.arr.explode": [[391, null]], "polars.Expr.arr.first": [[392, null]], "polars.Expr.arr.get": [[393, null]], "polars.Expr.arr.join": [[394, null]], "polars.Expr.arr.last": [[395, null]], "polars.Expr.arr.max": [[396, null]], "polars.Expr.arr.median": [[397, null]], "polars.Expr.arr.min": [[398, null]], "polars.Expr.arr.n_unique": [[399, null]], "polars.Expr.arr.reverse": [[400, null]], "polars.Expr.arr.shift": [[401, null]], "polars.Expr.arr.sort": [[402, null]], "polars.Expr.arr.std": [[403, null]], "polars.Expr.arr.sum": [[404, null]], "polars.Expr.arr.to_list": [[405, null]], "polars.Expr.arr.to_struct": [[406, null]], "polars.Expr.arr.unique": [[407, null]], "polars.Expr.arr.var": [[408, null]], "polars.Expr.backward_fill": [[409, null]], "polars.Expr.bin.contains": [[410, null]], "polars.Expr.bin.decode": [[411, null]], "polars.Expr.bin.encode": [[412, null]], "polars.Expr.bin.ends_with": [[413, null]], "polars.Expr.bin.reinterpret": [[414, null]], "polars.Expr.bin.size": [[415, null]], "polars.Expr.bin.starts_with": [[416, null]], "polars.Expr.bitwise_and": [[417, null]], "polars.Expr.bitwise_count_ones": [[418, null]], "polars.Expr.bitwise_count_zeros": [[419, null]], "polars.Expr.bitwise_leading_ones": [[420, null]], "polars.Expr.bitwise_leading_zeros": [[421, null]], "polars.Expr.bitwise_or": [[422, null]], "polars.Expr.bitwise_trailing_ones": [[423, null]], "polars.Expr.bitwise_trailing_zeros": [[424, null]], "polars.Expr.bitwise_xor": [[425, null]], "polars.Expr.bottom_k": [[426, null]], "polars.Expr.bottom_k_by": [[427, null]], "polars.Expr.cast": [[428, null]], "polars.Expr.cat.ends_with": [[429, null]], "polars.Expr.cat.get_categories": [[430, null]], "polars.Expr.cat.len_bytes": [[431, null]], "polars.Expr.cat.len_chars": [[432, null]], "polars.Expr.cat.starts_with": [[433, null]], "polars.Expr.cbrt": [[434, null]], "polars.Expr.ceil": [[435, null]], "polars.Expr.clip": [[436, null]], "polars.Expr.cos": [[437, null]], "polars.Expr.cosh": [[438, null]], "polars.Expr.cot": [[439, null]], "polars.Expr.count": [[440, null]], "polars.Expr.cum_count": [[441, null]], "polars.Expr.cum_max": [[442, null]], "polars.Expr.cum_min": [[443, null]], "polars.Expr.cum_prod": [[444, null]], "polars.Expr.cum_sum": [[445, null]], "polars.Expr.cumulative_eval": [[446, null]], "polars.Expr.cut": [[447, null]], "polars.Expr.degrees": [[448, null]], "polars.Expr.deserialize": [[449, null]], "polars.Expr.diff": [[450, null]], "polars.Expr.dot": [[451, null]], "polars.Expr.drop_nans": [[452, null]], "polars.Expr.drop_nulls": [[453, null]], "polars.Expr.dt.add_business_days": [[454, null]], "polars.Expr.dt.base_utc_offset": [[455, null]], "polars.Expr.dt.cast_time_unit": [[456, null]], "polars.Expr.dt.century": [[457, null]], "polars.Expr.dt.combine": [[458, null]], "polars.Expr.dt.convert_time_zone": [[459, null]], "polars.Expr.dt.date": [[460, null]], "polars.Expr.dt.datetime": [[461, null]], "polars.Expr.dt.day": [[462, null]], "polars.Expr.dt.dst_offset": [[463, null]], "polars.Expr.dt.epoch": [[464, null]], "polars.Expr.dt.hour": [[465, null]], "polars.Expr.dt.is_business_day": [[466, null]], "polars.Expr.dt.is_leap_year": [[467, null]], "polars.Expr.dt.iso_year": [[468, null]], "polars.Expr.dt.microsecond": [[469, null]], "polars.Expr.dt.millennium": [[470, null]], "polars.Expr.dt.millisecond": [[471, null]], "polars.Expr.dt.minute": [[472, null]], "polars.Expr.dt.month": [[473, null]], "polars.Expr.dt.month_end": [[474, null]], "polars.Expr.dt.month_start": [[475, null]], "polars.Expr.dt.nanosecond": [[476, null]], "polars.Expr.dt.offset_by": [[477, null]], "polars.Expr.dt.ordinal_day": [[478, null]], "polars.Expr.dt.quarter": [[479, null]], "polars.Expr.dt.replace": [[480, null]], "polars.Expr.dt.replace_time_zone": [[481, null]], "polars.Expr.dt.round": [[482, null]], "polars.Expr.dt.second": [[483, null]], "polars.Expr.dt.strftime": [[484, null]], "polars.Expr.dt.time": [[485, null]], "polars.Expr.dt.timestamp": [[486, null]], "polars.Expr.dt.to_string": [[487, null]], "polars.Expr.dt.total_days": [[488, null]], "polars.Expr.dt.total_hours": [[489, null]], "polars.Expr.dt.total_microseconds": [[490, null]], "polars.Expr.dt.total_milliseconds": [[491, null]], "polars.Expr.dt.total_minutes": [[492, null]], "polars.Expr.dt.total_nanoseconds": [[493, null]], "polars.Expr.dt.total_seconds": [[494, null]], "polars.Expr.dt.truncate": [[495, null]], "polars.Expr.dt.week": [[496, null]], "polars.Expr.dt.weekday": [[497, null]], "polars.Expr.dt.with_time_unit": [[498, null]], "polars.Expr.dt.year": [[499, null]], "polars.Expr.entropy": [[500, null]], "polars.Expr.eq": [[501, null]], "polars.Expr.eq_missing": [[502, null]], "polars.Expr.ewm_mean": [[503, null]], "polars.Expr.ewm_mean_by": [[504, null]], "polars.Expr.ewm_std": [[505, null]], "polars.Expr.ewm_var": [[506, null]], "polars.Expr.exclude": [[507, null]], "polars.Expr.exp": [[508, null]], "polars.Expr.explode": [[509, null]], "polars.Expr.extend_constant": [[510, null]], "polars.Expr.fill_nan": [[511, null]], "polars.Expr.fill_null": [[512, null]], "polars.Expr.filter": [[513, null]], "polars.Expr.first": [[514, null]], "polars.Expr.flatten": [[515, null]], "polars.Expr.floor": [[516, null]], "polars.Expr.floordiv": [[517, null]], "polars.Expr.forward_fill": [[518, null]], "polars.Expr.from_json": [[519, null]], "polars.Expr.gather": [[520, null]], "polars.Expr.gather_every": [[521, null]], "polars.Expr.ge": [[522, null]], "polars.Expr.get": [[523, null]], "polars.Expr.gt": [[524, null]], "polars.Expr.has_nulls": [[525, null]], "polars.Expr.hash": [[526, null]], "polars.Expr.head": [[527, null]], "polars.Expr.hist": [[528, null]], "polars.Expr.implode": [[529, null]], "polars.Expr.index_of": [[530, null]], "polars.Expr.inspect": [[531, null]], "polars.Expr.interpolate": [[532, null]], "polars.Expr.interpolate_by": [[533, null]], "polars.Expr.is_between": [[534, null]], "polars.Expr.is_duplicated": [[535, null]], "polars.Expr.is_finite": [[536, null]], "polars.Expr.is_first_distinct": [[537, null]], "polars.Expr.is_in": [[538, null]], "polars.Expr.is_infinite": [[539, null]], "polars.Expr.is_last_distinct": [[540, null]], "polars.Expr.is_nan": [[541, null]], "polars.Expr.is_not_nan": [[542, null]], "polars.Expr.is_not_null": [[543, null]], "polars.Expr.is_null": [[544, null]], "polars.Expr.is_unique": [[545, null]], "polars.Expr.kurtosis": [[546, null]], "polars.Expr.last": [[547, null]], "polars.Expr.le": [[548, null]], "polars.Expr.len": [[549, null]], "polars.Expr.limit": [[550, null]], "polars.Expr.list.all": [[551, null]], "polars.Expr.list.any": [[552, null]], "polars.Expr.list.arg_max": [[553, null]], "polars.Expr.list.arg_min": [[554, null]], "polars.Expr.list.concat": [[555, null]], "polars.Expr.list.contains": [[556, null]], "polars.Expr.list.count_matches": [[557, null]], "polars.Expr.list.diff": [[558, null]], "polars.Expr.list.drop_nulls": [[559, null]], "polars.Expr.list.eval": [[560, null]], "polars.Expr.list.explode": [[561, null]], "polars.Expr.list.first": [[562, null]], "polars.Expr.list.gather": [[563, null]], "polars.Expr.list.gather_every": [[564, null]], "polars.Expr.list.get": [[565, null]], "polars.Expr.list.head": [[566, null]], "polars.Expr.list.join": [[567, null]], "polars.Expr.list.last": [[568, null]], "polars.Expr.list.len": [[569, null]], "polars.Expr.list.max": [[570, null]], "polars.Expr.list.mean": [[571, null]], "polars.Expr.list.median": [[572, null]], "polars.Expr.list.min": [[573, null]], "polars.Expr.list.n_unique": [[574, null]], "polars.Expr.list.reverse": [[575, null]], "polars.Expr.list.sample": [[576, null]], "polars.Expr.list.set_difference": [[577, null]], "polars.Expr.list.set_intersection": [[578, null]], "polars.Expr.list.set_symmetric_difference": [[579, null]], "polars.Expr.list.set_union": [[580, null]], "polars.Expr.list.shift": [[581, null]], "polars.Expr.list.slice": [[582, null]], "polars.Expr.list.sort": [[583, null]], "polars.Expr.list.std": [[584, null]], "polars.Expr.list.sum": [[585, null]], "polars.Expr.list.tail": [[586, null]], "polars.Expr.list.to_array": [[587, null]], "polars.Expr.list.to_struct": [[588, null]], "polars.Expr.list.unique": [[589, null]], "polars.Expr.list.var": [[590, null]], "polars.Expr.log": [[591, null]], "polars.Expr.log10": [[592, null]], "polars.Expr.log1p": [[593, null]], "polars.Expr.lower_bound": [[594, null]], "polars.Expr.lt": [[595, null]], "polars.Expr.map_batches": [[596, null]], "polars.Expr.map_elements": [[597, null]], "polars.Expr.max": [[598, null]], "polars.Expr.mean": [[599, null]], "polars.Expr.median": [[600, null]], "polars.Expr.meta.eq": [[601, null]], "polars.Expr.meta.has_multiple_outputs": [[602, null]], "polars.Expr.meta.is_column": [[603, null]], "polars.Expr.meta.is_column_selection": [[604, null]], "polars.Expr.meta.is_literal": [[605, null]], "polars.Expr.meta.is_regex_projection": [[606, null]], "polars.Expr.meta.ne": [[607, null]], "polars.Expr.meta.output_name": [[608, null]], "polars.Expr.meta.pop": [[609, null]], "polars.Expr.meta.root_names": [[610, null]], "polars.Expr.meta.serialize": [[611, null]], "polars.Expr.meta.show_graph": [[612, null]], "polars.Expr.meta.tree_format": [[613, null]], "polars.Expr.meta.undo_aliases": [[614, null]], "polars.Expr.meta.write_json": [[615, null]], "polars.Expr.min": [[616, null]], "polars.Expr.mod": [[617, null]], "polars.Expr.mode": [[618, null]], "polars.Expr.mul": [[619, null]], "polars.Expr.n_unique": [[620, null]], "polars.Expr.name.keep": [[621, null]], "polars.Expr.name.map": [[622, null]], "polars.Expr.name.map_fields": [[623, null]], "polars.Expr.name.prefix": [[624, null]], "polars.Expr.name.prefix_fields": [[625, null]], "polars.Expr.name.suffix": [[626, null]], "polars.Expr.name.suffix_fields": [[627, null]], "polars.Expr.name.to_lowercase": [[628, null]], "polars.Expr.name.to_uppercase": [[629, null]], "polars.Expr.nan_max": [[630, null]], "polars.Expr.nan_min": [[631, null]], "polars.Expr.ne": [[632, null]], "polars.Expr.ne_missing": [[633, null]], "polars.Expr.neg": [[634, null]], "polars.Expr.not_": [[635, null]], "polars.Expr.null_count": [[636, null]], "polars.Expr.or_": [[637, null]], "polars.Expr.over": [[638, null]], "polars.Expr.pct_change": [[639, null]], "polars.Expr.peak_max": [[640, null]], "polars.Expr.peak_min": [[641, null]], "polars.Expr.pipe": [[642, null]], "polars.Expr.pow": [[643, null]], "polars.Expr.product": [[644, null]], "polars.Expr.qcut": [[645, null]], "polars.Expr.quantile": [[646, null]], "polars.Expr.radians": [[647, null]], "polars.Expr.rank": [[648, null]], "polars.Expr.rechunk": [[649, null]], "polars.Expr.reinterpret": [[650, null]], "polars.Expr.repeat_by": [[651, null]], "polars.Expr.replace": [[652, null]], "polars.Expr.replace_strict": [[653, null]], "polars.Expr.reshape": [[654, null]], "polars.Expr.reverse": [[655, null]], "polars.Expr.rle": [[656, null]], "polars.Expr.rle_id": [[657, null]], "polars.Expr.rolling": [[658, null]], "polars.Expr.rolling_kurtosis": [[659, null]], "polars.Expr.rolling_map": [[660, null]], "polars.Expr.rolling_max": [[661, null]], "polars.Expr.rolling_max_by": [[662, null]], "polars.Expr.rolling_mean": [[663, null]], "polars.Expr.rolling_mean_by": [[664, null]], "polars.Expr.rolling_median": [[665, null]], "polars.Expr.rolling_median_by": [[666, null]], "polars.Expr.rolling_min": [[667, null]], "polars.Expr.rolling_min_by": [[668, null]], "polars.Expr.rolling_quantile": [[669, null]], "polars.Expr.rolling_quantile_by": [[670, null]], "polars.Expr.rolling_skew": [[671, null]], "polars.Expr.rolling_std": [[672, null]], "polars.Expr.rolling_std_by": [[673, null]], "polars.Expr.rolling_sum": [[674, null]], "polars.Expr.rolling_sum_by": [[675, null]], "polars.Expr.rolling_var": [[676, null]], "polars.Expr.rolling_var_by": [[677, null]], "polars.Expr.round": [[678, null]], "polars.Expr.round_sig_figs": [[679, null]], "polars.Expr.sample": [[680, null]], "polars.Expr.search_sorted": [[681, null]], "polars.Expr.set_sorted": [[682, null]], "polars.Expr.shift": [[683, null]], "polars.Expr.shrink_dtype": [[684, null]], "polars.Expr.shuffle": [[685, null]], "polars.Expr.sign": [[686, null]], "polars.Expr.sin": [[687, null]], "polars.Expr.sinh": [[688, null]], "polars.Expr.skew": [[689, null]], "polars.Expr.slice": [[690, null]], "polars.Expr.sort": [[691, null]], "polars.Expr.sort_by": [[692, null]], "polars.Expr.sqrt": [[693, null]], "polars.Expr.std": [[694, null]], "polars.Expr.str.concat": [[695, null]], "polars.Expr.str.contains": [[696, null]], "polars.Expr.str.contains_any": [[697, null]], "polars.Expr.str.count_matches": [[698, null]], "polars.Expr.str.decode": [[699, null]], "polars.Expr.str.encode": [[700, null]], "polars.Expr.str.ends_with": [[701, null]], "polars.Expr.str.escape_regex": [[702, null]], "polars.Expr.str.explode": [[703, null]], "polars.Expr.str.extract": [[704, null]], "polars.Expr.str.extract_all": [[705, null]], "polars.Expr.str.extract_groups": [[706, null]], "polars.Expr.str.extract_many": [[707, null]], "polars.Expr.str.find": [[708, null]], "polars.Expr.str.find_many": [[709, null]], "polars.Expr.str.head": [[710, null]], "polars.Expr.str.join": [[711, null]], "polars.Expr.str.json_decode": [[712, null]], "polars.Expr.str.json_path_match": [[713, null]], "polars.Expr.str.len_bytes": [[714, null]], "polars.Expr.str.len_chars": [[715, null]], "polars.Expr.str.normalize": [[716, null]], "polars.Expr.str.pad_end": [[717, null]], "polars.Expr.str.pad_start": [[718, null]], "polars.Expr.str.replace": [[719, null]], "polars.Expr.str.replace_all": [[720, null]], "polars.Expr.str.replace_many": [[721, null]], "polars.Expr.str.reverse": [[722, null]], "polars.Expr.str.slice": [[723, null]], "polars.Expr.str.split": [[724, null]], "polars.Expr.str.split_exact": [[725, null]], "polars.Expr.str.splitn": [[726, null]], "polars.Expr.str.starts_with": [[727, null]], "polars.Expr.str.strip_chars": [[728, null]], "polars.Expr.str.strip_chars_end": [[729, null]], "polars.Expr.str.strip_chars_start": [[730, null]], "polars.Expr.str.strip_prefix": [[731, null]], "polars.Expr.str.strip_suffix": [[732, null]], "polars.Expr.str.strptime": [[733, null]], "polars.Expr.str.tail": [[734, null]], "polars.Expr.str.to_date": [[735, null]], "polars.Expr.str.to_datetime": [[736, null]], "polars.Expr.str.to_decimal": [[737, null]], "polars.Expr.str.to_integer": [[738, null]], "polars.Expr.str.to_lowercase": [[739, null]], "polars.Expr.str.to_time": [[740, null]], "polars.Expr.str.to_titlecase": [[741, null]], "polars.Expr.str.to_uppercase": [[742, null]], "polars.Expr.str.zfill": [[743, null]], "polars.Expr.struct.field": [[744, null]], "polars.Expr.struct.json_encode": [[745, null]], "polars.Expr.struct.rename_fields": [[746, null]], "polars.Expr.struct.unnest": [[747, null]], "polars.Expr.struct.with_fields": [[748, null]], "polars.Expr.sub": [[749, null]], "polars.Expr.sum": [[750, null]], "polars.Expr.tail": [[751, null]], "polars.Expr.tan": [[752, null]], "polars.Expr.tanh": [[753, null]], "polars.Expr.to_physical": [[754, null]], "polars.Expr.top_k": [[755, null]], "polars.Expr.top_k_by": [[756, null]], "polars.Expr.truediv": [[757, null]], "polars.Expr.unique": [[758, null]], "polars.Expr.unique_counts": [[759, null]], "polars.Expr.upper_bound": [[760, null]], "polars.Expr.value_counts": [[761, null]], "polars.Expr.var": [[762, null]], "polars.Expr.where": [[763, null]], "polars.Expr.xor": [[764, null]], "polars.LazyFrame.__getitem__": [[865, null]], "polars.LazyFrame.approx_n_unique": [[866, null]], "polars.LazyFrame.bottom_k": [[867, null]], "polars.LazyFrame.cache": [[868, null]], "polars.LazyFrame.cast": [[869, null]], "polars.LazyFrame.clear": [[870, null]], "polars.LazyFrame.clone": [[871, null]], "polars.LazyFrame.collect": [[872, null]], "polars.LazyFrame.collect_async": [[873, null]], "polars.LazyFrame.collect_schema": [[874, null]], "polars.LazyFrame.columns": [[875, null]], "polars.LazyFrame.count": [[876, null]], "polars.LazyFrame.describe": [[877, null]], "polars.LazyFrame.deserialize": [[878, null]], "polars.LazyFrame.drop": [[879, null]], "polars.LazyFrame.drop_nans": [[880, null]], "polars.LazyFrame.drop_nulls": [[881, null]], "polars.LazyFrame.dtypes": [[882, null]], "polars.LazyFrame.explain": [[883, null]], "polars.LazyFrame.explode": [[884, null]], "polars.LazyFrame.fill_nan": [[885, null]], "polars.LazyFrame.fill_null": [[886, null]], "polars.LazyFrame.filter": [[887, null]], "polars.LazyFrame.first": [[888, null]], "polars.LazyFrame.gather_every": [[889, null]], "polars.LazyFrame.group_by": [[890, null]], "polars.LazyFrame.group_by_dynamic": [[891, null]], "polars.LazyFrame.head": [[892, null]], "polars.LazyFrame.inspect": [[893, null]], "polars.LazyFrame.interpolate": [[894, null]], "polars.LazyFrame.join": [[895, null]], "polars.LazyFrame.join_asof": [[896, null]], "polars.LazyFrame.join_where": [[897, null]], "polars.LazyFrame.last": [[898, null]], "polars.LazyFrame.lazy": [[899, null]], "polars.LazyFrame.limit": [[900, null]], "polars.LazyFrame.map_batches": [[901, null]], "polars.LazyFrame.match_to_schema": [[902, null]], "polars.LazyFrame.max": [[903, null]], "polars.LazyFrame.mean": [[904, null]], "polars.LazyFrame.median": [[905, null]], "polars.LazyFrame.melt": [[906, null]], "polars.LazyFrame.merge_sorted": [[907, null]], "polars.LazyFrame.min": [[908, null]], "polars.LazyFrame.null_count": [[909, null]], "polars.LazyFrame.pipe": [[910, null]], "polars.LazyFrame.profile": [[911, null]], "polars.LazyFrame.quantile": [[912, null]], "polars.LazyFrame.remote": [[913, null]], "polars.LazyFrame.remove": [[914, null]], "polars.LazyFrame.rename": [[915, null]], "polars.LazyFrame.reverse": [[916, null]], "polars.LazyFrame.rolling": [[917, null]], "polars.LazyFrame.schema": [[918, null]], "polars.LazyFrame.select": [[919, null]], "polars.LazyFrame.select_seq": [[920, null]], "polars.LazyFrame.serialize": [[921, null]], "polars.LazyFrame.set_sorted": [[922, null]], "polars.LazyFrame.shift": [[923, null]], "polars.LazyFrame.show_graph": [[924, null]], "polars.LazyFrame.sink_csv": [[49, null]], "polars.LazyFrame.sink_ipc": [[50, null]], "polars.LazyFrame.sink_ndjson": [[51, null]], "polars.LazyFrame.sink_parquet": [[52, null]], "polars.LazyFrame.slice": [[925, null]], "polars.LazyFrame.sort": [[926, null]], "polars.LazyFrame.sql": [[927, null]], "polars.LazyFrame.std": [[928, null]], "polars.LazyFrame.sum": [[929, null]], "polars.LazyFrame.tail": [[930, null]], "polars.LazyFrame.top_k": [[931, null]], "polars.LazyFrame.unique": [[932, null]], "polars.LazyFrame.unnest": [[933, null]], "polars.LazyFrame.unpivot": [[934, null]], "polars.LazyFrame.update": [[935, null]], "polars.LazyFrame.var": [[936, null]], "polars.LazyFrame.width": [[937, null]], "polars.LazyFrame.with_columns": [[938, null]], "polars.LazyFrame.with_columns_seq": [[939, null]], "polars.LazyFrame.with_context": [[940, null]], "polars.LazyFrame.with_row_count": [[941, null]], "polars.LazyFrame.with_row_index": [[942, null]], "polars.PartitionByKey": [[53, null]], "polars.PartitionMaxSize": [[54, null]], "polars.PartitionParted": [[55, null]], "polars.QueryOptFlags": [[943, null]], "polars.SQLContext.execute": [[1380, null]], "polars.SQLContext.execute_global": [[1381, null]], "polars.SQLContext.register": [[1382, null]], "polars.SQLContext.register_globals": [[1383, null]], "polars.SQLContext.register_many": [[1384, null]], "polars.SQLContext.tables": [[1385, null]], "polars.SQLContext.unregister": [[1386, null]], "polars.ScanCastOptions": [[56, null]], "polars.Series.__array__": [[977, null]], "polars.Series.__arrow_c_stream__": [[978, null]], "polars.Series.__getitem__": [[979, null]], "polars.Series.abs": [[980, null]], "polars.Series.alias": [[981, null]], "polars.Series.all": [[982, null]], "polars.Series.any": [[983, null]], "polars.Series.append": [[984, null]], "polars.Series.approx_n_unique": [[985, null]], "polars.Series.arccos": [[986, null]], "polars.Series.arccosh": [[987, null]], "polars.Series.arcsin": [[988, null]], "polars.Series.arcsinh": [[989, null]], "polars.Series.arctan": [[990, null]], "polars.Series.arctanh": [[991, null]], "polars.Series.arg_max": [[992, null]], "polars.Series.arg_min": [[993, null]], "polars.Series.arg_sort": [[994, null]], "polars.Series.arg_true": [[995, null]], "polars.Series.arg_unique": [[996, null]], "polars.Series.arr.all": [[997, null]], "polars.Series.arr.any": [[998, null]], "polars.Series.arr.arg_max": [[999, null]], "polars.Series.arr.arg_min": [[1000, null]], "polars.Series.arr.contains": [[1001, null]], "polars.Series.arr.count_matches": [[1002, null]], "polars.Series.arr.explode": [[1003, null]], "polars.Series.arr.first": [[1004, null]], "polars.Series.arr.get": [[1005, null]], "polars.Series.arr.join": [[1006, null]], "polars.Series.arr.last": [[1007, null]], "polars.Series.arr.max": [[1008, null]], "polars.Series.arr.median": [[1009, null]], "polars.Series.arr.min": [[1010, null]], "polars.Series.arr.n_unique": [[1011, null]], "polars.Series.arr.reverse": [[1012, null]], "polars.Series.arr.shift": [[1013, null]], "polars.Series.arr.sort": [[1014, null]], "polars.Series.arr.std": [[1015, null]], "polars.Series.arr.sum": [[1016, null]], "polars.Series.arr.to_list": [[1017, null]], "polars.Series.arr.to_struct": [[1018, null]], "polars.Series.arr.unique": [[1019, null]], "polars.Series.arr.var": [[1020, null]], "polars.Series.backward_fill": [[1021, null]], "polars.Series.bin.contains": [[1022, null]], "polars.Series.bin.decode": [[1023, null]], "polars.Series.bin.encode": [[1024, null]], "polars.Series.bin.ends_with": [[1025, null]], "polars.Series.bin.reinterpret": [[1026, null]], "polars.Series.bin.size": [[1027, null]], "polars.Series.bin.starts_with": [[1028, null]], "polars.Series.bitwise_and": [[1029, null]], "polars.Series.bitwise_count_ones": [[1030, null]], "polars.Series.bitwise_count_zeros": [[1031, null]], "polars.Series.bitwise_leading_ones": [[1032, null]], "polars.Series.bitwise_leading_zeros": [[1033, null]], "polars.Series.bitwise_or": [[1034, null]], "polars.Series.bitwise_trailing_ones": [[1035, null]], "polars.Series.bitwise_trailing_zeros": [[1036, null]], "polars.Series.bitwise_xor": [[1037, null]], "polars.Series.bottom_k": [[1038, null]], "polars.Series.bottom_k_by": [[1039, null]], "polars.Series.cast": [[1040, null]], "polars.Series.cat.ends_with": [[1041, null]], "polars.Series.cat.get_categories": [[1042, null]], "polars.Series.cat.is_local": [[1043, null]], "polars.Series.cat.len_bytes": [[1044, null]], "polars.Series.cat.len_chars": [[1045, null]], "polars.Series.cat.starts_with": [[1046, null]], "polars.Series.cat.to_local": [[1047, null]], "polars.Series.cat.uses_lexical_ordering": [[1048, null]], "polars.Series.cbrt": [[1049, null]], "polars.Series.ceil": [[1050, null]], "polars.Series.chunk_lengths": [[1051, null]], "polars.Series.clear": [[1052, null]], "polars.Series.clip": [[1053, null]], "polars.Series.clone": [[1054, null]], "polars.Series.cos": [[1055, null]], "polars.Series.cosh": [[1056, null]], "polars.Series.cot": [[1057, null]], "polars.Series.count": [[1058, null]], "polars.Series.cum_count": [[1059, null]], "polars.Series.cum_max": [[1060, null]], "polars.Series.cum_min": [[1061, null]], "polars.Series.cum_prod": [[1062, null]], "polars.Series.cum_sum": [[1063, null]], "polars.Series.cumulative_eval": [[1064, null]], "polars.Series.cut": [[1065, null]], "polars.Series.describe": [[1066, null]], "polars.Series.diff": [[1067, null]], "polars.Series.dot": [[1068, null]], "polars.Series.drop_nans": [[1069, null]], "polars.Series.drop_nulls": [[1070, null]], "polars.Series.dt.add_business_days": [[1071, null]], "polars.Series.dt.base_utc_offset": [[1072, null]], "polars.Series.dt.cast_time_unit": [[1073, null]], "polars.Series.dt.century": [[1074, null]], "polars.Series.dt.combine": [[1075, null]], "polars.Series.dt.convert_time_zone": [[1076, null]], "polars.Series.dt.date": [[1077, null]], "polars.Series.dt.datetime": [[1078, null]], "polars.Series.dt.day": [[1079, null]], "polars.Series.dt.dst_offset": [[1080, null]], "polars.Series.dt.epoch": [[1081, null]], "polars.Series.dt.hour": [[1082, null]], "polars.Series.dt.is_business_day": [[1083, null]], "polars.Series.dt.is_leap_year": [[1084, null]], "polars.Series.dt.iso_year": [[1085, null]], "polars.Series.dt.max": [[1086, null]], "polars.Series.dt.mean": [[1087, null]], "polars.Series.dt.median": [[1088, null]], "polars.Series.dt.microsecond": [[1089, null]], "polars.Series.dt.millennium": [[1090, null]], "polars.Series.dt.millisecond": [[1091, null]], "polars.Series.dt.min": [[1092, null]], "polars.Series.dt.minute": [[1093, null]], "polars.Series.dt.month": [[1094, null]], "polars.Series.dt.month_end": [[1095, null]], "polars.Series.dt.month_start": [[1096, null]], "polars.Series.dt.nanosecond": [[1097, null]], "polars.Series.dt.offset_by": [[1098, null]], "polars.Series.dt.ordinal_day": [[1099, null]], "polars.Series.dt.quarter": [[1100, null]], "polars.Series.dt.replace": [[1101, null]], "polars.Series.dt.replace_time_zone": [[1102, null]], "polars.Series.dt.round": [[1103, null]], "polars.Series.dt.second": [[1104, null]], "polars.Series.dt.strftime": [[1105, null]], "polars.Series.dt.time": [[1106, null]], "polars.Series.dt.timestamp": [[1107, null]], "polars.Series.dt.to_string": [[1108, null]], "polars.Series.dt.total_days": [[1109, null]], "polars.Series.dt.total_hours": [[1110, null]], "polars.Series.dt.total_microseconds": [[1111, null]], "polars.Series.dt.total_milliseconds": [[1112, null]], "polars.Series.dt.total_minutes": [[1113, null]], "polars.Series.dt.total_nanoseconds": [[1114, null]], "polars.Series.dt.total_seconds": [[1115, null]], "polars.Series.dt.truncate": [[1116, null]], "polars.Series.dt.week": [[1117, null]], "polars.Series.dt.weekday": [[1118, null]], "polars.Series.dt.with_time_unit": [[1119, null]], "polars.Series.dt.year": [[1120, null]], "polars.Series.dtype": [[1121, null]], "polars.Series.entropy": [[1122, null]], "polars.Series.eq": [[1123, null]], "polars.Series.eq_missing": [[1124, null]], "polars.Series.equals": [[1125, null]], "polars.Series.estimated_size": [[1126, null]], "polars.Series.ewm_mean": [[1127, null]], "polars.Series.ewm_mean_by": [[1128, null]], "polars.Series.ewm_std": [[1129, null]], "polars.Series.ewm_var": [[1130, null]], "polars.Series.exp": [[1131, null]], "polars.Series.explode": [[1132, null]], "polars.Series.extend": [[1133, null]], "polars.Series.extend_constant": [[1134, null]], "polars.Series.fill_nan": [[1135, null]], "polars.Series.fill_null": [[1136, null]], "polars.Series.filter": [[1137, null]], "polars.Series.first": [[1138, null]], "polars.Series.flags": [[1139, null]], "polars.Series.floor": [[1140, null]], "polars.Series.forward_fill": [[1141, null]], "polars.Series.gather": [[1142, null]], "polars.Series.gather_every": [[1143, null]], "polars.Series.ge": [[1144, null]], "polars.Series.get_chunks": [[1145, null]], "polars.Series.gt": [[1146, null]], "polars.Series.has_nulls": [[1147, null]], "polars.Series.has_validity": [[1148, null]], "polars.Series.hash": [[1149, null]], "polars.Series.head": [[1150, null]], "polars.Series.hist": [[1151, null]], "polars.Series.implode": [[1152, null]], "polars.Series.index_of": [[1153, null]], "polars.Series.interpolate": [[1154, null]], "polars.Series.interpolate_by": [[1155, null]], "polars.Series.is_between": [[1156, null]], "polars.Series.is_duplicated": [[1157, null]], "polars.Series.is_empty": [[1158, null]], "polars.Series.is_finite": [[1159, null]], "polars.Series.is_first_distinct": [[1160, null]], "polars.Series.is_in": [[1161, null]], "polars.Series.is_infinite": [[1162, null]], "polars.Series.is_last_distinct": [[1163, null]], "polars.Series.is_nan": [[1164, null]], "polars.Series.is_not_nan": [[1165, null]], "polars.Series.is_not_null": [[1166, null]], "polars.Series.is_null": [[1167, null]], "polars.Series.is_sorted": [[1168, null]], "polars.Series.is_unique": [[1169, null]], "polars.Series.item": [[1170, null]], "polars.Series.kurtosis": [[1171, null]], "polars.Series.last": [[1172, null]], "polars.Series.le": [[1173, null]], "polars.Series.len": [[1174, null]], "polars.Series.limit": [[1175, null]], "polars.Series.list.all": [[1176, null]], "polars.Series.list.any": [[1177, null]], "polars.Series.list.arg_max": [[1178, null]], "polars.Series.list.arg_min": [[1179, null]], "polars.Series.list.concat": [[1180, null]], "polars.Series.list.contains": [[1181, null]], "polars.Series.list.count_matches": [[1182, null]], "polars.Series.list.diff": [[1183, null]], "polars.Series.list.drop_nulls": [[1184, null]], "polars.Series.list.eval": [[1185, null]], "polars.Series.list.explode": [[1186, null]], "polars.Series.list.first": [[1187, null]], "polars.Series.list.gather": [[1188, null]], "polars.Series.list.gather_every": [[1189, null]], "polars.Series.list.get": [[1190, null]], "polars.Series.list.head": [[1191, null]], "polars.Series.list.join": [[1192, null]], "polars.Series.list.last": [[1193, null]], "polars.Series.list.len": [[1194, null]], "polars.Series.list.max": [[1195, null]], "polars.Series.list.mean": [[1196, null]], "polars.Series.list.median": [[1197, null]], "polars.Series.list.min": [[1198, null]], "polars.Series.list.n_unique": [[1199, null]], "polars.Series.list.reverse": [[1200, null]], "polars.Series.list.sample": [[1201, null]], "polars.Series.list.set_difference": [[1202, null]], "polars.Series.list.set_intersection": [[1203, null]], "polars.Series.list.set_symmetric_difference": [[1204, null]], "polars.Series.list.set_union": [[1205, null]], "polars.Series.list.shift": [[1206, null]], "polars.Series.list.slice": [[1207, null]], "polars.Series.list.sort": [[1208, null]], "polars.Series.list.std": [[1209, null]], "polars.Series.list.sum": [[1210, null]], "polars.Series.list.tail": [[1211, null]], "polars.Series.list.to_array": [[1212, null]], "polars.Series.list.to_struct": [[1213, null]], "polars.Series.list.unique": [[1214, null]], "polars.Series.list.var": [[1215, null]], "polars.Series.log": [[1216, null]], "polars.Series.log10": [[1217, null]], "polars.Series.log1p": [[1218, null]], "polars.Series.lower_bound": [[1219, null]], "polars.Series.lt": [[1220, null]], "polars.Series.map_elements": [[1221, null]], "polars.Series.max": [[1222, null]], "polars.Series.mean": [[1223, null]], "polars.Series.median": [[1224, null]], "polars.Series.min": [[1225, null]], "polars.Series.mode": [[1226, null]], "polars.Series.n_chunks": [[1227, null]], "polars.Series.n_unique": [[1228, null]], "polars.Series.name": [[1229, null]], "polars.Series.nan_max": [[1230, null]], "polars.Series.nan_min": [[1231, null]], "polars.Series.ne": [[1232, null]], "polars.Series.ne_missing": [[1233, null]], "polars.Series.new_from_index": [[1234, null]], "polars.Series.not_": [[1235, null]], "polars.Series.null_count": [[1236, null]], "polars.Series.pct_change": [[1237, null]], "polars.Series.peak_max": [[1238, null]], "polars.Series.peak_min": [[1239, null]], "polars.Series.pow": [[1240, null]], "polars.Series.product": [[1241, null]], "polars.Series.qcut": [[1242, null]], "polars.Series.quantile": [[1243, null]], "polars.Series.rank": [[1244, null]], "polars.Series.rechunk": [[1245, null]], "polars.Series.reinterpret": [[1246, null]], "polars.Series.rename": [[1247, null]], "polars.Series.repeat_by": [[1248, null]], "polars.Series.replace": [[1249, null]], "polars.Series.replace_strict": [[1250, null]], "polars.Series.reshape": [[1251, null]], "polars.Series.reverse": [[1252, null]], "polars.Series.rle": [[1253, null]], "polars.Series.rle_id": [[1254, null]], "polars.Series.rolling_kurtosis": [[1255, null]], "polars.Series.rolling_map": [[1256, null]], "polars.Series.rolling_max": [[1257, null]], "polars.Series.rolling_mean": [[1258, null]], "polars.Series.rolling_median": [[1259, null]], "polars.Series.rolling_min": [[1260, null]], "polars.Series.rolling_quantile": [[1261, null]], "polars.Series.rolling_skew": [[1262, null]], "polars.Series.rolling_std": [[1263, null]], "polars.Series.rolling_sum": [[1264, null]], "polars.Series.rolling_var": [[1265, null]], "polars.Series.round": [[1266, null]], "polars.Series.round_sig_figs": [[1267, null]], "polars.Series.sample": [[1268, null]], "polars.Series.scatter": [[1269, null]], "polars.Series.search_sorted": [[1270, null]], "polars.Series.set": [[1271, null]], "polars.Series.set_sorted": [[1272, null]], "polars.Series.shape": [[1273, null]], "polars.Series.shift": [[1274, null]], "polars.Series.shrink_dtype": [[1275, null]], "polars.Series.shrink_to_fit": [[1276, null]], "polars.Series.shuffle": [[1277, null]], "polars.Series.sign": [[1278, null]], "polars.Series.sin": [[1279, null]], "polars.Series.sinh": [[1280, null]], "polars.Series.skew": [[1281, null]], "polars.Series.slice": [[1282, null]], "polars.Series.sort": [[1283, null]], "polars.Series.sqrt": [[1284, null]], "polars.Series.std": [[1285, null]], "polars.Series.str.concat": [[1286, null]], "polars.Series.str.contains": [[1287, null]], "polars.Series.str.contains_any": [[1288, null]], "polars.Series.str.count_matches": [[1289, null]], "polars.Series.str.decode": [[1290, null]], "polars.Series.str.encode": [[1291, null]], "polars.Series.str.ends_with": [[1292, null]], "polars.Series.str.escape_regex": [[1293, null]], "polars.Series.str.explode": [[1294, null]], "polars.Series.str.extract": [[1295, null]], "polars.Series.str.extract_all": [[1296, null]], "polars.Series.str.extract_groups": [[1297, null]], "polars.Series.str.extract_many": [[1298, null]], "polars.Series.str.find": [[1299, null]], "polars.Series.str.find_many": [[1300, null]], "polars.Series.str.head": [[1301, null]], "polars.Series.str.join": [[1302, null]], "polars.Series.str.json_decode": [[1303, null]], "polars.Series.str.json_path_match": [[1304, null]], "polars.Series.str.len_bytes": [[1305, null]], "polars.Series.str.len_chars": [[1306, null]], "polars.Series.str.normalize": [[1307, null]], "polars.Series.str.pad_end": [[1308, null]], "polars.Series.str.pad_start": [[1309, null]], "polars.Series.str.replace": [[1310, null]], "polars.Series.str.replace_all": [[1311, null]], "polars.Series.str.replace_many": [[1312, null]], "polars.Series.str.reverse": [[1313, null]], "polars.Series.str.slice": [[1314, null]], "polars.Series.str.split": [[1315, null]], "polars.Series.str.split_exact": [[1316, null]], "polars.Series.str.splitn": [[1317, null]], "polars.Series.str.starts_with": [[1318, null]], "polars.Series.str.strip_chars": [[1319, null]], "polars.Series.str.strip_chars_end": [[1320, null]], "polars.Series.str.strip_chars_start": [[1321, null]], "polars.Series.str.strip_prefix": [[1322, null]], "polars.Series.str.strip_suffix": [[1323, null]], "polars.Series.str.strptime": [[1324, null]], "polars.Series.str.tail": [[1325, null]], "polars.Series.str.to_date": [[1326, null]], "polars.Series.str.to_datetime": [[1327, null]], "polars.Series.str.to_decimal": [[1328, null]], "polars.Series.str.to_integer": [[1329, null]], "polars.Series.str.to_lowercase": [[1330, null]], "polars.Series.str.to_time": [[1331, null]], "polars.Series.str.to_titlecase": [[1332, null]], "polars.Series.str.to_uppercase": [[1333, null]], "polars.Series.str.zfill": [[1334, null]], "polars.Series.struct.field": [[1335, null]], "polars.Series.struct.fields": [[1336, null]], "polars.Series.struct.json_encode": [[1337, null]], "polars.Series.struct.rename_fields": [[1338, null]], "polars.Series.struct.schema": [[1339, null]], "polars.Series.struct.unnest": [[1340, null]], "polars.Series.sum": [[1341, null]], "polars.Series.tail": [[1342, null]], "polars.Series.tan": [[1343, null]], "polars.Series.tanh": [[1344, null]], "polars.Series.to_arrow": [[1345, null]], "polars.Series.to_dummies": [[1346, null]], "polars.Series.to_frame": [[1347, null]], "polars.Series.to_init_repr": [[1348, null]], "polars.Series.to_jax": [[1349, null]], "polars.Series.to_list": [[1350, null]], "polars.Series.to_numpy": [[1351, null]], "polars.Series.to_pandas": [[1352, null]], "polars.Series.to_physical": [[1353, null]], "polars.Series.to_torch": [[1354, null]], "polars.Series.top_k": [[1355, null]], "polars.Series.top_k_by": [[1356, null]], "polars.Series.unique": [[1357, null]], "polars.Series.unique_counts": [[1358, null]], "polars.Series.upper_bound": [[1359, null]], "polars.Series.value_counts": [[1360, null]], "polars.Series.var": [[1361, null]], "polars.Series.zip_with": [[1362, null]], "polars.StringCache": [[57, null]], "polars.align_frames": [[58, null]], "polars.all": [[765, null]], "polars.all_horizontal": [[766, null]], "polars.any": [[767, null]], "polars.any_horizontal": [[768, null]], "polars.api.register_dataframe_namespace": [[59, null]], "polars.api.register_expr_namespace": [[60, null]], "polars.api.register_lazyframe_namespace": [[61, null]], "polars.api.register_series_namespace": [[62, null]], "polars.approx_n_unique": [[769, null]], "polars.arange": [[770, null]], "polars.arctan2": [[771, null]], "polars.arctan2d": [[772, null]], "polars.arg_sort_by": [[773, null]], "polars.arg_where": [[774, null]], "polars.build_info": [[63, null]], "polars.business_day_count": [[775, null]], "polars.catalog.unity.CatalogInfo": [[198, null]], "polars.catalog.unity.ColumnInfo": [[199, null]], "polars.catalog.unity.DataSourceFormat": [[200, null]], "polars.catalog.unity.NamespaceInfo": [[201, null]], "polars.catalog.unity.TableInfo": [[202, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[203, null]], "polars.catalog.unity.TableType": [[204, null]], "polars.coalesce": [[776, null]], "polars.col": [[846, null]], "polars.collect_all": [[64, null]], "polars.collect_all_async": [[65, null]], "polars.concat": [[66, null]], "polars.concat_arr": [[777, null]], "polars.concat_list": [[778, null]], "polars.concat_str": [[779, null]], "polars.corr": [[780, null]], "polars.count": [[781, null]], "polars.cov": [[782, null]], "polars.cum_count": [[783, null]], "polars.cum_fold": [[784, null]], "polars.cum_reduce": [[785, null]], "polars.cum_sum": [[786, null]], "polars.cum_sum_horizontal": [[787, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[334, null]], "polars.dataframe.group_by.GroupBy.agg": [[335, null]], "polars.dataframe.group_by.GroupBy.all": [[336, null]], "polars.dataframe.group_by.GroupBy.count": [[337, null]], "polars.dataframe.group_by.GroupBy.first": [[338, null]], "polars.dataframe.group_by.GroupBy.head": [[339, null]], "polars.dataframe.group_by.GroupBy.last": [[340, null]], "polars.dataframe.group_by.GroupBy.len": [[341, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[342, null]], "polars.dataframe.group_by.GroupBy.max": [[343, null]], "polars.dataframe.group_by.GroupBy.mean": [[344, null]], "polars.dataframe.group_by.GroupBy.median": [[345, null]], "polars.dataframe.group_by.GroupBy.min": [[346, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[347, null]], "polars.dataframe.group_by.GroupBy.quantile": [[348, null]], "polars.dataframe.group_by.GroupBy.sum": [[349, null]], "polars.dataframe.group_by.GroupBy.tail": [[350, null]], "polars.datatypes.Array": [[67, null]], "polars.datatypes.Binary": [[68, null]], "polars.datatypes.Boolean": [[69, null]], "polars.datatypes.Categorical": [[70, null]], "polars.datatypes.DataType": [[71, null]], "polars.datatypes.Date": [[72, null]], "polars.datatypes.Datetime": [[73, null]], "polars.datatypes.Decimal": [[74, null]], "polars.datatypes.Duration": [[75, null]], "polars.datatypes.Enum": [[76, null]], "polars.datatypes.Field": [[77, null]], "polars.datatypes.Float32": [[78, null]], "polars.datatypes.Float64": [[79, null]], "polars.datatypes.Int128": [[80, null]], "polars.datatypes.Int16": [[81, null]], "polars.datatypes.Int32": [[82, null]], "polars.datatypes.Int64": [[83, null]], "polars.datatypes.Int8": [[84, null]], "polars.datatypes.List": [[85, null]], "polars.datatypes.Null": [[86, null]], "polars.datatypes.Object": [[87, null]], "polars.datatypes.String": [[88, null]], "polars.datatypes.Struct": [[89, null]], "polars.datatypes.Time": [[90, null]], "polars.datatypes.UInt16": [[91, null]], "polars.datatypes.UInt32": [[92, null]], "polars.datatypes.UInt64": [[93, null]], "polars.datatypes.UInt8": [[94, null]], "polars.datatypes.Unknown": [[95, null]], "polars.datatypes.Utf8": [[96, null]], "polars.date": [[788, null]], "polars.date_range": [[789, null]], "polars.date_ranges": [[790, null]], "polars.datetime": [[791, null]], "polars.datetime_range": [[792, null]], "polars.datetime_ranges": [[793, null]], "polars.defer": [[97, null]], "polars.disable_string_cache": [[98, null]], "polars.dtype_of": [[99, null]], "polars.duration": [[794, null]], "polars.element": [[795, null]], "polars.enable_string_cache": [[100, null]], "polars.escape_regex": [[101, null]], "polars.exceptions.CategoricalRemappingWarning": [[102, null]], "polars.exceptions.ChronoFormatWarning": [[103, null]], "polars.exceptions.ColumnNotFoundError": [[104, null]], "polars.exceptions.ComputeError": [[105, null]], "polars.exceptions.CustomUFuncWarning": [[106, null]], "polars.exceptions.DataOrientationWarning": [[107, null]], "polars.exceptions.DuplicateError": [[108, null]], "polars.exceptions.InvalidOperationError": [[109, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[110, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[111, null]], "polars.exceptions.NoDataError": [[112, null]], "polars.exceptions.NoRowsReturnedError": [[113, null]], "polars.exceptions.OutOfBoundsError": [[114, null]], "polars.exceptions.PanicException": [[115, null]], "polars.exceptions.ParameterCollisionError": [[116, null]], "polars.exceptions.PerformanceWarning": [[117, null]], "polars.exceptions.PolarsError": [[118, null]], "polars.exceptions.PolarsInefficientMapWarning": [[119, null]], "polars.exceptions.PolarsWarning": [[120, null]], "polars.exceptions.RowsError": [[121, null]], "polars.exceptions.SQLInterfaceError": [[122, null]], "polars.exceptions.SQLSyntaxError": [[123, null]], "polars.exceptions.SchemaError": [[124, null]], "polars.exceptions.SchemaFieldNotFoundError": [[125, null]], "polars.exceptions.ShapeError": [[126, null]], "polars.exceptions.StringCacheMismatchError": [[127, null]], "polars.exceptions.StructFieldNotFoundError": [[128, null]], "polars.exceptions.TooManyRowsReturnedError": [[129, null]], "polars.exceptions.UnstableWarning": [[130, null]], "polars.exceptions.UnsuitableSQLError": [[131, null]], "polars.exclude": [[796, null]], "polars.explain_all": [[132, null]], "polars.first": [[797, null]], "polars.fold": [[798, null]], "polars.format": [[799, null]], "polars.from_arrow": [[133, null]], "polars.from_dataframe": [[134, null]], "polars.from_dict": [[135, null]], "polars.from_dicts": [[136, null]], "polars.from_epoch": [[800, null]], "polars.from_numpy": [[137, null]], "polars.from_pandas": [[138, null]], "polars.from_records": [[139, null]], "polars.from_repr": [[140, null]], "polars.get_index_type": [[141, null]], "polars.groups": [[801, null]], "polars.head": [[802, null]], "polars.implode": [[803, null]], "polars.int_range": [[804, null]], "polars.int_ranges": [[805, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[142, null]], "polars.io.parquet.ParquetFieldOverwrites": [[143, null]], "polars.io.partition.BasePartitionContext": [[144, null]], "polars.io.partition.KeyedPartition": [[145, null]], "polars.io.partition.KeyedPartitionContext": [[146, null]], "polars.io.plugins.register_io_source": [[147, null]], "polars.json_normalize": [[148, null]], "polars.last": [[806, null]], "polars.lazyframe.engine_config.GPUEngine": [[944, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[945, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[946, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[947, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[948, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[949, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[950, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[951, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[952, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[953, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[954, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[955, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[956, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[957, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[958, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[959, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[960, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[961, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[962, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[963, null]], "polars.len": [[807, null]], "polars.linear_space": [[808, null]], "polars.linear_spaces": [[809, null]], "polars.lit": [[810, null]], "polars.map_batches": [[811, null]], "polars.map_groups": [[812, null]], "polars.max": [[813, null]], "polars.max_horizontal": [[814, null]], "polars.mean": [[815, null]], "polars.mean_horizontal": [[816, null]], "polars.median": [[817, null]], "polars.min": [[818, null]], "polars.min_horizontal": [[819, null]], "polars.n_unique": [[820, null]], "polars.nth": [[821, null]], "polars.ones": [[822, null]], "polars.plugins.register_plugin_function": [[149, null]], "polars.quantile": [[823, null]], "polars.read_avro": [[150, null]], "polars.read_clipboard": [[151, null]], "polars.read_csv": [[152, null]], "polars.read_csv_batched": [[153, null]], "polars.read_database": [[154, null]], "polars.read_database_uri": [[155, null]], "polars.read_delta": [[156, null]], "polars.read_excel": [[157, null]], "polars.read_ipc": [[158, null]], "polars.read_ipc_schema": [[159, null]], "polars.read_ipc_stream": [[160, null]], "polars.read_json": [[161, null]], "polars.read_ndjson": [[162, null]], "polars.read_ods": [[163, null]], "polars.read_parquet": [[164, null]], "polars.read_parquet_metadata": [[165, null]], "polars.read_parquet_schema": [[166, null]], "polars.reduce": [[824, null]], "polars.repeat": [[825, null]], "polars.rolling_corr": [[826, null]], "polars.rolling_cov": [[827, null]], "polars.scan_csv": [[167, null]], "polars.scan_delta": [[168, null]], "polars.scan_iceberg": [[169, null]], "polars.scan_ipc": [[170, null]], "polars.scan_ndjson": [[171, null]], "polars.scan_parquet": [[172, null]], "polars.scan_pyarrow_dataset": [[173, null]], "polars.select": [[828, null]], "polars.set_random_seed": [[174, null]], "polars.show_versions": [[175, null]], "polars.sql": [[829, null]], "polars.sql_expr": [[830, null]], "polars.std": [[831, null]], "polars.struct": [[832, null]], "polars.sum": [[833, null]], "polars.sum_horizontal": [[834, null]], "polars.tail": [[835, null]], "polars.testing.assert_frame_equal": [[176, null]], "polars.testing.assert_frame_not_equal": [[177, null]], "polars.testing.assert_series_equal": [[178, null]], "polars.testing.assert_series_not_equal": [[179, null]], "polars.testing.parametric.column": [[180, null]], "polars.testing.parametric.columns": [[181, null]], "polars.testing.parametric.create_list_strategy": [[182, null]], "polars.testing.parametric.dataframes": [[183, null]], "polars.testing.parametric.dtypes": [[184, null]], "polars.testing.parametric.lists": [[185, null]], "polars.testing.parametric.load_profile": [[186, null]], "polars.testing.parametric.series": [[187, null]], "polars.testing.parametric.set_profile": [[188, null]], "polars.thread_pool_size": [[189, null]], "polars.threadpool_size": [[190, null]], "polars.time": [[836, null]], "polars.time_range": [[837, null]], "polars.time_ranges": [[838, null]], "polars.using_string_cache": [[191, null]], "polars.var": [[839, null]], "polars.when": [[840, null]], "polars.zeros": [[841, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType.to_dtype_expr", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.ScanCastOptions", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.dtype_of", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.parquet.ParquetFieldOverwrites", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_metadata", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.__setitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.match_to_schema", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatype_expr", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_business_day", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_kurtosis", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.__getitem__", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.match_to_schema", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.QueryOptFlags", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.backward_fill", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.bottom_k_by", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_business_day", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.forward_fill", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.repeat_by", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_kurtosis", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.top_k_by", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.to_dtype_expr.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.ScanCastOptions.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.dtype_of.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.parquet.ParquetFieldOverwrites.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_metadata.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.__setitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.match_to_schema.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatype_expr.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_business_day.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_kurtosis.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.__getitem__.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.match_to_schema.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.QueryOptFlags.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.backward_fill.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.bottom_k_by.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_business_day.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.forward_fill.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.repeat_by.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_kurtosis.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.top_k_by.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[209, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[977, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[210, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[978, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[211, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1399, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1399, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[212, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.lazyframe method)": [[865, "polars.LazyFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[979, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[192, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[198, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[199, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[201, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[202, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[32, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[33, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[34, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[35, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[67, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[68, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[69, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[70, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[71, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[72, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[73, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[74, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[75, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[76, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[77, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[78, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[79, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[80, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[81, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[82, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[83, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[84, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[85, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[86, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[87, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[88, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[89, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[90, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[91, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[92, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[93, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[94, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[95, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.parquet.parquetfieldoverwrites method)": [[143, "polars.io.parquet.ParquetFieldOverwrites.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[144, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[145, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[146, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[944, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[53, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[54, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[55, "polars.PartitionParted.__init__", false]], "__init__() (polars.queryoptflags method)": [[943, "polars.QueryOptFlags.__init__", false]], "__init__() (polars.scancastoptions method)": [[56, "polars.ScanCastOptions.__init__", false]], "__init__() (polars.sqlcontext method)": [[1399, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[57, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[180, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.__iter__", false]], "__setitem__() (polars.dataframe method)": [[213, "polars.DataFrame.__setitem__", false]], "abs() (polars.expr method)": [[365, "polars.Expr.abs", false]], "abs() (polars.series method)": [[980, "polars.Series.abs", false]], "add() (polars.expr method)": [[366, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[454, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1071, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[945, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[367, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[368, "polars.Expr.alias", false]], "alias() (polars.series method)": [[981, "polars.Series.alias", false]], "align_frames() (in module polars)": [[58, "polars.align_frames", false]], "all() (in module polars)": [[765, "polars.all", false]], "all() (in module polars.selectors)": [[975, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[369, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[385, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[551, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[946, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[982, "polars.Series.all", false]], "all() (polars.series.arr method)": [[997, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1176, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[766, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[975, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[975, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[370, "polars.Expr.and_", false]], "any() (in module polars)": [[767, "polars.any", false]], "any() (polars.expr method)": [[371, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[386, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[552, "polars.Expr.list.any", false]], "any() (polars.series method)": [[983, "polars.Series.any", false]], "any() (polars.series.arr method)": [[998, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1177, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[768, "polars.any_horizontal", false]], "append() (polars.expr method)": [[372, "polars.Expr.append", false]], "append() (polars.series method)": [[984, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[769, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[214, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[373, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[866, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[985, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[770, "polars.arange", false]], "arccos() (polars.expr method)": [[374, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[986, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[375, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[987, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[376, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[988, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[377, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[989, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[378, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[990, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[771, "polars.arctan2", false]], "arctan2d() (in module polars)": [[772, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[379, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[991, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[380, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[387, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[553, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[992, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[999, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1178, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[381, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[388, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[554, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[993, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[1000, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1179, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[382, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[994, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[773, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[383, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[995, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[384, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[996, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[774, "polars.arg_where", false]], "array (class in polars.datatypes)": [[67, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[176, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[177, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[178, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[179, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[409, "polars.Expr.backward_fill", false]], "backward_fill() (polars.series method)": [[1021, "polars.Series.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[455, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1072, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[144, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[68, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[975, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[417, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1029, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[418, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1030, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[419, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1031, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[420, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1032, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[421, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1033, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[422, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1034, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[423, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1035, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[424, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1036, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[425, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1037, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[69, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[975, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[215, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[426, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[867, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1038, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[427, "polars.Expr.bottom_k_by", false]], "bottom_k_by() (polars.series method)": [[1039, "polars.Series.bottom_k_by", false]], "build_info() (in module polars)": [[63, "polars.build_info", false]], "business_day_count() (in module polars)": [[775, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[975, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[975, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[975, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[868, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[961, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[216, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[428, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[869, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1040, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[456, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1073, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[192, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[198, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[70, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[975, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[102, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[434, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1049, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[435, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1050, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[457, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1074, "polars.Series.dt.century", false]], "chronoformatwarning": [[103, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1051, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[217, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[870, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1052, "polars.Series.clear", false]], "clip() (polars.expr method)": [[436, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1053, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[218, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[871, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1054, "polars.Series.clone", false]], "coalesce() (in module polars)": [[776, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[872, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[64, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[65, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[873, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[219, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[874, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[180, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[199, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[104, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[220, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[875, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[181, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[458, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1075, "polars.Series.dt.combine", false]], "computeerror": [[105, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[66, "polars.concat", false]], "concat() (polars.expr.list method)": [[555, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[695, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1180, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1286, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[777, "polars.concat_arr", false]], "concat_list() (in module polars)": [[778, "polars.concat_list", false]], "concat_str() (in module polars)": [[779, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[975, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[389, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[410, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[556, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[696, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[1001, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1022, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1181, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1287, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[697, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1288, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[459, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1076, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[780, "polars.corr", false]], "corr() (polars.dataframe method)": [[221, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[437, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1055, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[438, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1056, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[439, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1057, "polars.Series.cot", false]], "count() (in module polars)": [[781, "polars.count", false]], "count() (polars.dataframe method)": [[222, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[440, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[876, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[947, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1058, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[390, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[557, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[698, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[1002, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1182, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1289, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[782, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[32, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[33, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[34, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[35, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[783, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[441, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1059, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[784, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[442, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1060, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[443, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1061, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[444, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1062, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[785, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[786, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[445, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1063, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[787, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[446, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1064, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[106, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[447, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1065, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[107, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[200, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[71, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[72, "polars.datatypes.Date", false]], "date() (in module polars)": [[788, "polars.date", false]], "date() (in module polars.selectors)": [[975, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[460, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1077, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[789, "polars.date_range", false]], "date_ranges() (in module polars)": [[790, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[73, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[791, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[975, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[461, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1078, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[792, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[793, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[462, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1079, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[74, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[975, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[411, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[699, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1023, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1290, "polars.Series.str.decode", false]], "defer() (in module polars)": [[97, "polars.defer", false]], "degrees() (polars.expr method)": [[448, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[223, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[877, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1066, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[224, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[449, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[878, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[450, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[558, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1067, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1183, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[975, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[98, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[451, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1068, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[225, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[879, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[226, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[227, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[452, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[880, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1069, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[228, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[453, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[559, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[881, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1070, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1184, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[463, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1080, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1121, "polars.Series.dtype", false]], "dtype_of() (in module polars)": [[99, "polars.dtype_of", false]], "dtypes (polars.dataframe property)": [[229, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[882, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[184, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[108, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[75, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[794, "polars.duration", false]], "duration() (in module polars.selectors)": [[975, "polars.selectors.duration", false]], "element() (in module polars)": [[795, "polars.element", false]], "enable_string_cache() (in module polars)": [[100, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[412, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[700, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1024, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1291, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[975, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[413, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[429, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[701, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1025, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1041, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1292, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[500, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1122, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[76, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[464, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1081, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[501, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[601, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1123, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[502, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1124, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[230, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1125, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[101, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[702, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1293, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[231, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1126, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[560, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1185, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[503, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1127, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[504, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1128, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[505, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1129, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[506, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1130, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[796, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[975, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[507, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1380, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1381, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[508, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1131, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[975, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[883, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[132, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[232, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[509, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[391, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[561, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[703, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[884, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1132, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[1003, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1186, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1294, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[233, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1133, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[510, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1134, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[704, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1295, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[705, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1296, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[706, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1297, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[707, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1298, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[962, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[963, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[77, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[744, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1335, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1336, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[234, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[511, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[885, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1135, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[235, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[512, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[886, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1136, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[236, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[513, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[887, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1137, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[708, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1299, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[709, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1300, "polars.Series.str.find_many", false]], "first() (in module polars)": [[797, "polars.first", false]], "first() (in module polars.selectors)": [[975, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[514, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[392, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[562, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[888, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[948, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1138, "polars.Series.first", false]], "first() (polars.series.arr method)": [[1004, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1187, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[237, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1139, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[515, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[975, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[78, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[79, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[516, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1140, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[517, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[798, "polars.fold", false]], "fold() (polars.dataframe method)": [[238, "polars.DataFrame.fold", false]], "format() (in module polars)": [[799, "polars.format", false]], "forward_fill() (polars.expr method)": [[518, "polars.Expr.forward_fill", false]], "forward_fill() (polars.series method)": [[1141, "polars.Series.forward_fill", false]], "from_arrow() (in module polars)": [[133, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[134, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[135, "polars.from_dict", false]], "from_dicts() (in module polars)": [[136, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[800, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[519, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[137, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[138, "polars.from_pandas", false]], "from_records() (in module polars)": [[139, "polars.from_records", false]], "from_repr() (in module polars)": [[140, "polars.from_repr", false]], "gather() (polars.expr method)": [[520, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[563, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1142, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1188, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[239, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[521, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[564, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[889, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1143, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1189, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[522, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1144, "polars.Series.ge", false]], "get() (polars.expr method)": [[523, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[393, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[565, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[1005, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1190, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[430, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1042, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1145, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[240, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[241, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[242, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[141, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[203, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[193, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[243, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[944, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[244, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[890, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[245, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[891, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[801, "polars.groups", false]], "gt() (polars.expr method)": [[524, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1146, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[602, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[525, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1147, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1148, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[526, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1149, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[246, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[802, "polars.head", false]], "head() (polars.dataframe method)": [[247, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[527, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[566, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[710, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[892, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[949, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1150, "polars.Series.head", false]], "head() (polars.series.list method)": [[1191, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1301, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[248, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[528, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1151, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[465, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1082, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[249, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[803, "polars.implode", false]], "implode() (polars.expr method)": [[529, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1152, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[530, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1153, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[250, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[531, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[893, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[80, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[81, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[82, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[83, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[84, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[804, "polars.int_range", false]], "int_ranges() (in module polars)": [[805, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[975, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[251, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[532, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[894, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1154, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[533, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1155, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[109, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[534, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1156, "polars.Series.is_between", false]], "is_business_day() (polars.expr.dt method)": [[466, "polars.Expr.dt.is_business_day", false]], "is_business_day() (polars.series.dt method)": [[1083, "polars.Series.dt.is_business_day", false]], "is_column() (polars.expr.meta method)": [[603, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[604, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[252, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[535, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1157, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[253, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1158, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[536, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1159, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[537, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1160, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[538, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1161, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[539, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1162, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[540, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1163, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[467, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1084, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[605, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1043, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[541, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1164, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[542, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1165, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[543, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1166, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[544, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1167, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[606, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[975, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1168, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[254, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[545, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1169, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[468, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1085, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[255, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1170, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[256, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[257, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[258, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[259, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[394, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[567, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[711, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[895, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[1006, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1192, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1302, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[260, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[896, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[261, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[897, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[712, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1303, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[745, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1337, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[148, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[713, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1304, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[621, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[145, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[146, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[546, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1171, "polars.Series.kurtosis", false]], "last() (in module polars)": [[806, "polars.last", false]], "last() (in module polars.selectors)": [[975, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[547, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[395, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[568, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[898, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[950, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1172, "polars.Series.last", false]], "last() (polars.series.arr method)": [[1007, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1193, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[262, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[899, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[548, "polars.Expr.le", false]], "le() (polars.series method)": [[1173, "polars.Series.le", false]], "len() (in module polars)": [[807, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[549, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[569, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[951, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1174, "polars.Series.len", false]], "len() (polars.series.list method)": [[1194, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[431, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[714, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1044, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1305, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[432, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[715, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1045, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1306, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[263, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[550, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[900, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1175, "polars.Series.limit", false]], "linear_space() (in module polars)": [[808, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[809, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[85, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[194, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[195, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[196, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[185, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[810, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[186, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[591, "polars.Expr.log", false]], "log() (polars.series method)": [[1216, "polars.Series.log", false]], "log10() (polars.expr method)": [[592, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1217, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[593, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1218, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[594, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1219, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[595, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1220, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[622, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[811, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[596, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[901, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[597, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1221, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[623, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[812, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[952, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[264, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[110, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "match_to_schema() (polars.dataframe method)": [[265, "polars.DataFrame.match_to_schema", false]], "match_to_schema() (polars.lazyframe method)": [[902, "polars.LazyFrame.match_to_schema", false]], "matches() (in module polars.selectors)": [[975, "polars.selectors.matches", false]], "max() (in module polars)": [[813, "polars.max", false]], "max() (polars.dataframe method)": [[266, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[598, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[396, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[570, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[903, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[953, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1222, "polars.Series.max", false]], "max() (polars.series.arr method)": [[1008, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1086, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1195, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[814, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[267, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[815, "polars.mean", false]], "mean() (polars.dataframe method)": [[268, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[344, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[599, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[571, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[904, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[954, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1223, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1087, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1196, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[816, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[269, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[817, "polars.median", false]], "median() (polars.dataframe method)": [[270, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[345, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[600, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[397, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[572, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[905, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[955, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1224, "polars.Series.median", false]], "median() (polars.series.arr method)": [[1009, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1088, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1197, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[271, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[906, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[272, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[907, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[469, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1089, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[470, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1090, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[471, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1091, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[818, "polars.min", false]], "min() (polars.dataframe method)": [[273, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[346, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[616, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[398, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[573, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[908, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[956, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1225, "polars.Series.min", false]], "min() (polars.series.arr method)": [[1010, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1092, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1198, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[819, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[274, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[472, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1093, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[617, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[618, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1226, "polars.Series.mode", false]], "module": [[975, "module-polars.selectors", false]], "moduleupgraderequirederror": [[111, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[473, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1094, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[474, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1095, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[475, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1096, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[619, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[275, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1227, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[820, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[276, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[347, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[620, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[399, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[574, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[957, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1228, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[1011, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1199, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1229, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[201, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[630, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1230, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[631, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1231, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[476, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1097, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[632, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[607, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1232, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[633, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1233, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[634, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1234, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[142, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[112, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[716, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1307, "polars.Series.str.normalize", false]], "norowsreturnederror": [[113, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[635, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1235, "polars.Series.not_", false]], "nth() (in module polars)": [[821, "polars.nth", false]], "null (class in polars.datatypes)": [[86, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[277, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[636, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[909, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1236, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[975, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[87, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[477, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1098, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[822, "polars.ones", false]], "or_() (polars.expr method)": [[637, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[478, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1099, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[114, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[608, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[638, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[717, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1308, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[718, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1309, "polars.Series.str.pad_start", false]], "panicexception": [[115, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[116, "polars.exceptions.ParameterCollisionError", false]], "parquetfieldoverwrites (class in polars.io.parquet)": [[143, "polars.io.parquet.ParquetFieldOverwrites", false]], "partition_by() (polars.dataframe method)": [[278, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[53, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[54, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[55, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[639, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1237, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[640, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1238, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[641, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1239, "polars.Series.peak_min", false]], "performancewarning": [[117, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[279, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[642, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[910, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[280, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[359, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1376, "polars.Series.plot", false]], "polars.selectors": [[975, "module-polars.selectors", false]], "polarserror": [[118, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[119, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[120, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[609, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[643, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1240, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[624, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[625, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[281, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[644, "polars.Expr.product", false]], "product() (polars.series method)": [[1241, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[911, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[645, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1242, "polars.Series.qcut", false]], "quantile() (in module polars)": [[823, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[282, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[348, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[646, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[912, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[958, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1243, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[479, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1100, "polars.Series.dt.quarter", false]], "queryoptflags (class in polars)": [[943, "polars.QueryOptFlags", false]], "radians() (polars.expr method)": [[647, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[648, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1244, "polars.Series.rank", false]], "read_avro() (in module polars)": [[150, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[151, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[152, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[153, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[154, "polars.read_database", false]], "read_database_uri() (in module polars)": [[155, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[156, "polars.read_delta", false]], "read_excel() (in module polars)": [[157, "polars.read_excel", false]], "read_ipc() (in module polars)": [[158, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[159, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[160, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[161, "polars.read_json", false]], "read_ndjson() (in module polars)": [[162, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[163, "polars.read_ods", false]], "read_parquet() (in module polars)": [[164, "polars.read_parquet", false]], "read_parquet_metadata() (in module polars)": [[165, "polars.read_parquet_metadata", false]], "read_parquet_schema() (in module polars)": [[166, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[283, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[649, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1245, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[824, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1382, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[59, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[60, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1383, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[147, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[61, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1384, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[149, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[62, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[650, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[414, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1246, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1026, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[913, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[284, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[914, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[285, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[915, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1247, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[746, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1338, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[825, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[651, "polars.Expr.repeat_by", false]], "repeat_by() (polars.series method)": [[1248, "polars.Series.repeat_by", false]], "replace() (polars.expr method)": [[652, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[480, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[719, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1249, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1101, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1310, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[720, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1311, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[286, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[721, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1312, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[653, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1250, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[481, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1102, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[654, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1251, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[287, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[655, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[400, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[575, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[722, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[916, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1252, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[1012, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1200, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1313, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[656, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1253, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[657, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1254, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[288, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[658, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[917, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[826, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[827, "polars.rolling_cov", false]], "rolling_kurtosis() (polars.expr method)": [[659, "polars.Expr.rolling_kurtosis", false]], "rolling_kurtosis() (polars.series method)": [[1255, "polars.Series.rolling_kurtosis", false]], "rolling_map() (polars.expr method)": [[660, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1256, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[661, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1257, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[662, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[663, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1258, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[664, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[665, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1259, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[666, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[667, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1260, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[668, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[669, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1261, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[670, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[671, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1262, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[672, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1263, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[673, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[674, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1264, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[675, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[676, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1265, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[677, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[610, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[678, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[482, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1266, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1103, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[679, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1267, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[289, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[290, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[291, "polars.DataFrame.rows_by_key", false]], "rowserror": [[121, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[292, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[680, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[576, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1268, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1201, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[167, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[168, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[169, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[170, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[171, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[172, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[173, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[197, "polars.Catalog.scan_table", false]], "scancastoptions (class in polars)": [[56, "polars.ScanCastOptions", false]], "scatter() (polars.series method)": [[1269, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[293, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[918, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1339, "polars.Series.struct.schema", false]], "schemaerror": [[124, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[125, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[681, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1270, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[483, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1104, "polars.Series.dt.second", false]], "select() (in module polars)": [[828, "polars.select", false]], "select() (polars.dataframe method)": [[294, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[919, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[295, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[920, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[296, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[611, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[921, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[187, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1271, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[577, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1202, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[10, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[578, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1203, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[188, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[174, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[297, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[682, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[922, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1272, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[579, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1204, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[580, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1205, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[298, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1273, "polars.Series.shape", false]], "shapeerror": [[126, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[299, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[683, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[401, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[581, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[923, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1274, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[1013, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1206, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[612, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[924, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[175, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[684, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1275, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[300, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1276, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[685, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1277, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[686, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1278, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[975, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[687, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1279, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[688, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1280, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[415, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1027, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[689, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1281, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[301, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[690, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[582, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[723, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[925, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1282, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1207, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1314, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[302, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[691, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[402, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[583, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[926, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1283, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[1014, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1208, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[692, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[724, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1315, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[725, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1316, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[726, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1317, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[829, "polars.sql", false]], "sql() (polars.dataframe method)": [[303, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[927, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[830, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1399, "polars.SQLContext", false]], "sqlinterfaceerror": [[122, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[123, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[693, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1284, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[975, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[416, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[433, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[727, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1028, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1046, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1318, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[31, "polars.Config.state", false]], "std() (in module polars)": [[831, "polars.std", false]], "std() (polars.dataframe method)": [[304, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[694, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[403, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[584, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[928, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1285, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1015, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1209, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[484, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1105, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[88, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[975, "polars.selectors.string", false]], "stringcache (class in polars)": [[57, "polars.StringCache", false]], "stringcachemismatcherror": [[127, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[728, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1319, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[729, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1320, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[730, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1321, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[731, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1322, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[732, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1323, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[733, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1324, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[89, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[832, "polars.struct", false]], "structfieldnotfounderror": [[128, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[360, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[749, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[626, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[627, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[833, "polars.sum", false]], "sum() (polars.dataframe method)": [[305, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[349, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[750, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[404, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[585, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[929, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[959, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1341, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1016, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1210, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[834, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[306, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[202, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1385, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[204, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[835, "polars.tail", false]], "tail() (polars.dataframe method)": [[307, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[350, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[751, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[586, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[734, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[930, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[960, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1342, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1211, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1325, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[752, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1343, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[753, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1344, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[975, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[189, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[190, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[90, "polars.datatypes.Time", false]], "time() (in module polars)": [[836, "polars.time", false]], "time() (in module polars.selectors)": [[975, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[485, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1106, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[837, "polars.time_range", false]], "time_ranges() (in module polars)": [[838, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[486, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1107, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[587, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1212, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[308, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1345, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[735, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1326, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[736, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1327, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[737, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1328, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[309, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[310, "polars.DataFrame.to_dicts", false]], "to_dtype_expr() (polars.datatype method)": [[48, "polars.DataType.to_dtype_expr", false]], "to_dummies() (polars.dataframe method)": [[311, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1346, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1347, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[312, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1348, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[738, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1329, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[313, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1349, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[405, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1350, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1017, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1047, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[628, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[739, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1330, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[314, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1351, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[315, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1352, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[754, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1353, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[316, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[487, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1108, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[317, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[406, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[588, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1018, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1213, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[740, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1331, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[741, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1332, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[318, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1354, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[629, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[742, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1333, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[129, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[319, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[755, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[931, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1355, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[756, "polars.Expr.top_k_by", false]], "top_k_by() (polars.series method)": [[1356, "polars.Series.top_k_by", false]], "total_days() (polars.expr.dt method)": [[488, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1109, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[489, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1110, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[490, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1111, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[491, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1112, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[492, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1113, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[493, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1114, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[494, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1115, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[320, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[613, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[757, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[495, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1116, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[91, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[92, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[93, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[94, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[614, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[321, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[758, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[407, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[589, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[932, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1357, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1019, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1214, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[759, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1358, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[95, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[322, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[747, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[933, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1340, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[323, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[934, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1386, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[975, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[130, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[324, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[131, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[325, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[935, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[760, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1359, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[326, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1048, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[191, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[96, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[761, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1360, "polars.Series.value_counts", false]], "var() (in module polars)": [[839, "polars.var", false]], "var() (polars.dataframe method)": [[327, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[762, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[408, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[590, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[936, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1361, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1020, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1215, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[328, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[496, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1117, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[497, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1118, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[840, "polars.when", false]], "where() (polars.expr method)": [[763, "polars.Expr.where", false]], "width (polars.dataframe property)": [[329, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[937, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[330, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[938, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[331, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[939, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[940, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[748, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[332, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[941, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[333, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[942, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[498, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1119, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[37, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[38, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[39, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[40, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[41, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[42, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[45, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[615, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[46, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[47, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[764, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[499, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1120, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[841, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[743, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1334, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1362, "polars.Series.zip_with", false]]}, "objects": {"polars": [[192, 0, 1, "", "Catalog"], [32, 0, 1, "", "CredentialProvider"], [33, 0, 1, "", "CredentialProviderAWS"], [34, 0, 1, "", "CredentialProviderAzure"], [35, 0, 1, "", "CredentialProviderGCP"], [53, 0, 1, "", "PartitionByKey"], [54, 0, 1, "", "PartitionMaxSize"], [55, 0, 1, "", "PartitionParted"], [943, 0, 1, "", "QueryOptFlags"], [1399, 0, 1, "", "SQLContext"], [56, 0, 1, "", "ScanCastOptions"], [57, 0, 1, "", "StringCache"], [58, 4, 1, "", "align_frames"], [765, 4, 1, "", "all"], [766, 4, 1, "", "all_horizontal"], [767, 4, 1, "", "any"], [768, 4, 1, "", "any_horizontal"], [769, 4, 1, "", "approx_n_unique"], [770, 4, 1, "", "arange"], [771, 4, 1, "", "arctan2"], [772, 4, 1, "", "arctan2d"], [773, 4, 1, "", "arg_sort_by"], [774, 4, 1, "", "arg_where"], [63, 4, 1, "", "build_info"], [775, 4, 1, "", "business_day_count"], [776, 4, 1, "", "coalesce"], [64, 4, 1, "", "collect_all"], [65, 4, 1, "", "collect_all_async"], [66, 4, 1, "", "concat"], [777, 4, 1, "", "concat_arr"], [778, 4, 1, "", "concat_list"], [779, 4, 1, "", "concat_str"], [780, 4, 1, "", "corr"], [781, 4, 1, "", "count"], [782, 4, 1, "", "cov"], [783, 4, 1, "", "cum_count"], [784, 4, 1, "", "cum_fold"], [785, 4, 1, "", "cum_reduce"], [786, 4, 1, "", "cum_sum"], [787, 4, 1, "", "cum_sum_horizontal"], [788, 4, 1, "", "date"], [789, 4, 1, "", "date_range"], [790, 4, 1, "", "date_ranges"], [791, 4, 1, "", "datetime"], [792, 4, 1, "", "datetime_range"], [793, 4, 1, "", "datetime_ranges"], [97, 4, 1, "", "defer"], [98, 4, 1, "", "disable_string_cache"], [99, 4, 1, "", "dtype_of"], [794, 4, 1, "", "duration"], [795, 4, 1, "", "element"], [100, 4, 1, "", "enable_string_cache"], [101, 4, 1, "", "escape_regex"], [796, 4, 1, "", "exclude"], [132, 4, 1, "", "explain_all"], [797, 4, 1, "", "first"], [798, 4, 1, "", "fold"], [799, 4, 1, "", "format"], [133, 4, 1, "", "from_arrow"], [134, 4, 1, "", "from_dataframe"], [135, 4, 1, "", "from_dict"], [136, 4, 1, "", "from_dicts"], [800, 4, 1, "", "from_epoch"], [137, 4, 1, "", "from_numpy"], [138, 4, 1, "", "from_pandas"], [139, 4, 1, "", "from_records"], [140, 4, 1, "", "from_repr"], [141, 4, 1, "", "get_index_type"], [801, 4, 1, "", "groups"], [802, 4, 1, "", "head"], [803, 4, 1, "", "implode"], [804, 4, 1, "", "int_range"], [805, 4, 1, "", "int_ranges"], [148, 4, 1, "", "json_normalize"], [806, 4, 1, "", "last"], [807, 4, 1, "", "len"], [808, 4, 1, "", "linear_space"], [809, 4, 1, "", "linear_spaces"], [810, 4, 1, "", "lit"], [811, 4, 1, "", "map_batches"], [812, 4, 1, "", "map_groups"], [813, 4, 1, "", "max"], [814, 4, 1, "", "max_horizontal"], [815, 4, 1, "", "mean"], [816, 4, 1, "", "mean_horizontal"], [817, 4, 1, "", "median"], [818, 4, 1, "", "min"], [819, 4, 1, "", "min_horizontal"], [820, 4, 1, "", "n_unique"], [821, 4, 1, "", "nth"], [822, 4, 1, "", "ones"], [823, 4, 1, "", "quantile"], [150, 4, 1, "", "read_avro"], [151, 4, 1, "", "read_clipboard"], [152, 4, 1, "", "read_csv"], [153, 4, 1, "", "read_csv_batched"], [154, 4, 1, "", "read_database"], [155, 4, 1, "", "read_database_uri"], [156, 4, 1, "", "read_delta"], [157, 4, 1, "", "read_excel"], [158, 4, 1, "", "read_ipc"], [159, 4, 1, "", "read_ipc_schema"], [160, 4, 1, "", "read_ipc_stream"], [161, 4, 1, "", "read_json"], [162, 4, 1, "", "read_ndjson"], [163, 4, 1, "", "read_ods"], [164, 4, 1, "", "read_parquet"], [165, 4, 1, "", "read_parquet_metadata"], [166, 4, 1, "", "read_parquet_schema"], [824, 4, 1, "", "reduce"], [825, 4, 1, "", "repeat"], [826, 4, 1, "", "rolling_corr"], [827, 4, 1, "", "rolling_cov"], [167, 4, 1, "", "scan_csv"], [168, 4, 1, "", "scan_delta"], [169, 4, 1, "", "scan_iceberg"], [170, 4, 1, "", "scan_ipc"], [171, 4, 1, "", "scan_ndjson"], [172, 4, 1, "", "scan_parquet"], [173, 4, 1, "", "scan_pyarrow_dataset"], [828, 4, 1, "", "select"], [975, 7, 0, "-", "selectors"], [174, 4, 1, "", "set_random_seed"], [175, 4, 1, "", "show_versions"], [829, 4, 1, "", "sql"], [830, 4, 1, "", "sql_expr"], [831, 4, 1, "", "std"], [832, 4, 1, "", "struct"], [833, 4, 1, "", "sum"], [834, 4, 1, "", "sum_horizontal"], [835, 4, 1, "", "tail"], [189, 4, 1, "", "thread_pool_size"], [190, 4, 1, "", "threadpool_size"], [836, 4, 1, "", "time"], [837, 4, 1, "", "time_range"], [838, 4, 1, "", "time_ranges"], [191, 4, 1, "", "using_string_cache"], [839, 4, 1, "", "var"], [840, 4, 1, "", "when"], [841, 4, 1, "", "zeros"]], "polars.Catalog": [[192, 1, 1, "", "__init__"], [193, 1, 1, "", "get_table_info"], [194, 1, 1, "", "list_catalogs"], [195, 1, 1, "", "list_namespaces"], [196, 1, 1, "", "list_tables"], [197, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_engine_affinity"], [11, 1, 1, "", "set_float_precision"], [12, 1, 1, "", "set_fmt_float"], [13, 1, 1, "", "set_fmt_str_lengths"], [14, 1, 1, "", "set_fmt_table_cell_list_len"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cell_numeric_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_thousands_separator"], [29, 1, 1, "", "set_trim_decimal_zeros"], [30, 1, 1, "", "set_verbose"], [31, 1, 1, "", "state"]], "polars.CredentialProvider": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[35, 1, 1, "", "__init__"]], "polars.DataFrame": [[209, 1, 1, "", "__array__"], [210, 1, 1, "", "__arrow_c_stream__"], [211, 1, 1, "", "__dataframe__"], [212, 1, 1, "", "__getitem__"], [213, 1, 1, "", "__setitem__"], [214, 1, 1, "", "approx_n_unique"], [215, 1, 1, "", "bottom_k"], [216, 1, 1, "", "cast"], [217, 1, 1, "", "clear"], [218, 1, 1, "", "clone"], [219, 1, 1, "", "collect_schema"], [220, 2, 1, "", "columns"], [221, 1, 1, "", "corr"], [222, 1, 1, "", "count"], [223, 1, 1, "", "describe"], [224, 1, 1, "", "deserialize"], [225, 1, 1, "", "drop"], [226, 1, 1, "", "drop_in_place"], [227, 1, 1, "", "drop_nans"], [228, 1, 1, "", "drop_nulls"], [229, 2, 1, "", "dtypes"], [230, 1, 1, "", "equals"], [231, 1, 1, "", "estimated_size"], [232, 1, 1, "", "explode"], [233, 1, 1, "", "extend"], [234, 1, 1, "", "fill_nan"], [235, 1, 1, "", "fill_null"], [236, 1, 1, "", "filter"], [237, 2, 1, "", "flags"], [238, 1, 1, "", "fold"], [239, 1, 1, "", "gather_every"], [240, 1, 1, "", "get_column"], [241, 1, 1, "", "get_column_index"], [242, 1, 1, "", "get_columns"], [243, 1, 1, "", "glimpse"], [244, 1, 1, "", "group_by"], [245, 1, 1, "", "group_by_dynamic"], [246, 1, 1, "", "hash_rows"], [247, 1, 1, "", "head"], [248, 2, 1, "", "height"], [249, 1, 1, "", "hstack"], [250, 1, 1, "", "insert_column"], [251, 1, 1, "", "interpolate"], [252, 1, 1, "", "is_duplicated"], [253, 1, 1, "", "is_empty"], [254, 1, 1, "", "is_unique"], [255, 1, 1, "", "item"], [256, 1, 1, "", "iter_columns"], [257, 1, 1, "", "iter_rows"], [258, 1, 1, "", "iter_slices"], [259, 1, 1, "", "join"], [260, 1, 1, "", "join_asof"], [261, 1, 1, "", "join_where"], [262, 1, 1, "", "lazy"], [263, 1, 1, "", "limit"], [264, 1, 1, "", "map_rows"], [265, 1, 1, "", "match_to_schema"], [266, 1, 1, "", "max"], [267, 1, 1, "", "max_horizontal"], [268, 1, 1, "", "mean"], [269, 1, 1, "", "mean_horizontal"], [270, 1, 1, "", "median"], [271, 1, 1, "", "melt"], [272, 1, 1, "", "merge_sorted"], [273, 1, 1, "", "min"], [274, 1, 1, "", "min_horizontal"], [275, 1, 1, "", "n_chunks"], [276, 1, 1, "", "n_unique"], [277, 1, 1, "", "null_count"], [278, 1, 1, "", "partition_by"], [279, 1, 1, "", "pipe"], [280, 1, 1, "", "pivot"], [359, 2, 1, "", "plot"], [281, 1, 1, "", "product"], [282, 1, 1, "", "quantile"], [283, 1, 1, "", "rechunk"], [284, 1, 1, "", "remove"], [285, 1, 1, "", "rename"], [286, 1, 1, "", "replace_column"], [287, 1, 1, "", "reverse"], [288, 1, 1, "", "rolling"], [289, 1, 1, "", "row"], [290, 1, 1, "", "rows"], [291, 1, 1, "", "rows_by_key"], [292, 1, 1, "", "sample"], [293, 2, 1, "", "schema"], [294, 1, 1, "", "select"], [295, 1, 1, "", "select_seq"], [296, 1, 1, "", "serialize"], [297, 1, 1, "", "set_sorted"], [298, 2, 1, "", "shape"], [299, 1, 1, "", "shift"], [300, 1, 1, "", "shrink_to_fit"], [301, 1, 1, "", "slice"], [302, 1, 1, "", "sort"], [303, 1, 1, "", "sql"], [304, 1, 1, "", "std"], [360, 2, 1, "", "style"], [305, 1, 1, "", "sum"], [306, 1, 1, "", "sum_horizontal"], [307, 1, 1, "", "tail"], [308, 1, 1, "", "to_arrow"], [309, 1, 1, "", "to_dict"], [310, 1, 1, "", "to_dicts"], [311, 1, 1, "", "to_dummies"], [312, 1, 1, "", "to_init_repr"], [313, 1, 1, "", "to_jax"], [314, 1, 1, "", "to_numpy"], [315, 1, 1, "", "to_pandas"], [316, 1, 1, "", "to_series"], [317, 1, 1, "", "to_struct"], [318, 1, 1, "", "to_torch"], [319, 1, 1, "", "top_k"], [320, 1, 1, "", "transpose"], [321, 1, 1, "", "unique"], [322, 1, 1, "", "unnest"], [323, 1, 1, "", "unpivot"], [324, 1, 1, "", "unstack"], [325, 1, 1, "", "update"], [326, 1, 1, "", "upsample"], [327, 1, 1, "", "var"], [328, 1, 1, "", "vstack"], [329, 2, 1, "", "width"], [330, 1, 1, "", "with_columns"], [331, 1, 1, "", "with_columns_seq"], [332, 1, 1, "", "with_row_count"], [333, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_clipboard"], [38, 1, 1, "", "write_csv"], [39, 1, 1, "", "write_database"], [40, 1, 1, "", "write_delta"], [41, 1, 1, "", "write_excel"], [42, 1, 1, "", "write_iceberg"], [43, 1, 1, "", "write_ipc"], [44, 1, 1, "", "write_ipc_stream"], [45, 1, 1, "", "write_json"], [46, 1, 1, "", "write_ndjson"], [47, 1, 1, "", "write_parquet"]], "polars.DataType": [[48, 1, 1, "", "to_dtype_expr"]], "polars.Expr": [[365, 1, 1, "", "abs"], [366, 1, 1, "", "add"], [367, 1, 1, "", "agg_groups"], [368, 1, 1, "", "alias"], [369, 1, 1, "", "all"], [370, 1, 1, "", "and_"], [371, 1, 1, "", "any"], [372, 1, 1, "", "append"], [373, 1, 1, "", "approx_n_unique"], [374, 1, 1, "", "arccos"], [375, 1, 1, "", "arccosh"], [376, 1, 1, "", "arcsin"], [377, 1, 1, "", "arcsinh"], [378, 1, 1, "", "arctan"], [379, 1, 1, "", "arctanh"], [380, 1, 1, "", "arg_max"], [381, 1, 1, "", "arg_min"], [382, 1, 1, "", "arg_sort"], [383, 1, 1, "", "arg_true"], [384, 1, 1, "", "arg_unique"], [409, 1, 1, "", "backward_fill"], [417, 1, 1, "", "bitwise_and"], [418, 1, 1, "", "bitwise_count_ones"], [419, 1, 1, "", "bitwise_count_zeros"], [420, 1, 1, "", "bitwise_leading_ones"], [421, 1, 1, "", "bitwise_leading_zeros"], [422, 1, 1, "", "bitwise_or"], [423, 1, 1, "", "bitwise_trailing_ones"], [424, 1, 1, "", "bitwise_trailing_zeros"], [425, 1, 1, "", "bitwise_xor"], [426, 1, 1, "", "bottom_k"], [427, 1, 1, "", "bottom_k_by"], [428, 1, 1, "", "cast"], [434, 1, 1, "", "cbrt"], [435, 1, 1, "", "ceil"], [436, 1, 1, "", "clip"], [437, 1, 1, "", "cos"], [438, 1, 1, "", "cosh"], [439, 1, 1, "", "cot"], [440, 1, 1, "", "count"], [441, 1, 1, "", "cum_count"], [442, 1, 1, "", "cum_max"], [443, 1, 1, "", "cum_min"], [444, 1, 1, "", "cum_prod"], [445, 1, 1, "", "cum_sum"], [446, 1, 1, "", "cumulative_eval"], [447, 1, 1, "", "cut"], [448, 1, 1, "", "degrees"], [449, 1, 1, "", "deserialize"], [450, 1, 1, "", "diff"], [451, 1, 1, "", "dot"], [452, 1, 1, "", "drop_nans"], [453, 1, 1, "", "drop_nulls"], [500, 1, 1, "", "entropy"], [501, 1, 1, "", "eq"], [502, 1, 1, "", "eq_missing"], [503, 1, 1, "", "ewm_mean"], [504, 1, 1, "", "ewm_mean_by"], [505, 1, 1, "", "ewm_std"], [506, 1, 1, "", "ewm_var"], [507, 1, 1, "", "exclude"], [508, 1, 1, "", "exp"], [509, 1, 1, "", "explode"], [510, 1, 1, "", "extend_constant"], [511, 1, 1, "", "fill_nan"], [512, 1, 1, "", "fill_null"], [513, 1, 1, "", "filter"], [514, 1, 1, "", "first"], [515, 1, 1, "", "flatten"], [516, 1, 1, "", "floor"], [517, 1, 1, "", "floordiv"], [518, 1, 1, "", "forward_fill"], [519, 1, 1, "", "from_json"], [520, 1, 1, "", "gather"], [521, 1, 1, "", "gather_every"], [522, 1, 1, "", "ge"], [523, 1, 1, "", "get"], [524, 1, 1, "", "gt"], [525, 1, 1, "", "has_nulls"], [526, 1, 1, "", "hash"], [527, 1, 1, "", "head"], [528, 1, 1, "", "hist"], [529, 1, 1, "", "implode"], [530, 1, 1, "", "index_of"], [531, 1, 1, "", "inspect"], [532, 1, 1, "", "interpolate"], [533, 1, 1, "", "interpolate_by"], [534, 1, 1, "", "is_between"], [535, 1, 1, "", "is_duplicated"], [536, 1, 1, "", "is_finite"], [537, 1, 1, "", "is_first_distinct"], [538, 1, 1, "", "is_in"], [539, 1, 1, "", "is_infinite"], [540, 1, 1, "", "is_last_distinct"], [541, 1, 1, "", "is_nan"], [542, 1, 1, "", "is_not_nan"], [543, 1, 1, "", "is_not_null"], [544, 1, 1, "", "is_null"], [545, 1, 1, "", "is_unique"], [546, 1, 1, "", "kurtosis"], [547, 1, 1, "", "last"], [548, 1, 1, "", "le"], [549, 1, 1, "", "len"], [550, 1, 1, "", "limit"], [591, 1, 1, "", "log"], [592, 1, 1, "", "log10"], [593, 1, 1, "", "log1p"], [594, 1, 1, "", "lower_bound"], [595, 1, 1, "", "lt"], [596, 1, 1, "", "map_batches"], [597, 1, 1, "", "map_elements"], [598, 1, 1, "", "max"], [599, 1, 1, "", "mean"], [600, 1, 1, "", "median"], [616, 1, 1, "", "min"], [617, 1, 1, "", "mod"], [618, 1, 1, "", "mode"], [619, 1, 1, "", "mul"], [620, 1, 1, "", "n_unique"], [630, 1, 1, "", "nan_max"], [631, 1, 1, "", "nan_min"], [632, 1, 1, "", "ne"], [633, 1, 1, "", "ne_missing"], [634, 1, 1, "", "neg"], [635, 1, 1, "", "not_"], [636, 1, 1, "", "null_count"], [637, 1, 1, "", "or_"], [638, 1, 1, "", "over"], [639, 1, 1, "", "pct_change"], [640, 1, 1, "", "peak_max"], [641, 1, 1, "", "peak_min"], [642, 1, 1, "", "pipe"], [643, 1, 1, "", "pow"], [644, 1, 1, "", "product"], [645, 1, 1, "", "qcut"], [646, 1, 1, "", "quantile"], [647, 1, 1, "", "radians"], [648, 1, 1, "", "rank"], [649, 1, 1, "", "rechunk"], [650, 1, 1, "", "reinterpret"], [651, 1, 1, "", "repeat_by"], [652, 1, 1, "", "replace"], [653, 1, 1, "", "replace_strict"], [654, 1, 1, "", "reshape"], [655, 1, 1, "", "reverse"], [656, 1, 1, "", "rle"], [657, 1, 1, "", "rle_id"], [658, 1, 1, "", "rolling"], [659, 1, 1, "", "rolling_kurtosis"], [660, 1, 1, "", "rolling_map"], [661, 1, 1, "", "rolling_max"], [662, 1, 1, "", "rolling_max_by"], [663, 1, 1, "", "rolling_mean"], [664, 1, 1, "", "rolling_mean_by"], [665, 1, 1, "", "rolling_median"], [666, 1, 1, "", "rolling_median_by"], [667, 1, 1, "", "rolling_min"], [668, 1, 1, "", "rolling_min_by"], [669, 1, 1, "", "rolling_quantile"], [670, 1, 1, "", "rolling_quantile_by"], [671, 1, 1, "", "rolling_skew"], [672, 1, 1, "", "rolling_std"], [673, 1, 1, "", "rolling_std_by"], [674, 1, 1, "", "rolling_sum"], [675, 1, 1, "", "rolling_sum_by"], [676, 1, 1, "", "rolling_var"], [677, 1, 1, "", "rolling_var_by"], [678, 1, 1, "", "round"], [679, 1, 1, "", "round_sig_figs"], [680, 1, 1, "", "sample"], [681, 1, 1, "", "search_sorted"], [682, 1, 1, "", "set_sorted"], [683, 1, 1, "", "shift"], [684, 1, 1, "", "shrink_dtype"], [685, 1, 1, "", "shuffle"], [686, 1, 1, "", "sign"], [687, 1, 1, "", "sin"], [688, 1, 1, "", "sinh"], [689, 1, 1, "", "skew"], [690, 1, 1, "", "slice"], [691, 1, 1, "", "sort"], [692, 1, 1, "", "sort_by"], [693, 1, 1, "", "sqrt"], [694, 1, 1, "", "std"], [749, 1, 1, "", "sub"], [750, 1, 1, "", "sum"], [751, 1, 1, "", "tail"], [752, 1, 1, "", "tan"], [753, 1, 1, "", "tanh"], [754, 1, 1, "", "to_physical"], [755, 1, 1, "", "top_k"], [756, 1, 1, "", "top_k_by"], [757, 1, 1, "", "truediv"], [758, 1, 1, "", "unique"], [759, 1, 1, "", "unique_counts"], [760, 1, 1, "", "upper_bound"], [761, 1, 1, "", "value_counts"], [762, 1, 1, "", "var"], [763, 1, 1, "", "where"], [764, 1, 1, "", "xor"]], "polars.Expr.arr": [[385, 1, 1, "", "all"], [386, 1, 1, "", "any"], [387, 1, 1, "", "arg_max"], [388, 1, 1, "", "arg_min"], [389, 1, 1, "", "contains"], [390, 1, 1, "", "count_matches"], [391, 1, 1, "", "explode"], [392, 1, 1, "", "first"], [393, 1, 1, "", "get"], [394, 1, 1, "", "join"], [395, 1, 1, "", "last"], [396, 1, 1, "", "max"], [397, 1, 1, "", "median"], [398, 1, 1, "", "min"], [399, 1, 1, "", "n_unique"], [400, 1, 1, "", "reverse"], [401, 1, 1, "", "shift"], [402, 1, 1, "", "sort"], [403, 1, 1, "", "std"], [404, 1, 1, "", "sum"], [405, 1, 1, "", "to_list"], [406, 1, 1, "", "to_struct"], [407, 1, 1, "", "unique"], [408, 1, 1, "", "var"]], "polars.Expr.bin": [[410, 1, 1, "", "contains"], [411, 1, 1, "", "decode"], [412, 1, 1, "", "encode"], [413, 1, 1, "", "ends_with"], [414, 1, 1, "", "reinterpret"], [415, 1, 1, "", "size"], [416, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[429, 1, 1, "", "ends_with"], [430, 1, 1, "", "get_categories"], [431, 1, 1, "", "len_bytes"], [432, 1, 1, "", "len_chars"], [433, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[454, 1, 1, "", "add_business_days"], [455, 1, 1, "", "base_utc_offset"], [456, 1, 1, "", "cast_time_unit"], [457, 1, 1, "", "century"], [458, 1, 1, "", "combine"], [459, 1, 1, "", "convert_time_zone"], [460, 1, 1, "", "date"], [461, 1, 1, "", "datetime"], [462, 1, 1, "", "day"], [463, 1, 1, "", "dst_offset"], [464, 1, 1, "", "epoch"], [465, 1, 1, "", "hour"], [466, 1, 1, "", "is_business_day"], [467, 1, 1, "", "is_leap_year"], [468, 1, 1, "", "iso_year"], [469, 1, 1, "", "microsecond"], [470, 1, 1, "", "millennium"], [471, 1, 1, "", "millisecond"], [472, 1, 1, "", "minute"], [473, 1, 1, "", "month"], [474, 1, 1, "", "month_end"], [475, 1, 1, "", "month_start"], [476, 1, 1, "", "nanosecond"], [477, 1, 1, "", "offset_by"], [478, 1, 1, "", "ordinal_day"], [479, 1, 1, "", "quarter"], [480, 1, 1, "", "replace"], [481, 1, 1, "", "replace_time_zone"], [482, 1, 1, "", "round"], [483, 1, 1, "", "second"], [484, 1, 1, "", "strftime"], [485, 1, 1, "", "time"], [486, 1, 1, "", "timestamp"], [487, 1, 1, "", "to_string"], [488, 1, 1, "", "total_days"], [489, 1, 1, "", "total_hours"], [490, 1, 1, "", "total_microseconds"], [491, 1, 1, "", "total_milliseconds"], [492, 1, 1, "", "total_minutes"], [493, 1, 1, "", "total_nanoseconds"], [494, 1, 1, "", "total_seconds"], [495, 1, 1, "", "truncate"], [496, 1, 1, "", "week"], [497, 1, 1, "", "weekday"], [498, 1, 1, "", "with_time_unit"], [499, 1, 1, "", "year"]], "polars.Expr.list": [[551, 1, 1, "", "all"], [552, 1, 1, "", "any"], [553, 1, 1, "", "arg_max"], [554, 1, 1, "", "arg_min"], [555, 1, 1, "", "concat"], [556, 1, 1, "", "contains"], [557, 1, 1, "", "count_matches"], [558, 1, 1, "", "diff"], [559, 1, 1, "", "drop_nulls"], [560, 1, 1, "", "eval"], [561, 1, 1, "", "explode"], [562, 1, 1, "", "first"], [563, 1, 1, "", "gather"], [564, 1, 1, "", "gather_every"], [565, 1, 1, "", "get"], [566, 1, 1, "", "head"], [567, 1, 1, "", "join"], [568, 1, 1, "", "last"], [569, 1, 1, "", "len"], [570, 1, 1, "", "max"], [571, 1, 1, "", "mean"], [572, 1, 1, "", "median"], [573, 1, 1, "", "min"], [574, 1, 1, "", "n_unique"], [575, 1, 1, "", "reverse"], [576, 1, 1, "", "sample"], [577, 1, 1, "", "set_difference"], [578, 1, 1, "", "set_intersection"], [579, 1, 1, "", "set_symmetric_difference"], [580, 1, 1, "", "set_union"], [581, 1, 1, "", "shift"], [582, 1, 1, "", "slice"], [583, 1, 1, "", "sort"], [584, 1, 1, "", "std"], [585, 1, 1, "", "sum"], [586, 1, 1, "", "tail"], [587, 1, 1, "", "to_array"], [588, 1, 1, "", "to_struct"], [589, 1, 1, "", "unique"], [590, 1, 1, "", "var"]], "polars.Expr.meta": [[601, 1, 1, "", "eq"], [602, 1, 1, "", "has_multiple_outputs"], [603, 1, 1, "", "is_column"], [604, 1, 1, "", "is_column_selection"], [605, 1, 1, "", "is_literal"], [606, 1, 1, "", "is_regex_projection"], [607, 1, 1, "", "ne"], [608, 1, 1, "", "output_name"], [609, 1, 1, "", "pop"], [610, 1, 1, "", "root_names"], [611, 1, 1, "", "serialize"], [612, 1, 1, "", "show_graph"], [613, 1, 1, "", "tree_format"], [614, 1, 1, "", "undo_aliases"], [615, 1, 1, "", "write_json"]], "polars.Expr.name": [[621, 1, 1, "", "keep"], [622, 1, 1, "", "map"], [623, 1, 1, "", "map_fields"], [624, 1, 1, "", "prefix"], [625, 1, 1, "", "prefix_fields"], [626, 1, 1, "", "suffix"], [627, 1, 1, "", "suffix_fields"], [628, 1, 1, "", "to_lowercase"], [629, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[695, 1, 1, "", "concat"], [696, 1, 1, "", "contains"], [697, 1, 1, "", "contains_any"], [698, 1, 1, "", "count_matches"], [699, 1, 1, "", "decode"], [700, 1, 1, "", "encode"], [701, 1, 1, "", "ends_with"], [702, 1, 1, "", "escape_regex"], [703, 1, 1, "", "explode"], [704, 1, 1, "", "extract"], [705, 1, 1, "", "extract_all"], [706, 1, 1, "", "extract_groups"], [707, 1, 1, "", "extract_many"], [708, 1, 1, "", "find"], [709, 1, 1, "", "find_many"], [710, 1, 1, "", "head"], [711, 1, 1, "", "join"], [712, 1, 1, "", "json_decode"], [713, 1, 1, "", "json_path_match"], [714, 1, 1, "", "len_bytes"], [715, 1, 1, "", "len_chars"], [716, 1, 1, "", "normalize"], [717, 1, 1, "", "pad_end"], [718, 1, 1, "", "pad_start"], [719, 1, 1, "", "replace"], [720, 1, 1, "", "replace_all"], [721, 1, 1, "", "replace_many"], [722, 1, 1, "", "reverse"], [723, 1, 1, "", "slice"], [724, 1, 1, "", "split"], [725, 1, 1, "", "split_exact"], [726, 1, 1, "", "splitn"], [727, 1, 1, "", "starts_with"], [728, 1, 1, "", "strip_chars"], [729, 1, 1, "", "strip_chars_end"], [730, 1, 1, "", "strip_chars_start"], [731, 1, 1, "", "strip_prefix"], [732, 1, 1, "", "strip_suffix"], [733, 1, 1, "", "strptime"], [734, 1, 1, "", "tail"], [735, 1, 1, "", "to_date"], [736, 1, 1, "", "to_datetime"], [737, 1, 1, "", "to_decimal"], [738, 1, 1, "", "to_integer"], [739, 1, 1, "", "to_lowercase"], [740, 1, 1, "", "to_time"], [741, 1, 1, "", "to_titlecase"], [742, 1, 1, "", "to_uppercase"], [743, 1, 1, "", "zfill"]], "polars.Expr.struct": [[744, 1, 1, "", "field"], [745, 1, 1, "", "json_encode"], [746, 1, 1, "", "rename_fields"], [747, 1, 1, "", "unnest"], [748, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[865, 1, 1, "", "__getitem__"], [866, 1, 1, "", "approx_n_unique"], [867, 1, 1, "", "bottom_k"], [868, 1, 1, "", "cache"], [869, 1, 1, "", "cast"], [870, 1, 1, "", "clear"], [871, 1, 1, "", "clone"], [872, 1, 1, "", "collect"], [873, 1, 1, "", "collect_async"], [874, 1, 1, "", "collect_schema"], [875, 2, 1, "", "columns"], [876, 1, 1, "", "count"], [877, 1, 1, "", "describe"], [878, 1, 1, "", "deserialize"], [879, 1, 1, "", "drop"], [880, 1, 1, "", "drop_nans"], [881, 1, 1, "", "drop_nulls"], [882, 2, 1, "", "dtypes"], [883, 1, 1, "", "explain"], [884, 1, 1, "", "explode"], [885, 1, 1, "", "fill_nan"], [886, 1, 1, "", "fill_null"], [887, 1, 1, "", "filter"], [888, 1, 1, "", "first"], [889, 1, 1, "", "gather_every"], [890, 1, 1, "", "group_by"], [891, 1, 1, "", "group_by_dynamic"], [892, 1, 1, "", "head"], [893, 1, 1, "", "inspect"], [894, 1, 1, "", "interpolate"], [895, 1, 1, "", "join"], [896, 1, 1, "", "join_asof"], [897, 1, 1, "", "join_where"], [898, 1, 1, "", "last"], [899, 1, 1, "", "lazy"], [900, 1, 1, "", "limit"], [901, 1, 1, "", "map_batches"], [902, 1, 1, "", "match_to_schema"], [903, 1, 1, "", "max"], [904, 1, 1, "", "mean"], [905, 1, 1, "", "median"], [906, 1, 1, "", "melt"], [907, 1, 1, "", "merge_sorted"], [908, 1, 1, "", "min"], [909, 1, 1, "", "null_count"], [910, 1, 1, "", "pipe"], [911, 1, 1, "", "profile"], [912, 1, 1, "", "quantile"], [913, 1, 1, "", "remote"], [914, 1, 1, "", "remove"], [915, 1, 1, "", "rename"], [916, 1, 1, "", "reverse"], [917, 1, 1, "", "rolling"], [918, 2, 1, "", "schema"], [919, 1, 1, "", "select"], [920, 1, 1, "", "select_seq"], [921, 1, 1, "", "serialize"], [922, 1, 1, "", "set_sorted"], [923, 1, 1, "", "shift"], [924, 1, 1, "", "show_graph"], [49, 1, 1, "", "sink_csv"], [50, 1, 1, "", "sink_ipc"], [51, 1, 1, "", "sink_ndjson"], [52, 1, 1, "", "sink_parquet"], [925, 1, 1, "", "slice"], [926, 1, 1, "", "sort"], [927, 1, 1, "", "sql"], [928, 1, 1, "", "std"], [929, 1, 1, "", "sum"], [930, 1, 1, "", "tail"], [931, 1, 1, "", "top_k"], [932, 1, 1, "", "unique"], [933, 1, 1, "", "unnest"], [934, 1, 1, "", "unpivot"], [935, 1, 1, "", "update"], [936, 1, 1, "", "var"], [937, 2, 1, "", "width"], [938, 1, 1, "", "with_columns"], [939, 1, 1, "", "with_columns_seq"], [940, 1, 1, "", "with_context"], [941, 1, 1, "", "with_row_count"], [942, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[53, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[54, 1, 1, "", "__init__"]], "polars.PartitionParted": [[55, 1, 1, "", "__init__"]], "polars.QueryOptFlags": [[943, 1, 1, "", "__init__"]], "polars.SQLContext": [[1399, 1, 1, "", "__enter__"], [1399, 1, 1, "", "__exit__"], [1399, 1, 1, "", "__init__"], [1380, 1, 1, "", "execute"], [1381, 1, 1, "", "execute_global"], [1382, 1, 1, "", "register"], [1383, 1, 1, "", "register_globals"], [1384, 1, 1, "", "register_many"], [1385, 1, 1, "", "tables"], [1386, 1, 1, "", "unregister"]], "polars.ScanCastOptions": [[56, 1, 1, "", "__init__"]], "polars.Series": [[977, 1, 1, "", "__array__"], [978, 1, 1, "", "__arrow_c_stream__"], [979, 1, 1, "", "__getitem__"], [980, 1, 1, "", "abs"], [981, 1, 1, "", "alias"], [982, 1, 1, "", "all"], [983, 1, 1, "", "any"], [984, 1, 1, "", "append"], [985, 1, 1, "", "approx_n_unique"], [986, 1, 1, "", "arccos"], [987, 1, 1, "", "arccosh"], [988, 1, 1, "", "arcsin"], [989, 1, 1, "", "arcsinh"], [990, 1, 1, "", "arctan"], [991, 1, 1, "", "arctanh"], [992, 1, 1, "", "arg_max"], [993, 1, 1, "", "arg_min"], [994, 1, 1, "", "arg_sort"], [995, 1, 1, "", "arg_true"], [996, 1, 1, "", "arg_unique"], [1021, 1, 1, "", "backward_fill"], [1029, 1, 1, "", "bitwise_and"], [1030, 1, 1, "", "bitwise_count_ones"], [1031, 1, 1, "", "bitwise_count_zeros"], [1032, 1, 1, "", "bitwise_leading_ones"], [1033, 1, 1, "", "bitwise_leading_zeros"], [1034, 1, 1, "", "bitwise_or"], [1035, 1, 1, "", "bitwise_trailing_ones"], [1036, 1, 1, "", "bitwise_trailing_zeros"], [1037, 1, 1, "", "bitwise_xor"], [1038, 1, 1, "", "bottom_k"], [1039, 1, 1, "", "bottom_k_by"], [1040, 1, 1, "", "cast"], [1049, 1, 1, "", "cbrt"], [1050, 1, 1, "", "ceil"], [1051, 1, 1, "", "chunk_lengths"], [1052, 1, 1, "", "clear"], [1053, 1, 1, "", "clip"], [1054, 1, 1, "", "clone"], [1055, 1, 1, "", "cos"], [1056, 1, 1, "", "cosh"], [1057, 1, 1, "", "cot"], [1058, 1, 1, "", "count"], [1059, 1, 1, "", "cum_count"], [1060, 1, 1, "", "cum_max"], [1061, 1, 1, "", "cum_min"], [1062, 1, 1, "", "cum_prod"], [1063, 1, 1, "", "cum_sum"], [1064, 1, 1, "", "cumulative_eval"], [1065, 1, 1, "", "cut"], [1066, 1, 1, "", "describe"], [1067, 1, 1, "", "diff"], [1068, 1, 1, "", "dot"], [1069, 1, 1, "", "drop_nans"], [1070, 1, 1, "", "drop_nulls"], [1121, 2, 1, "", "dtype"], [1122, 1, 1, "", "entropy"], [1123, 1, 1, "", "eq"], [1124, 1, 1, "", "eq_missing"], [1125, 1, 1, "", "equals"], [1126, 1, 1, "", "estimated_size"], [1127, 1, 1, "", "ewm_mean"], [1128, 1, 1, "", "ewm_mean_by"], [1129, 1, 1, "", "ewm_std"], [1130, 1, 1, "", "ewm_var"], [1131, 1, 1, "", "exp"], [1132, 1, 1, "", "explode"], [1133, 1, 1, "", "extend"], [1134, 1, 1, "", "extend_constant"], [1135, 1, 1, "", "fill_nan"], [1136, 1, 1, "", "fill_null"], [1137, 1, 1, "", "filter"], [1138, 1, 1, "", "first"], [1139, 2, 1, "", "flags"], [1140, 1, 1, "", "floor"], [1141, 1, 1, "", "forward_fill"], [1142, 1, 1, "", "gather"], [1143, 1, 1, "", "gather_every"], [1144, 1, 1, "", "ge"], [1145, 1, 1, "", "get_chunks"], [1146, 1, 1, "", "gt"], [1147, 1, 1, "", "has_nulls"], [1148, 1, 1, "", "has_validity"], [1149, 1, 1, "", "hash"], [1150, 1, 1, "", "head"], [1151, 1, 1, "", "hist"], [1152, 1, 1, "", "implode"], [1153, 1, 1, "", "index_of"], [1154, 1, 1, "", "interpolate"], [1155, 1, 1, "", "interpolate_by"], [1156, 1, 1, "", "is_between"], [1157, 1, 1, "", "is_duplicated"], [1158, 1, 1, "", "is_empty"], [1159, 1, 1, "", "is_finite"], [1160, 1, 1, "", "is_first_distinct"], [1161, 1, 1, "", "is_in"], [1162, 1, 1, "", "is_infinite"], [1163, 1, 1, "", "is_last_distinct"], [1164, 1, 1, "", "is_nan"], [1165, 1, 1, "", "is_not_nan"], [1166, 1, 1, "", "is_not_null"], [1167, 1, 1, "", "is_null"], [1168, 1, 1, "", "is_sorted"], [1169, 1, 1, "", "is_unique"], [1170, 1, 1, "", "item"], [1171, 1, 1, "", "kurtosis"], [1172, 1, 1, "", "last"], [1173, 1, 1, "", "le"], [1174, 1, 1, "", "len"], [1175, 1, 1, "", "limit"], [1216, 1, 1, "", "log"], [1217, 1, 1, "", "log10"], [1218, 1, 1, "", "log1p"], [1219, 1, 1, "", "lower_bound"], [1220, 1, 1, "", "lt"], [1221, 1, 1, "", "map_elements"], [1222, 1, 1, "", "max"], [1223, 1, 1, "", "mean"], [1224, 1, 1, "", "median"], [1225, 1, 1, "", "min"], [1226, 1, 1, "", "mode"], [1227, 1, 1, "", "n_chunks"], [1228, 1, 1, "", "n_unique"], [1229, 2, 1, "", "name"], [1230, 1, 1, "", "nan_max"], [1231, 1, 1, "", "nan_min"], [1232, 1, 1, "", "ne"], [1233, 1, 1, "", "ne_missing"], [1234, 1, 1, "", "new_from_index"], [1235, 1, 1, "", "not_"], [1236, 1, 1, "", "null_count"], [1237, 1, 1, "", "pct_change"], [1238, 1, 1, "", "peak_max"], [1239, 1, 1, "", "peak_min"], [1376, 2, 1, "", "plot"], [1240, 1, 1, "", "pow"], [1241, 1, 1, "", "product"], [1242, 1, 1, "", "qcut"], [1243, 1, 1, "", "quantile"], [1244, 1, 1, "", "rank"], [1245, 1, 1, "", "rechunk"], [1246, 1, 1, "", "reinterpret"], [1247, 1, 1, "", "rename"], [1248, 1, 1, "", "repeat_by"], [1249, 1, 1, "", "replace"], [1250, 1, 1, "", "replace_strict"], [1251, 1, 1, "", "reshape"], [1252, 1, 1, "", "reverse"], [1253, 1, 1, "", "rle"], [1254, 1, 1, "", "rle_id"], [1255, 1, 1, "", "rolling_kurtosis"], [1256, 1, 1, "", "rolling_map"], [1257, 1, 1, "", "rolling_max"], [1258, 1, 1, "", "rolling_mean"], [1259, 1, 1, "", "rolling_median"], [1260, 1, 1, "", "rolling_min"], [1261, 1, 1, "", "rolling_quantile"], [1262, 1, 1, "", "rolling_skew"], [1263, 1, 1, "", "rolling_std"], [1264, 1, 1, "", "rolling_sum"], [1265, 1, 1, "", "rolling_var"], [1266, 1, 1, "", "round"], [1267, 1, 1, "", "round_sig_figs"], [1268, 1, 1, "", "sample"], [1269, 1, 1, "", "scatter"], [1270, 1, 1, "", "search_sorted"], [1271, 1, 1, "", "set"], [1272, 1, 1, "", "set_sorted"], [1273, 2, 1, "", "shape"], [1274, 1, 1, "", "shift"], [1275, 1, 1, "", "shrink_dtype"], [1276, 1, 1, "", "shrink_to_fit"], [1277, 1, 1, "", "shuffle"], [1278, 1, 1, "", "sign"], [1279, 1, 1, "", "sin"], [1280, 1, 1, "", "sinh"], [1281, 1, 1, "", "skew"], [1282, 1, 1, "", "slice"], [1283, 1, 1, "", "sort"], [1284, 1, 1, "", "sqrt"], [1285, 1, 1, "", "std"], [1341, 1, 1, "", "sum"], [1342, 1, 1, "", "tail"], [1343, 1, 1, "", "tan"], [1344, 1, 1, "", "tanh"], [1345, 1, 1, "", "to_arrow"], [1346, 1, 1, "", "to_dummies"], [1347, 1, 1, "", "to_frame"], [1348, 1, 1, "", "to_init_repr"], [1349, 1, 1, "", "to_jax"], [1350, 1, 1, "", "to_list"], [1351, 1, 1, "", "to_numpy"], [1352, 1, 1, "", "to_pandas"], [1353, 1, 1, "", "to_physical"], [1354, 1, 1, "", "to_torch"], [1355, 1, 1, "", "top_k"], [1356, 1, 1, "", "top_k_by"], [1357, 1, 1, "", "unique"], [1358, 1, 1, "", "unique_counts"], [1359, 1, 1, "", "upper_bound"], [1360, 1, 1, "", "value_counts"], [1361, 1, 1, "", "var"], [1362, 1, 1, "", "zip_with"]], "polars.Series.arr": [[997, 1, 1, "", "all"], [998, 1, 1, "", "any"], [999, 1, 1, "", "arg_max"], [1000, 1, 1, "", "arg_min"], [1001, 1, 1, "", "contains"], [1002, 1, 1, "", "count_matches"], [1003, 1, 1, "", "explode"], [1004, 1, 1, "", "first"], [1005, 1, 1, "", "get"], [1006, 1, 1, "", "join"], [1007, 1, 1, "", "last"], [1008, 1, 1, "", "max"], [1009, 1, 1, "", "median"], [1010, 1, 1, "", "min"], [1011, 1, 1, "", "n_unique"], [1012, 1, 1, "", "reverse"], [1013, 1, 1, "", "shift"], [1014, 1, 1, "", "sort"], [1015, 1, 1, "", "std"], [1016, 1, 1, "", "sum"], [1017, 1, 1, "", "to_list"], [1018, 1, 1, "", "to_struct"], [1019, 1, 1, "", "unique"], [1020, 1, 1, "", "var"]], "polars.Series.bin": [[1022, 1, 1, "", "contains"], [1023, 1, 1, "", "decode"], [1024, 1, 1, "", "encode"], [1025, 1, 1, "", "ends_with"], [1026, 1, 1, "", "reinterpret"], [1027, 1, 1, "", "size"], [1028, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1041, 1, 1, "", "ends_with"], [1042, 1, 1, "", "get_categories"], [1043, 1, 1, "", "is_local"], [1044, 1, 1, "", "len_bytes"], [1045, 1, 1, "", "len_chars"], [1046, 1, 1, "", "starts_with"], [1047, 1, 1, "", "to_local"], [1048, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1071, 1, 1, "", "add_business_days"], [1072, 1, 1, "", "base_utc_offset"], [1073, 1, 1, "", "cast_time_unit"], [1074, 1, 1, "", "century"], [1075, 1, 1, "", "combine"], [1076, 1, 1, "", "convert_time_zone"], [1077, 1, 1, "", "date"], [1078, 1, 1, "", "datetime"], [1079, 1, 1, "", "day"], [1080, 1, 1, "", "dst_offset"], [1081, 1, 1, "", "epoch"], [1082, 1, 1, "", "hour"], [1083, 1, 1, "", "is_business_day"], [1084, 1, 1, "", "is_leap_year"], [1085, 1, 1, "", "iso_year"], [1086, 1, 1, "", "max"], [1087, 1, 1, "", "mean"], [1088, 1, 1, "", "median"], [1089, 1, 1, "", "microsecond"], [1090, 1, 1, "", "millennium"], [1091, 1, 1, "", "millisecond"], [1092, 1, 1, "", "min"], [1093, 1, 1, "", "minute"], [1094, 1, 1, "", "month"], [1095, 1, 1, "", "month_end"], [1096, 1, 1, "", "month_start"], [1097, 1, 1, "", "nanosecond"], [1098, 1, 1, "", "offset_by"], [1099, 1, 1, "", "ordinal_day"], [1100, 1, 1, "", "quarter"], [1101, 1, 1, "", "replace"], [1102, 1, 1, "", "replace_time_zone"], [1103, 1, 1, "", "round"], [1104, 1, 1, "", "second"], [1105, 1, 1, "", "strftime"], [1106, 1, 1, "", "time"], [1107, 1, 1, "", "timestamp"], [1108, 1, 1, "", "to_string"], [1109, 1, 1, "", "total_days"], [1110, 1, 1, "", "total_hours"], [1111, 1, 1, "", "total_microseconds"], [1112, 1, 1, "", "total_milliseconds"], [1113, 1, 1, "", "total_minutes"], [1114, 1, 1, "", "total_nanoseconds"], [1115, 1, 1, "", "total_seconds"], [1116, 1, 1, "", "truncate"], [1117, 1, 1, "", "week"], [1118, 1, 1, "", "weekday"], [1119, 1, 1, "", "with_time_unit"], [1120, 1, 1, "", "year"]], "polars.Series.list": [[1176, 1, 1, "", "all"], [1177, 1, 1, "", "any"], [1178, 1, 1, "", "arg_max"], [1179, 1, 1, "", "arg_min"], [1180, 1, 1, "", "concat"], [1181, 1, 1, "", "contains"], [1182, 1, 1, "", "count_matches"], [1183, 1, 1, "", "diff"], [1184, 1, 1, "", "drop_nulls"], [1185, 1, 1, "", "eval"], [1186, 1, 1, "", "explode"], [1187, 1, 1, "", "first"], [1188, 1, 1, "", "gather"], [1189, 1, 1, "", "gather_every"], [1190, 1, 1, "", "get"], [1191, 1, 1, "", "head"], [1192, 1, 1, "", "join"], [1193, 1, 1, "", "last"], [1194, 1, 1, "", "len"], [1195, 1, 1, "", "max"], [1196, 1, 1, "", "mean"], [1197, 1, 1, "", "median"], [1198, 1, 1, "", "min"], [1199, 1, 1, "", "n_unique"], [1200, 1, 1, "", "reverse"], [1201, 1, 1, "", "sample"], [1202, 1, 1, "", "set_difference"], [1203, 1, 1, "", "set_intersection"], [1204, 1, 1, "", "set_symmetric_difference"], [1205, 1, 1, "", "set_union"], [1206, 1, 1, "", "shift"], [1207, 1, 1, "", "slice"], [1208, 1, 1, "", "sort"], [1209, 1, 1, "", "std"], [1210, 1, 1, "", "sum"], [1211, 1, 1, "", "tail"], [1212, 1, 1, "", "to_array"], [1213, 1, 1, "", "to_struct"], [1214, 1, 1, "", "unique"], [1215, 1, 1, "", "var"]], "polars.Series.str": [[1286, 1, 1, "", "concat"], [1287, 1, 1, "", "contains"], [1288, 1, 1, "", "contains_any"], [1289, 1, 1, "", "count_matches"], [1290, 1, 1, "", "decode"], [1291, 1, 1, "", "encode"], [1292, 1, 1, "", "ends_with"], [1293, 1, 1, "", "escape_regex"], [1294, 1, 1, "", "explode"], [1295, 1, 1, "", "extract"], [1296, 1, 1, "", "extract_all"], [1297, 1, 1, "", "extract_groups"], [1298, 1, 1, "", "extract_many"], [1299, 1, 1, "", "find"], [1300, 1, 1, "", "find_many"], [1301, 1, 1, "", "head"], [1302, 1, 1, "", "join"], [1303, 1, 1, "", "json_decode"], [1304, 1, 1, "", "json_path_match"], [1305, 1, 1, "", "len_bytes"], [1306, 1, 1, "", "len_chars"], [1307, 1, 1, "", "normalize"], [1308, 1, 1, "", "pad_end"], [1309, 1, 1, "", "pad_start"], [1310, 1, 1, "", "replace"], [1311, 1, 1, "", "replace_all"], [1312, 1, 1, "", "replace_many"], [1313, 1, 1, "", "reverse"], [1314, 1, 1, "", "slice"], [1315, 1, 1, "", "split"], [1316, 1, 1, "", "split_exact"], [1317, 1, 1, "", "splitn"], [1318, 1, 1, "", "starts_with"], [1319, 1, 1, "", "strip_chars"], [1320, 1, 1, "", "strip_chars_end"], [1321, 1, 1, "", "strip_chars_start"], [1322, 1, 1, "", "strip_prefix"], [1323, 1, 1, "", "strip_suffix"], [1324, 1, 1, "", "strptime"], [1325, 1, 1, "", "tail"], [1326, 1, 1, "", "to_date"], [1327, 1, 1, "", "to_datetime"], [1328, 1, 1, "", "to_decimal"], [1329, 1, 1, "", "to_integer"], [1330, 1, 1, "", "to_lowercase"], [1331, 1, 1, "", "to_time"], [1332, 1, 1, "", "to_titlecase"], [1333, 1, 1, "", "to_uppercase"], [1334, 1, 1, "", "zfill"]], "polars.Series.struct": [[1335, 1, 1, "", "field"], [1336, 3, 1, "", "fields"], [1337, 1, 1, "", "json_encode"], [1338, 1, 1, "", "rename_fields"], [1339, 3, 1, "", "schema"], [1340, 1, 1, "", "unnest"]], "polars.StringCache": [[57, 1, 1, "", "__init__"]], "polars.api": [[59, 4, 1, "", "register_dataframe_namespace"], [60, 4, 1, "", "register_expr_namespace"], [61, 4, 1, "", "register_lazyframe_namespace"], [62, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[198, 0, 1, "", "CatalogInfo"], [199, 0, 1, "", "ColumnInfo"], [200, 5, 1, "", "DataSourceFormat"], [201, 0, 1, "", "NamespaceInfo"], [202, 0, 1, "", "TableInfo"], [204, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[198, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[199, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[201, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[202, 1, 1, "", "__init__"], [203, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[334, 1, 1, "", "__iter__"], [335, 1, 1, "", "agg"], [336, 1, 1, "", "all"], [337, 1, 1, "", "count"], [338, 1, 1, "", "first"], [339, 1, 1, "", "head"], [340, 1, 1, "", "last"], [341, 1, 1, "", "len"], [342, 1, 1, "", "map_groups"], [343, 1, 1, "", "max"], [344, 1, 1, "", "mean"], [345, 1, 1, "", "median"], [346, 1, 1, "", "min"], [347, 1, 1, "", "n_unique"], [348, 1, 1, "", "quantile"], [349, 1, 1, "", "sum"], [350, 1, 1, "", "tail"]], "polars.datatypes": [[67, 0, 1, "", "Array"], [68, 0, 1, "", "Binary"], [69, 0, 1, "", "Boolean"], [70, 0, 1, "", "Categorical"], [71, 0, 1, "", "DataType"], [72, 0, 1, "", "Date"], [73, 0, 1, "", "Datetime"], [74, 0, 1, "", "Decimal"], [75, 0, 1, "", "Duration"], [76, 0, 1, "", "Enum"], [77, 0, 1, "", "Field"], [78, 0, 1, "", "Float32"], [79, 0, 1, "", "Float64"], [80, 0, 1, "", "Int128"], [81, 0, 1, "", "Int16"], [82, 0, 1, "", "Int32"], [83, 0, 1, "", "Int64"], [84, 0, 1, "", "Int8"], [85, 0, 1, "", "List"], [86, 0, 1, "", "Null"], [87, 0, 1, "", "Object"], [88, 0, 1, "", "String"], [89, 0, 1, "", "Struct"], [90, 0, 1, "", "Time"], [91, 0, 1, "", "UInt16"], [92, 0, 1, "", "UInt32"], [93, 0, 1, "", "UInt64"], [94, 0, 1, "", "UInt8"], [95, 0, 1, "", "Unknown"], [96, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[70, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[83, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[84, 1, 1, "", "__init__"]], "polars.datatypes.List": [[85, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[86, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[87, 1, 1, "", "__init__"]], "polars.datatypes.String": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[89, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[92, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[93, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[94, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[95, 1, 1, "", "__init__"]], "polars.exceptions": [[102, 6, 1, "", "CategoricalRemappingWarning"], [103, 6, 1, "", "ChronoFormatWarning"], [104, 6, 1, "", "ColumnNotFoundError"], [105, 6, 1, "", "ComputeError"], [106, 6, 1, "", "CustomUFuncWarning"], [107, 6, 1, "", "DataOrientationWarning"], [108, 6, 1, "", "DuplicateError"], [109, 6, 1, "", "InvalidOperationError"], [110, 6, 1, "", "MapWithoutReturnDtypeWarning"], [111, 6, 1, "", "ModuleUpgradeRequiredError"], [112, 6, 1, "", "NoDataError"], [113, 6, 1, "", "NoRowsReturnedError"], [114, 6, 1, "", "OutOfBoundsError"], [115, 6, 1, "", "PanicException"], [116, 6, 1, "", "ParameterCollisionError"], [117, 6, 1, "", "PerformanceWarning"], [118, 6, 1, "", "PolarsError"], [119, 6, 1, "", "PolarsInefficientMapWarning"], [120, 6, 1, "", "PolarsWarning"], [121, 6, 1, "", "RowsError"], [122, 6, 1, "", "SQLInterfaceError"], [123, 6, 1, "", "SQLSyntaxError"], [124, 6, 1, "", "SchemaError"], [125, 6, 1, "", "SchemaFieldNotFoundError"], [126, 6, 1, "", "ShapeError"], [127, 6, 1, "", "StringCacheMismatchError"], [128, 6, 1, "", "StructFieldNotFoundError"], [129, 6, 1, "", "TooManyRowsReturnedError"], [130, 6, 1, "", "UnstableWarning"], [131, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[142, 1, 1, "", "next_batches"]], "polars.io.parquet": [[143, 0, 1, "", "ParquetFieldOverwrites"]], "polars.io.parquet.ParquetFieldOverwrites": [[143, 1, 1, "", "__init__"]], "polars.io.partition": [[144, 0, 1, "", "BasePartitionContext"], [145, 0, 1, "", "KeyedPartition"], [146, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[144, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[145, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[146, 1, 1, "", "__init__"]], "polars.io.plugins": [[147, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[944, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[944, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[945, 1, 1, "", "agg"], [946, 1, 1, "", "all"], [947, 1, 1, "", "count"], [948, 1, 1, "", "first"], [949, 1, 1, "", "head"], [950, 1, 1, "", "last"], [951, 1, 1, "", "len"], [952, 1, 1, "", "map_groups"], [953, 1, 1, "", "max"], [954, 1, 1, "", "mean"], [955, 1, 1, "", "median"], [956, 1, 1, "", "min"], [957, 1, 1, "", "n_unique"], [958, 1, 1, "", "quantile"], [959, 1, 1, "", "sum"], [960, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[961, 1, 1, "", "cancel"], [962, 1, 1, "", "fetch"], [963, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[149, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[975, 4, 1, "", "all"], [975, 4, 1, "", "alpha"], [975, 4, 1, "", "alphanumeric"], [975, 4, 1, "", "binary"], [975, 4, 1, "", "boolean"], [975, 4, 1, "", "by_dtype"], [975, 4, 1, "", "by_index"], [975, 4, 1, "", "by_name"], [975, 4, 1, "", "categorical"], [975, 4, 1, "", "contains"], [975, 4, 1, "", "date"], [975, 4, 1, "", "datetime"], [975, 4, 1, "", "decimal"], [975, 4, 1, "", "digit"], [975, 4, 1, "", "duration"], [975, 4, 1, "", "ends_with"], [975, 4, 1, "", "exclude"], [975, 4, 1, "", "expand_selector"], [975, 4, 1, "", "first"], [975, 4, 1, "", "float"], [975, 4, 1, "", "integer"], [975, 4, 1, "", "is_selector"], [975, 4, 1, "", "last"], [975, 4, 1, "", "matches"], [975, 4, 1, "", "numeric"], [975, 4, 1, "", "signed_integer"], [975, 4, 1, "", "starts_with"], [975, 4, 1, "", "string"], [975, 4, 1, "", "temporal"], [975, 4, 1, "", "time"], [975, 4, 1, "", "unsigned_integer"]], "polars.testing": [[176, 4, 1, "", "assert_frame_equal"], [177, 4, 1, "", "assert_frame_not_equal"], [178, 4, 1, "", "assert_series_equal"], [179, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[180, 0, 1, "", "column"], [181, 4, 1, "", "columns"], [182, 4, 1, "", "create_list_strategy"], [183, 4, 1, "", "dataframes"], [184, 4, 1, "", "dtypes"], [185, 4, 1, "", "lists"], [186, 4, 1, "", "load_profile"], [187, 4, 1, "", "series"], [188, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[180, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 12, 38, 39, 40, 41, 47, 49, 56, 62, 67, 77, 89, 97, 101, 103, 109, 133, 140, 147, 152, 153, 154, 155, 157, 158, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 187, 213, 215, 216, 227, 228, 231, 236, 239, 244, 245, 250, 256, 259, 260, 271, 278, 280, 284, 286, 288, 291, 294, 295, 302, 311, 314, 319, 321, 322, 323, 324, 325, 330, 331, 356, 394, 427, 459, 464, 484, 487, 507, 513, 517, 530, 546, 567, 596, 597, 609, 618, 623, 630, 631, 638, 639, 650, 657, 659, 692, 696, 704, 705, 706, 708, 710, 719, 720, 723, 724, 726, 733, 734, 735, 736, 740, 744, 746, 748, 756, 765, 766, 767, 768, 773, 780, 783, 786, 787, 796, 797, 799, 800, 806, 811, 812, 813, 814, 816, 818, 819, 821, 828, 830, 832, 833, 834, 840, 846, 850, 867, 869, 880, 890, 891, 895, 896, 906, 914, 919, 920, 926, 931, 932, 933, 934, 935, 938, 939, 952, 969, 974, 975, 979, 980, 981, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1079, 1080, 1081, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1095, 1096, 1099, 1101, 1103, 1104, 1105, 1108, 1116, 1118, 1119, 1120, 1121, 1126, 1127, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1139, 1140, 1142, 1143, 1145, 1147, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1337, 1338, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1371, 1376, 1380, 1384, 1387, 1394, 1395], "0": [1, 7, 9, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 47, 52, 53, 58, 59, 60, 62, 64, 66, 67, 74, 85, 97, 134, 140, 148, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 229, 230, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 250, 251, 255, 257, 258, 259, 262, 264, 265, 267, 268, 269, 270, 271, 274, 275, 276, 277, 280, 281, 282, 284, 286, 288, 290, 291, 292, 293, 294, 301, 302, 303, 304, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 324, 326, 327, 330, 332, 333, 335, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 356, 359, 360, 365, 367, 368, 370, 374, 375, 376, 377, 378, 379, 382, 383, 384, 387, 388, 390, 393, 403, 406, 408, 415, 417, 422, 425, 427, 428, 434, 435, 436, 437, 438, 439, 446, 447, 448, 452, 453, 454, 460, 461, 465, 469, 471, 472, 476, 480, 483, 485, 487, 490, 491, 493, 494, 498, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 516, 517, 519, 521, 522, 524, 526, 528, 532, 533, 536, 539, 541, 542, 543, 544, 546, 548, 553, 554, 557, 560, 563, 564, 565, 571, 572, 584, 585, 588, 590, 591, 592, 593, 595, 596, 598, 599, 600, 604, 609, 612, 615, 616, 617, 619, 621, 630, 631, 632, 633, 634, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 652, 653, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 686, 687, 688, 689, 693, 694, 695, 698, 703, 704, 705, 708, 709, 737, 748, 749, 750, 752, 753, 754, 756, 757, 761, 762, 763, 765, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 782, 784, 791, 795, 798, 804, 805, 807, 808, 809, 812, 815, 816, 817, 821, 823, 824, 826, 827, 828, 829, 833, 836, 837, 838, 839, 840, 841, 846, 850, 866, 867, 869, 870, 871, 872, 874, 876, 877, 879, 880, 882, 883, 885, 886, 887, 889, 890, 891, 894, 895, 899, 901, 902, 905, 906, 909, 911, 912, 914, 917, 918, 919, 924, 926, 927, 928, 931, 936, 938, 940, 941, 942, 945, 947, 948, 950, 952, 953, 954, 955, 956, 957, 958, 959, 969, 974, 975, 979, 986, 987, 988, 989, 990, 991, 992, 994, 996, 999, 1005, 1015, 1016, 1018, 1020, 1027, 1040, 1047, 1049, 1050, 1052, 1055, 1056, 1057, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1078, 1082, 1087, 1088, 1089, 1091, 1093, 1097, 1101, 1104, 1108, 1111, 1112, 1114, 1115, 1119, 1122, 1125, 1127, 1128, 1129, 1130, 1135, 1140, 1143, 1148, 1149, 1151, 1154, 1155, 1159, 1162, 1164, 1165, 1166, 1167, 1170, 1171, 1178, 1179, 1182, 1185, 1188, 1189, 1190, 1196, 1197, 1209, 1210, 1213, 1215, 1216, 1217, 1218, 1219, 1223, 1224, 1230, 1231, 1237, 1240, 1242, 1243, 1244, 1249, 1250, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1278, 1279, 1280, 1281, 1284, 1285, 1286, 1289, 1294, 1295, 1296, 1299, 1300, 1304, 1310, 1328, 1341, 1343, 1344, 1346, 1349, 1351, 1352, 1353, 1354, 1359, 1360, 1361, 1371, 1376, 1380, 1386, 1388, 1389, 1390, 1393, 1394, 1396, 1397, 1399, 1401, 1402], "00": [28, 41, 73, 216, 223, 245, 326, 356, 455, 456, 459, 463, 474, 475, 477, 481, 482, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 662, 664, 666, 668, 670, 673, 675, 677, 733, 736, 740, 791, 792, 793, 794, 808, 836, 837, 838, 850, 869, 877, 891, 969, 975, 1072, 1073, 1076, 1077, 1078, 1080, 1081, 1082, 1088, 1089, 1093, 1095, 1096, 1097, 1098, 1102, 1103, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1310, 1324, 1327, 1331, 1394], "000": [9, 11, 28, 41, 54, 356, 1310, 1402], "0000": [318, 356, 1354, 1371, 1402], "000000": [411, 412, 487, 699, 1023, 1024, 1290], "00000001": [12, 764, 850], "00000010": [764, 850], "00000011": [764, 850], "00000100": [764, 850], "00001000": [764, 850], "00001010": [764, 850], "00001011": [764, 850], "0000e": 12, "0000ff": [411, 412, 699, 1023, 1024, 1290], "0001": 487, "000100": 487, "000101": 487, "0005": 975, "00050": 975, "000800": 1108, "001": [60, 743, 794, 1111, 1112, 1114, 1334], "002": [794, 1111, 1112, 1114], "005": [1122, 1371], "00prefix": 975, "00z": [733, 736, 1324, 1327], "01": [29, 58, 72, 73, 183, 216, 223, 243, 245, 260, 288, 326, 356, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 733, 735, 736, 740, 775, 788, 789, 790, 791, 792, 793, 794, 808, 850, 869, 877, 891, 896, 917, 969, 975, 1071, 1073, 1075, 1076, 1077, 1078, 1081, 1082, 1088, 1089, 1093, 1095, 1096, 1097, 1098, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1324, 1326, 1327, 1331, 1394, 1397], "010": [9, 738, 1329], "01000": 29, "01000010": [764, 850], "01000110": [764, 850], "012": [679, 716, 850, 1267, 1307, 1371], "0123": [743, 1334], "01234": [679, 850, 1267, 1371], "012345": 1108, "015625": [1240, 1371], "01\u00b2": [716, 1307], "02": [58, 216, 223, 243, 245, 288, 326, 356, 454, 456, 458, 464, 474, 475, 477, 481, 486, 487, 489, 492, 494, 498, 658, 662, 664, 666, 668, 670, 673, 675, 677, 678, 733, 735, 736, 740, 775, 788, 789, 790, 791, 792, 793, 794, 808, 850, 869, 877, 891, 917, 969, 975, 1018, 1073, 1075, 1077, 1078, 1081, 1082, 1088, 1089, 1093, 1095, 1096, 1097, 1101, 1102, 1103, 1106, 1107, 1110, 1113, 1115, 1116, 1213, 1324, 1326, 1327, 1331, 1394, 1395], "03": [58, 140, 152, 216, 245, 260, 288, 326, 356, 456, 458, 459, 464, 466, 474, 475, 477, 480, 481, 482, 484, 486, 487, 488, 489, 492, 494, 495, 498, 504, 517, 658, 662, 664, 666, 668, 670, 673, 675, 677, 735, 740, 788, 789, 790, 791, 792, 793, 794, 850, 869, 891, 896, 917, 969, 975, 1073, 1075, 1076, 1081, 1082, 1088, 1089, 1095, 1096, 1097, 1102, 1103, 1105, 1107, 1109, 1110, 1113, 1115, 1326, 1331], "037037": [1240, 1371], "04": [173, 216, 223, 245, 326, 356, 458, 459, 474, 475, 480, 481, 482, 484, 488, 489, 492, 494, 498, 662, 664, 666, 668, 670, 673, 675, 677, 733, 775, 788, 791, 792, 794, 850, 869, 877, 891, 969, 975, 1076, 1089, 1093, 1095, 1096, 1097, 1102, 1105, 1109, 1110, 1113, 1115, 1119, 1324, 1394], "047198": 1396, "05": [17, 173, 176, 177, 178, 179, 183, 216, 223, 326, 356, 454, 457, 458, 459, 460, 461, 465, 466, 469, 470, 471, 472, 474, 475, 476, 481, 483, 484, 485, 487, 488, 775, 788, 789, 791, 792, 869, 877, 969, 975, 1075, 1076, 1077, 1078, 1102, 1103, 1105, 1106, 1108, 1109, 1116, 1394, 1395, 1397], "050545": 140, "0522623626787952": [1171, 1371], "0545": [1077, 1078, 1106], "05t10": 1108, "06": [183, 216, 326, 356, 454, 458, 473, 479, 481, 482, 483, 495, 496, 788, 791, 808, 869, 969, 975, 1071, 1102, 1103, 1108, 1116], "060": [460, 461, 465, 469, 471, 472, 476, 483, 485], "0601749420166": [231, 356], "06293300616044681": [1122, 1371], "07": [17, 152, 183, 223, 356, 454, 457, 458, 470, 481, 482, 487, 495, 733, 788, 789, 791, 792, 800, 877, 969, 975, 1071, 1075, 1102, 1108, 1324, 1394, 1397], "071068": [223, 356, 877, 969], "08": [152, 176, 177, 178, 179, 223, 260, 288, 303, 356, 454, 458, 474, 475, 482, 487, 658, 733, 792, 794, 808, 850, 877, 896, 917, 969, 975, 1071, 1103, 1116, 1324, 1394, 1395], "085537": [1131, 1371], "09": [58, 152, 223, 288, 356, 454, 458, 474, 475, 487, 638, 658, 737, 788, 789, 791, 838, 850, 877, 917, 969, 975, 1071, 1328], "090909": [639, 850], "094395": 1396, "098612": [593, 850, 1216, 1218, 1371, 1393], "0999": [457, 470], "0_": [41, 356], "0m": [463, 1080], "0x11bc0ad80": 974, "0\u00b5": 487, "1": [1, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 52, 53, 58, 59, 60, 61, 62, 64, 66, 67, 85, 89, 97, 104, 107, 108, 109, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 153, 156, 157, 158, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 187, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 415, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 605, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 719, 720, 721, 725, 726, 727, 728, 729, 730, 737, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 846, 850, 865, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 969, 975, 979, 980, 981, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1027, 1038, 1039, 1040, 1044, 1045, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1142, 1143, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1174, 1175, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1295, 1297, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1306, 1310, 1311, 1312, 1316, 1317, 1328, 1334, 1335, 1337, 1338, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1371, 1376, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1399, 1400, 1401, 1402], "10": [14, 17, 18, 28, 36, 38, 40, 41, 43, 44, 47, 58, 66, 140, 152, 153, 155, 167, 175, 213, 218, 223, 227, 233, 242, 243, 245, 247, 249, 250, 251, 256, 260, 263, 275, 279, 281, 286, 288, 294, 303, 307, 330, 335, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 368, 372, 380, 381, 382, 384, 436, 442, 445, 450, 454, 455, 457, 458, 460, 461, 463, 465, 469, 470, 471, 472, 474, 475, 476, 480, 481, 482, 483, 485, 487, 495, 498, 504, 525, 526, 527, 532, 538, 550, 558, 564, 566, 572, 582, 584, 586, 590, 592, 608, 610, 621, 636, 638, 639, 642, 652, 653, 658, 690, 738, 748, 751, 764, 775, 776, 784, 789, 791, 792, 795, 798, 800, 802, 810, 811, 835, 838, 850, 872, 873, 877, 880, 891, 892, 894, 896, 900, 910, 911, 917, 919, 929, 930, 938, 945, 948, 950, 953, 954, 955, 956, 957, 958, 959, 969, 975, 1053, 1067, 1071, 1072, 1074, 1075, 1080, 1090, 1102, 1108, 1116, 1119, 1122, 1128, 1150, 1161, 1175, 1183, 1191, 1197, 1207, 1209, 1211, 1215, 1217, 1221, 1237, 1250, 1269, 1271, 1329, 1342, 1349, 1351, 1354, 1371, 1380, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1397, 1402], "100": [11, 18, 28, 41, 54, 136, 139, 148, 152, 153, 154, 157, 161, 162, 163, 167, 171, 213, 261, 280, 299, 356, 487, 652, 653, 683, 697, 707, 709, 712, 721, 737, 793, 850, 897, 923, 969, 975, 1124, 1217, 1233, 1249, 1250, 1257, 1258, 1260, 1274, 1288, 1300, 1303, 1312, 1328, 1371, 1391, 1402], "1000": [154, 231, 312, 333, 356, 373, 850, 942, 969, 1111, 1217, 1348, 1371, 1402], "10000": [152, 258, 356], "100000": [11, 28], "1000000": [12, 1114], "1001": [333, 356, 942, 969], "1002": [333, 356, 942, 969], "10047419486152048166": [246, 356], "1005": [373, 850], "100_000": [54, 828, 901, 969], "100\u00b5": 487, "101": [9, 28, 261, 356, 458, 487, 738, 897, 969, 975, 1329, 1402], "101000": 458, "10101": [28, 1397], "1010101": 9, "101514": [223, 356, 877, 969], "102": [261, 356, 897, 969], "1024": [38, 47, 49, 52, 152, 153, 154, 162, 171, 356, 415, 969, 1027], "1040361802642717": [1171, 1371], "107149": 1396, "10734580197236529959": [1149, 1371], "1073741824": [684, 850], "10783150408545073287": [246, 356], "107_930_000": 1380, "10_000": [41, 356], "10i": [245, 356, 891, 969], "10m": [482, 495, 1103, 1116], "10t00": 487, "11": [11, 17, 47, 52, 175, 183, 214, 223, 260, 288, 356, 368, 474, 475, 477, 482, 495, 519, 532, 564, 615, 639, 648, 658, 660, 674, 690, 764, 808, 833, 838, 846, 850, 866, 872, 873, 877, 892, 896, 900, 911, 917, 930, 969, 975, 1098, 1103, 1116, 1221, 1256, 1371, 1389], "110": [227, 356, 721, 738, 880, 969, 1329], "1101441246220388612": [526, 850], "111": [11, 1391], "11111": 1104, "111110": 1104, "11111001": [764, 850], "11111010": [764, 850], "11111111": 11, "112": [684, 850, 1402], "11330": 182, "1152921504606846976": [1246, 1371], "116": 182, "11638928888656214026": [526, 850], "118034": [928, 969], "11aa": 1394, "11aabb": 1394, "11h": [455, 1072], "12": [27, 41, 58, 140, 152, 175, 183, 223, 245, 256, 260, 261, 288, 303, 326, 356, 368, 444, 454, 455, 457, 458, 462, 470, 473, 474, 475, 477, 478, 479, 480, 487, 496, 497, 504, 532, 564, 596, 612, 639, 647, 658, 674, 684, 698, 719, 737, 785, 788, 791, 792, 793, 808, 811, 836, 837, 838, 850, 877, 891, 892, 896, 897, 900, 917, 924, 930, 969, 975, 1072, 1074, 1075, 1087, 1088, 1090, 1094, 1101, 1108, 1128, 1221, 1266, 1289, 1311, 1328, 1371, 1393, 1394, 1395, 1397, 1399, 1402], "120": [261, 356, 794, 897, 969, 1396], "1200": [679, 850], "120134": [737, 1328], "121": 1402, "123": [9, 605, 698, 705, 720, 743, 840, 975, 1289, 1296, 1334, 1347, 1371], "123000": 975, "1232e": [1055, 1057, 1371], "1234": [28, 679, 850], "12345": [800, 1050, 1108, 1140, 1266, 1371], "1234500": 975, "123456": [9, 975], "1234567": 28, "123456780": 140, "12346": 800, "123465": 975, "123a123": 720, "123abc": [719, 1310, 1311], "125": [1, 41, 62, 356, 366, 643, 829, 850, 927, 969, 1237, 1240, 1371], "1252": 152, "127": [1359, 1371, 1390], "128": [60, 74, 80, 1237, 1371], "129": [684, 850], "13": [143, 217, 218, 223, 234, 235, 242, 261, 262, 275, 288, 330, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 368, 454, 460, 461, 465, 469, 471, 472, 476, 483, 485, 608, 610, 658, 737, 778, 784, 787, 791, 798, 834, 836, 839, 850, 870, 871, 877, 885, 886, 897, 899, 917, 938, 948, 950, 953, 954, 955, 956, 957, 958, 959, 969, 1071, 1103, 1116, 1117, 1221, 1328, 1371, 1390], "130": [261, 356, 897, 969], "13382926553367784577": [526, 850], "134821952": 1380, "134_821_952": 1380, "135": [772, 1396], "13614470193936745724": [526, 850], "13756996518000038261": [1149, 1371], "13d": 487, "13h": [455, 1072], "14": [40, 175, 223, 245, 261, 264, 288, 326, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 455, 460, 461, 465, 469, 471, 472, 476, 483, 485, 487, 532, 605, 648, 791, 836, 837, 850, 877, 891, 897, 917, 948, 950, 953, 954, 955, 956, 957, 958, 959, 969, 975, 1072, 1103, 1108], "140": [261, 356, 897, 969], "141592653589793": 11, "141593": [647, 850, 986, 1371, 1393, 1396], "142857": [1237, 1371], "143": [737, 1328, 1402], "1433": [39, 356], "1436e16": 183, "1438741209321515184": [246, 356], "1440": [492, 1113], "1443e235": 1402, "149": 1402, "14d": 975, "14h": 487, "15": [11, 41, 143, 175, 223, 245, 261, 264, 288, 356, 446, 450, 475, 480, 482, 487, 495, 504, 642, 658, 674, 716, 785, 791, 836, 837, 850, 877, 891, 897, 917, 969, 975, 1064, 1067, 1103, 1108, 1116, 1128, 1307, 1371, 1390, 1394], "150": [261, 356, 897, 969, 1258, 1371], "1500": [175, 186], "15000": [258, 356], "153061": [546, 850], "155": 148, "15836": 183, "15_000": [258, 356], "16": [1, 41, 60, 81, 91, 175, 189, 223, 245, 261, 288, 330, 356, 442, 445, 480, 487, 532, 612, 619, 638, 643, 658, 738, 748, 784, 794, 795, 798, 808, 850, 877, 891, 897, 917, 924, 938, 969, 975, 1103, 1116, 1237, 1279, 1329, 1343, 1371, 1390, 1393, 1394, 1399], "160": [261, 356, 897, 969], "165": [1103, 1116], "1656e15": [1057, 1371], "166667": [761, 850, 1237, 1360, 1371], "1666683077": 800, "1666683099": 800, "167": 58, "16996": 1402, "16h": 975, "17": [140, 175, 183, 231, 260, 335, 356, 504, 530, 638, 660, 678, 780, 800, 837, 850, 896, 945, 969, 1055, 1057, 1103, 1128, 1153, 1256, 1371, 1402], "170": [148, 261, 356, 897, 969], "17293822569102704640": [1246, 1371], "174": 1402, "175201": [688, 850, 1280, 1371], "1755e": [180, 183], "1764": 62, "17888890": [231, 356], "179": 1402, "17_500": [258, 356], "18": [39, 140, 157, 223, 272, 288, 356, 445, 482, 495, 498, 532, 621, 638, 658, 748, 850, 877, 907, 911, 917, 969, 975, 1108, 1119, 1388, 1399], "180": [148, 448, 647, 850, 1396], "1800": [480, 1101], "1844": 183, "18446744073709551614": [1246, 1371], "185_000_000": 1380, "186": 1402, "1875": [676, 850, 936, 969], "1897": [457, 470, 1074, 1090], "18d": 975, "19": [183, 260, 288, 356, 457, 482, 658, 664, 666, 668, 670, 737, 850, 896, 917, 969, 1074, 1103, 1116, 1328], "1920": 1394, "196": 1395, "1964": [911, 969], "1969": [1394, 1395], "1970": [72, 73, 173, 495, 1116, 1380], "1972": 1380, "1976": [468, 499], "1977": [468, 499], "1978": [460, 461, 465, 468, 469, 471, 472, 476, 483, 485, 499, 1395], "1979": [468, 499], "1980": 487, "1985": [789, 792], "1990": [152, 1380], "1993": 1380, "1994": 1380, "1995": 152, "1998": [477, 1098], "1999": [303, 356, 477, 487, 975, 1098, 1108, 1397], "199992": [901, 969], "199994": [901, 969], "199996": [901, 969], "199998": [901, 969], "1_000_000": [231, 356, 1126, 1371], "1_234_500": 975, "1d": [245, 260, 288, 326, 356, 456, 477, 482, 487, 489, 492, 495, 498, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 794, 810, 837, 838, 850, 891, 896, 917, 969, 975, 1073, 1081, 1088, 1098, 1103, 1107, 1110, 1113, 1116, 1128, 1371], "1e": [12, 176, 177, 178, 179], "1e6": 12, "1h": [245, 260, 288, 326, 356, 463, 477, 482, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1080, 1082, 1098, 1103, 1116, 1128, 1371], "1i": [245, 288, 326, 356, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 850, 891, 917, 969, 1128, 1371], "1m": [245, 260, 288, 326, 356, 477, 482, 494, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1098, 1103, 1111, 1112, 1114, 1115, 1116, 1128, 1371], "1mo": [245, 260, 288, 326, 356, 459, 474, 475, 477, 481, 482, 488, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1076, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1109, 1116, 1117, 1128, 1371], "1n": [245, 260, 288, 326, 356, 477, 482, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1098, 1103, 1116, 1128, 1371], "1q": [245, 260, 288, 326, 356, 477, 482, 495, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1098, 1103, 1116], "1st_col": 975, "1u": [245, 260, 288, 326, 356, 477, 482, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1098, 1103, 1116, 1128, 1371], "1w": [245, 260, 288, 326, 356, 477, 482, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1098, 1103, 1116, 1128, 1371], "1w2d": [789, 790], "1y": [245, 260, 288, 326, 356, 477, 482, 495, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1098, 1103, 1116], "1y2mo": [477, 1098], "1zy3": [698, 1289], "2": [1, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 66, 67, 85, 89, 104, 107, 109, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 155, 161, 162, 164, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 185, 197, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 370, 372, 373, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 414, 415, 417, 422, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 454, 455, 457, 458, 459, 460, 461, 462, 463, 466, 467, 470, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 824, 828, 829, 830, 831, 832, 833, 835, 838, 839, 840, 846, 850, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 969, 974, 975, 979, 980, 981, 984, 987, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1026, 1027, 1038, 1039, 1045, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1077, 1078, 1080, 1082, 1083, 1086, 1087, 1088, 1090, 1092, 1093, 1094, 1095, 1096, 1100, 1101, 1102, 1103, 1106, 1116, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1142, 1143, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1174, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1289, 1295, 1297, 1299, 1300, 1301, 1303, 1304, 1306, 1307, 1310, 1311, 1316, 1317, 1319, 1320, 1321, 1324, 1325, 1327, 1328, 1329, 1330, 1333, 1335, 1337, 1338, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1350, 1351, 1352, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1371, 1376, 1380, 1381, 1383, 1384, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1399, 1400, 1401, 1402], "20": [39, 40, 41, 67, 140, 152, 153, 157, 158, 160, 164, 167, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 213, 214, 223, 227, 233, 245, 249, 272, 279, 281, 286, 288, 303, 313, 314, 318, 326, 332, 337, 356, 380, 381, 382, 436, 450, 457, 460, 461, 465, 469, 470, 471, 472, 476, 482, 483, 485, 487, 495, 498, 519, 526, 532, 596, 604, 615, 642, 662, 664, 666, 668, 670, 673, 675, 677, 703, 737, 748, 763, 791, 800, 810, 829, 837, 850, 866, 877, 880, 883, 891, 907, 910, 917, 927, 941, 947, 969, 975, 1067, 1074, 1078, 1090, 1103, 1108, 1116, 1119, 1125, 1131, 1148, 1249, 1294, 1328, 1349, 1351, 1354, 1371, 1387, 1388, 1391, 1397, 1399], "200": [490, 491, 493, 652, 653, 850, 975, 1124, 1233, 1249, 1250, 1257, 1258, 1260, 1371, 1391], "2000": [457, 467, 470, 474, 475, 477, 975, 1074, 1084, 1090, 1095, 1096, 1098, 1104, 1380, 1394], "200000": [490, 901, 969], "200000000": 493, "2001": [17, 456, 457, 462, 464, 467, 470, 473, 477, 478, 479, 482, 486, 495, 496, 497, 498, 662, 664, 666, 668, 670, 673, 675, 677, 733, 850, 975, 1073, 1074, 1079, 1081, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1097, 1098, 1099, 1100, 1103, 1107, 1116, 1117, 1118, 1119, 1120, 1324], "2002": [152, 467, 477, 1084, 1098, 1120], "2003": [477, 800, 1098], "2004": [477, 1098], "2005": [477, 1098], "2006": [477, 1098], "2008": 1380, "200m": [490, 491, 493], "2010": [303, 356, 487, 975], "2011": [455, 1072], "2012": [455, 1072, 1397], "2013": 1101, "2016": [260, 356, 896, 969], "2017": [260, 356, 896, 969], "2018": [260, 356, 481, 896, 969, 1102], "2019": [260, 356, 896, 969], "202": 1395, "2020": [156, 168, 216, 223, 243, 260, 288, 356, 359, 454, 459, 463, 466, 481, 484, 487, 488, 489, 490, 491, 492, 493, 494, 504, 658, 733, 735, 736, 775, 850, 869, 877, 896, 917, 969, 975, 1071, 1076, 1080, 1083, 1102, 1105, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1128, 1324, 1326, 1327, 1371, 1395], "2021": [216, 223, 243, 245, 326, 356, 733, 810, 869, 877, 891, 969, 975, 1077, 1078, 1085, 1106, 1324, 1394], "2022": [58, 216, 223, 243, 356, 458, 482, 495, 733, 789, 790, 792, 793, 794, 800, 869, 877, 969, 975, 1075, 1085, 1103, 1116, 1324], "2023": [17, 41, 140, 175, 258, 356, 458, 794, 810, 975, 1075], "2024": [175, 454, 460, 461, 465, 466, 469, 471, 472, 476, 480, 483, 485, 638, 775, 788, 789, 791, 792, 794, 850, 975, 1071, 1083, 1101, 1394, 1397], "2025": [454, 466, 480, 775, 808, 975, 1071, 1083], "2026": 1395, "2030": 1394, "2031": 975, "2040": 487, "2047317070637311557": [246, 356], "2055938745": 140, "2065": [460, 461, 465, 469, 471, 472, 476, 483, 485], "2068": 183, "207": 1395, "2077": [303, 356, 487, 975, 1108, 1394, 1395], "2095": 183, "20_000": [41, 356], "20t08": 487, "20t18": 1108, "20word": 155, "21": [175, 223, 272, 305, 356, 446, 457, 503, 505, 506, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 791, 800, 808, 826, 827, 850, 877, 907, 969, 975, 1064, 1074, 1127, 1129, 1130, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1371, 1388], "213": 1402, "2147483647": 1402, "2147483648": [1219, 1371], "21d": 975, "22": [47, 52, 175, 183, 356, 462, 478, 482, 495, 497, 498, 660, 662, 664, 666, 668, 670, 673, 675, 677, 733, 791, 846, 850, 969, 975, 1103, 1116, 1119, 1256, 1324, 1371, 1394, 1395, 1402], "221": 1402, "2246e": [1279, 1343, 1371], "225": [482, 495, 1396], "22500": 828, "22_000_000": 1380, "22_500": 828, "23": [11, 134, 183, 223, 245, 288, 318, 356, 458, 462, 465, 478, 480, 482, 487, 497, 658, 662, 664, 666, 668, 670, 673, 675, 677, 791, 794, 836, 837, 838, 850, 877, 891, 917, 927, 969, 975, 1075, 1082, 1101, 1354, 1371, 1401, 1402], "230498": 12, "230498095872587": 12, "2304980958725870923": 12, "232338648": 1380, "2337": [41, 356], "234": 28, "2345": 975, "23456789": 11, "235": 1402, "23h": 975, "24": [60, 175, 245, 259, 260, 264, 288, 303, 326, 356, 444, 446, 462, 477, 478, 482, 489, 495, 497, 619, 658, 662, 664, 666, 668, 670, 673, 675, 677, 716, 789, 790, 792, 793, 794, 837, 838, 850, 891, 895, 896, 917, 969, 1064, 1098, 1103, 1110, 1116, 1170, 1345, 1371, 1394, 1401], "24030": 182, "249": [764, 850], "25": [1, 28, 41, 62, 140, 223, 227, 245, 250, 260, 288, 313, 318, 326, 330, 356, 415, 450, 462, 463, 478, 487, 497, 504, 643, 645, 648, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 757, 791, 792, 793, 794, 800, 808, 809, 812, 837, 838, 850, 877, 880, 891, 896, 904, 917, 936, 938, 969, 975, 1027, 1066, 1067, 1080, 1108, 1122, 1128, 1151, 1237, 1242, 1310, 1371, 1388, 1393, 1399, 1400], "250": [764, 850, 1258, 1371, 1391, 1402], "2500": [258, 318, 356], "254508": [504, 850, 1128, 1371], "255": 1402, "256": [264, 356, 415, 1027, 1237, 1371, 1393], "2560": 1027, "259921": [434, 850, 1049, 1371, 1393], "25_000_000": 1380, "26": [39, 41, 175, 180, 181, 182, 183, 187, 223, 356, 463, 496, 877, 969, 1080], "266667": [223, 356, 877, 969], "27": [1, 62, 313, 349, 356, 445, 473, 479, 496, 748, 775, 850, 959, 975, 1071, 1240, 1349, 1371, 1401, 1402], "270": 1396, "28": [309, 314, 356, 366, 481, 498, 850, 1102, 1119, 1351, 1371, 1394, 1396, 1401, 1402], "283185": [647, 850], "2846": 356, "285714": [533, 850, 1155, 1371], "289962": 1396, "28_341_469": 1380, "29": [17, 175, 455, 474, 1072, 1095], "29096": 1402, "290994": [928, 969], "292432": [987, 1371], "292893": [504, 850, 1128, 1371], "2_color_scal": [41, 356], "2d": [213, 288, 313, 314, 356, 477, 658, 810, 850, 917, 969, 1072, 1079], "2h": [662, 664, 666, 668, 670, 673, 675, 677, 850], "2i": [245, 356, 891, 969], "2m": [975, 1093], "2x": 182, "3": [1, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 53, 58, 59, 60, 61, 62, 66, 67, 85, 97, 104, 107, 109, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 155, 157, 161, 162, 163, 167, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 187, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 366, 367, 368, 369, 371, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 479, 480, 481, 483, 484, 485, 486, 487, 488, 496, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 617, 618, 619, 620, 621, 622, 624, 626, 628, 629, 632, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 691, 692, 693, 696, 697, 699, 700, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 734, 735, 740, 741, 744, 745, 746, 747, 748, 749, 751, 755, 756, 759, 760, 761, 763, 764, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 846, 850, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 945, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 969, 974, 975, 980, 981, 984, 986, 988, 989, 990, 992, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1075, 1076, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1092, 1093, 1094, 1099, 1102, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1114, 1118, 1119, 1121, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1142, 1143, 1145, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1174, 1175, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1288, 1290, 1291, 1292, 1295, 1296, 1297, 1300, 1301, 1302, 1303, 1305, 1306, 1310, 1311, 1312, 1313, 1314, 1318, 1325, 1326, 1331, 1332, 1335, 1337, 1338, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1350, 1351, 1352, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1371, 1376, 1380, 1381, 1383, 1384, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1399, 1400, 1401, 1402], "30": [41, 64, 164, 172, 213, 223, 233, 245, 249, 279, 286, 309, 330, 356, 359, 380, 381, 382, 450, 458, 460, 461, 465, 469, 471, 472, 473, 474, 476, 479, 481, 482, 483, 485, 487, 488, 495, 496, 526, 604, 684, 791, 808, 810, 836, 837, 850, 872, 877, 883, 891, 910, 911, 924, 938, 969, 975, 1067, 1075, 1095, 1102, 1103, 1108, 1109, 1116, 1148, 1371, 1376, 1387, 1388, 1391, 1393, 1394, 1396, 1397, 1400, 1402], "300": [309, 356, 525, 636, 653, 850, 975, 1250, 1257, 1258, 1260, 1371, 1391], "3000": 975, "3002": [457, 470, 1074, 1090], "30103": [592, 850, 1393], "3022416320763508302": [1149, 1371], "30_000": [41, 356], "30m": [245, 356, 482, 495, 891, 969, 1103, 1116], "30t16": 487, "31": [62, 67, 152, 153, 167, 176, 177, 178, 179, 223, 303, 356, 457, 458, 462, 470, 474, 477, 480, 488, 703, 733, 788, 791, 800, 810, 829, 877, 969, 975, 1072, 1074, 1075, 1079, 1090, 1095, 1101, 1108, 1109, 1125, 1249, 1294, 1324, 1371, 1395, 1397, 1399, 1402], "31t06": 1108, "32": [60, 72, 78, 82, 92, 255, 260, 288, 356, 619, 658, 684, 850, 896, 917, 969, 1068, 1099, 1237, 1261, 1371, 1388, 1394], "321": [28, 1402], "3212": [737, 1328], "321cba": 1394, "3265500": 975, "32971": [498, 1119], "32974": [498, 1119], "32976": [498, 1119], "32bit": [313, 356], "33": [223, 272, 356, 678, 850, 877, 907, 969, 1261, 1371, 1395], "333": [17, 679, 850, 1124, 1233, 1267, 1371], "33333": 1397, "333333": [251, 356, 621, 761, 808, 850, 894, 969, 1237, 1265, 1360, 1371, 1388], "34": [223, 356, 719, 733, 877, 969, 1311, 1324], "3420": [737, 1328], "343622": [689, 850], "345": [431, 432, 714, 715, 1044, 1045, 1305, 1306], "3450": [1267, 1371], "3456": 975, "34776706224699483": [1281, 1371], "35": [41, 356, 450, 487, 791, 850, 1067, 1371], "350": [356, 359, 525, 636, 850, 1258, 1371, 1376], "3500": [1267, 1371], "356": [462, 478, 497], "356194": [771, 772, 1396], "357": [462, 478, 497], "358": [462, 478, 497], "359": [462, 478, 497], "36": [223, 356, 877, 969, 1399], "360": [448, 647, 850, 1396], "361": 1402, "363961": [584, 1209], "366": [478, 1099], "37": [13, 143, 975], "370h": [504, 850, 1128, 1371], "37338": 1402, "38": [41, 140, 180, 183, 356], "38180177416060584": [671, 850, 1262, 1371], "381802": [671, 850, 1262, 1371], "386294": [593, 850, 1218, 1371, 1393], "389056": [508, 850, 1131, 1371, 1393], "39": [675, 800, 850], "39m": 975, "3_color_scal": [41, 356], "3d12h4m25": [245, 260, 288, 326, 356, 504, 658, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1128, 1371], "3f": [155, 733, 736, 1324, 1327], "3i": [245, 288, 356, 891, 969], "3rd": [1301, 1325], "3xy": [698, 1289], "4": [1, 8, 10, 14, 18, 26, 36, 38, 40, 41, 43, 44, 47, 58, 59, 60, 61, 62, 66, 67, 85, 107, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 153, 158, 160, 164, 167, 170, 171, 172, 175, 187, 211, 212, 213, 214, 215, 216, 217, 218, 222, 224, 228, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 267, 268, 269, 272, 274, 275, 276, 278, 279, 280, 281, 284, 288, 290, 291, 298, 299, 302, 306, 307, 308, 309, 310, 311, 314, 317, 319, 320, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 370, 372, 384, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 408, 415, 426, 427, 428, 431, 432, 434, 435, 436, 440, 441, 444, 445, 446, 448, 451, 458, 461, 462, 470, 478, 479, 480, 481, 483, 484, 487, 489, 492, 494, 497, 501, 502, 504, 508, 509, 511, 512, 513, 515, 516, 517, 520, 521, 522, 523, 524, 527, 529, 531, 532, 533, 534, 543, 544, 548, 549, 550, 557, 558, 559, 560, 561, 563, 564, 566, 574, 576, 577, 578, 579, 580, 581, 582, 586, 587, 592, 595, 596, 597, 617, 619, 621, 622, 624, 626, 628, 629, 632, 633, 634, 637, 638, 640, 641, 642, 643, 646, 648, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 683, 686, 690, 691, 692, 693, 696, 698, 702, 705, 708, 710, 714, 715, 716, 717, 718, 719, 720, 723, 724, 725, 726, 731, 732, 733, 734, 738, 743, 744, 746, 747, 748, 749, 751, 754, 755, 756, 757, 763, 764, 766, 768, 769, 771, 772, 773, 774, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 797, 798, 802, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 846, 850, 865, 866, 867, 869, 870, 871, 872, 873, 876, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 907, 908, 910, 911, 912, 914, 917, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 941, 942, 945, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 969, 974, 975, 979, 984, 987, 994, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1027, 1038, 1039, 1044, 1045, 1050, 1051, 1053, 1059, 1064, 1066, 1068, 1078, 1082, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1100, 1102, 1105, 1110, 1113, 1115, 1117, 1118, 1125, 1128, 1132, 1133, 1135, 1136, 1142, 1143, 1145, 1150, 1151, 1154, 1155, 1156, 1157, 1161, 1164, 1165, 1166, 1167, 1169, 1175, 1182, 1183, 1184, 1185, 1186, 1191, 1195, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1211, 1212, 1227, 1230, 1231, 1234, 1237, 1238, 1239, 1240, 1244, 1245, 1249, 1250, 1251, 1254, 1255, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1268, 1270, 1274, 1275, 1278, 1281, 1282, 1283, 1287, 1289, 1293, 1296, 1299, 1301, 1305, 1306, 1308, 1309, 1314, 1316, 1317, 1322, 1323, 1324, 1325, 1329, 1334, 1335, 1338, 1340, 1342, 1348, 1351, 1353, 1355, 1356, 1362, 1371, 1376, 1380, 1381, 1383, 1384, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1399, 1400, 1401, 1402], "40": [41, 213, 223, 233, 260, 279, 356, 482, 487, 495, 526, 590, 737, 748, 850, 877, 896, 910, 969, 975, 1085, 1116, 1215, 1328, 1387, 1388, 1391, 1394], "400": [325, 356, 490, 491, 493, 935, 969, 1257, 1258, 1260, 1371, 1391], "4000000": [1126, 1371], "400157": 97, "404": [261, 356, 704, 706, 897, 969, 1295, 1297], "4096": 1393, "41": [223, 356, 675, 850, 877, 969, 1388, 1402], "412277": 183, "414214": [693, 850, 1284, 1371, 1393], "4160": 62, "416147": 1396, "4164": [260, 356, 896, 969], "4180": 152, "42": [62, 143, 223, 246, 272, 288, 356, 487, 658, 850, 877, 907, 917, 969, 1149, 1371, 1387, 1401], "424778": [647, 850], "428571": [503, 850, 1127, 1371], "429101": 1388, "4294967296": [47, 356], "43": [223, 288, 356, 445, 658, 675, 850, 877, 917, 969], "4321": 975, "433013": [672, 850, 928, 969], "44": [11, 272, 356, 451, 850, 907, 969], "4411": [260, 356, 896, 969], "44225": [1049, 1371], "444": 11, "44444444444": 11, "45": [41, 223, 288, 356, 458, 482, 495, 658, 675, 698, 705, 745, 772, 791, 810, 836, 837, 850, 877, 917, 969, 975, 1075, 1103, 1108, 1116, 1289, 1296, 1337, 1393, 1394, 1396, 1400, 1402], "450": [1258, 1371], "45000": 828, "4500000": 975, "456": [9, 11, 458, 975, 1075, 1347, 1371], "456000": [458, 1075], "456001\u00b5": 975, "4566": [260, 356, 896, 969], "456789": [487, 975, 1104], "456789\u00b5": 975, "456m": 975, "457658": 1396, "459148": [500, 850], "46": 975, "4696": [260, 356, 896, 969], "47": [58, 223, 356, 675, 850, 877, 969, 975, 1388], "470": [911, 969], "47033": [671, 850, 1262, 1371], "47033046033698594": [671, 850, 1262, 1371], "475": [911, 969], "48": [13, 183, 288, 356, 658, 748, 850, 917, 969, 975], "4827": [260, 356, 896, 969], "485": 1402, "49": [223, 356, 877, 969, 975], "492474": [504, 850, 1128, 1371], "498": [261, 356, 897, 969], "4_500_000": 975, "4ab4a": 1394, "4d": [504, 850, 1128, 1371], "4f6228": [41, 356], "4f71": [41, 356], "4x": [257, 356], "5": [1, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 36, 38, 40, 43, 44, 47, 53, 58, 59, 61, 62, 66, 107, 133, 136, 137, 138, 139, 140, 142, 153, 175, 176, 178, 181, 183, 187, 212, 213, 216, 217, 218, 223, 224, 227, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 247, 248, 250, 251, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 267, 268, 269, 274, 275, 276, 278, 280, 281, 282, 284, 288, 291, 298, 299, 302, 303, 306, 307, 308, 309, 310, 311, 313, 314, 317, 318, 320, 323, 324, 325, 326, 329, 330, 332, 333, 335, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 366, 367, 370, 385, 386, 391, 392, 393, 395, 397, 401, 406, 408, 414, 415, 426, 427, 428, 431, 432, 435, 436, 446, 447, 448, 450, 451, 454, 457, 458, 459, 460, 461, 465, 466, 469, 470, 471, 472, 476, 481, 483, 484, 485, 487, 488, 494, 498, 502, 504, 506, 507, 510, 512, 516, 517, 521, 522, 524, 527, 529, 532, 534, 537, 540, 541, 542, 543, 544, 548, 550, 557, 560, 561, 563, 564, 566, 569, 571, 572, 576, 577, 578, 579, 580, 581, 585, 586, 590, 596, 617, 619, 621, 633, 637, 638, 639, 640, 641, 642, 643, 645, 646, 648, 652, 653, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 672, 674, 675, 676, 677, 678, 681, 692, 698, 708, 709, 710, 713, 714, 715, 734, 738, 749, 751, 755, 756, 757, 761, 769, 771, 772, 774, 775, 776, 777, 778, 780, 782, 784, 785, 786, 787, 788, 789, 791, 794, 795, 796, 797, 798, 802, 804, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 824, 828, 829, 831, 833, 834, 835, 839, 840, 846, 850, 865, 869, 870, 871, 872, 873, 877, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 904, 905, 911, 914, 917, 923, 924, 925, 926, 927, 928, 929, 930, 934, 935, 937, 938, 941, 942, 945, 947, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 969, 975, 984, 987, 991, 994, 997, 998, 1001, 1003, 1004, 1005, 1007, 1009, 1013, 1018, 1019, 1020, 1026, 1027, 1038, 1039, 1044, 1051, 1053, 1060, 1064, 1065, 1066, 1067, 1068, 1071, 1074, 1075, 1076, 1077, 1078, 1079, 1083, 1090, 1102, 1104, 1105, 1106, 1108, 1109, 1115, 1117, 1118, 1119, 1125, 1128, 1130, 1132, 1133, 1134, 1145, 1150, 1151, 1154, 1156, 1160, 1163, 1175, 1182, 1185, 1186, 1191, 1194, 1197, 1201, 1202, 1203, 1204, 1205, 1206, 1210, 1211, 1215, 1219, 1227, 1234, 1237, 1238, 1239, 1242, 1243, 1244, 1245, 1250, 1251, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1264, 1266, 1268, 1270, 1275, 1281, 1284, 1289, 1299, 1300, 1301, 1304, 1305, 1325, 1329, 1342, 1349, 1351, 1354, 1355, 1356, 1359, 1360, 1362, 1371, 1376, 1381, 1384, 1386, 1388, 1389, 1390, 1393, 1394, 1395, 1396, 1399, 1401, 1402], "50": [13, 28, 41, 213, 223, 233, 243, 356, 436, 482, 487, 495, 789, 790, 850, 877, 969, 975, 1053, 1066, 1116, 1310, 1371, 1387, 1388], "500": [41, 325, 356, 359, 460, 461, 465, 469, 471, 472, 476, 483, 485, 935, 969, 1089, 1091, 1097, 1257, 1258, 1260, 1371, 1376], "5000": [318, 356, 1354, 1371], "50000": 153, "500000": [469, 1089], "500000000": [476, 1097], "5000555": 975, "500_000": [460, 461, 465, 469, 471, 472, 476, 483, 485], "500m": [1089, 1091, 1097], "51": 975, "512": [47, 154, 257, 356, 415, 643, 850, 1027, 1237, 1371], "51966": [738, 1329], "52": [330, 356, 496, 678, 850, 938, 969], "523599": 1396, "527525": [1263, 1371], "53": [496, 1117, 1399], "533316061": 1380, "533_316_061": 1380, "54": [508, 850, 1171, 1371, 1393, 1402], "540": [448, 647, 850], "540302": 1396, "543": 9, "543081": [438, 850, 1056, 1371], "5432": 154, "54321": 9, "544": 1402, "544705": 780, "549306": [991, 1371], "55": [41, 60, 356, 530, 850, 1153, 1371, 1390, 1394, 1395], "5555": 975, "55550": 975, "56": [140, 719, 752, 850, 1311], "566371": [647, 850], "567": 28, "56789": [1050, 1140, 1266, 1371], "57": [675, 850, 1266, 1371, 1396, 1402], "570796": [374, 376, 850, 986, 988, 1371, 1396], "575050513": [180, 183], "58": [148, 280, 356], "581139": [1066, 1371], "584963": [591, 850], "587401": [434, 850, 1393], "59": [140, 223, 356, 458, 472, 480, 483, 487, 517, 791, 836, 837, 838, 850, 877, 969, 975, 1075, 1093, 1101, 1104], "59815": [508, 850, 1393], "5_000_555": 975, "5th": [41, 356], "6": [1, 8, 10, 14, 36, 38, 40, 41, 43, 44, 45, 46, 47, 57, 59, 61, 66, 98, 100, 107, 133, 136, 137, 138, 139, 157, 161, 162, 175, 212, 213, 216, 219, 220, 224, 225, 226, 228, 229, 230, 232, 233, 236, 239, 240, 241, 242, 243, 245, 247, 249, 250, 251, 253, 255, 256, 257, 259, 260, 263, 264, 266, 267, 268, 269, 270, 273, 274, 277, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 299, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 320, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 339, 349, 350, 356, 359, 360, 361, 366, 370, 391, 392, 393, 395, 401, 427, 428, 431, 432, 444, 445, 451, 454, 458, 462, 466, 473, 477, 478, 479, 490, 491, 493, 496, 497, 500, 502, 511, 512, 517, 521, 527, 529, 532, 550, 551, 552, 561, 564, 577, 578, 579, 580, 584, 596, 597, 633, 637, 644, 647, 648, 649, 654, 656, 658, 661, 663, 665, 667, 669, 672, 674, 675, 676, 678, 681, 686, 692, 698, 703, 714, 715, 738, 749, 751, 756, 764, 766, 768, 775, 777, 782, 784, 785, 786, 788, 791, 795, 798, 804, 811, 812, 816, 829, 833, 840, 846, 850, 865, 869, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 887, 888, 889, 891, 892, 894, 895, 896, 898, 900, 901, 909, 911, 913, 914, 915, 917, 918, 919, 921, 923, 924, 925, 926, 927, 930, 933, 934, 937, 938, 941, 942, 949, 959, 960, 969, 975, 1001, 1003, 1004, 1005, 1007, 1013, 1044, 1051, 1055, 1057, 1062, 1063, 1068, 1071, 1083, 1098, 1108, 1118, 1125, 1132, 1145, 1151, 1176, 1177, 1186, 1189, 1202, 1203, 1204, 1205, 1209, 1227, 1241, 1244, 1245, 1251, 1253, 1259, 1261, 1263, 1265, 1270, 1275, 1278, 1289, 1294, 1305, 1329, 1341, 1351, 1371, 1376, 1381, 1384, 1386, 1388, 1389, 1393, 1399, 1400, 1402], "60": [41, 213, 233, 280, 356, 465, 471, 472, 483, 494, 517, 675, 733, 850, 1099, 1104, 1115, 1246, 1324, 1371, 1396], "600": [325, 356, 490, 491, 493, 935, 969, 975], "60000": 469, "600000": 975, "60000000": 476, "60206": [592, 850, 1393], "605551": 831, "605551275463989": 831, "609438": 1393, "60_000": [460, 461, 465, 469, 471, 472, 476, 483, 485], "61": [280, 356], "625": [669, 850], "626172": [700, 1291], "63": [675, 850], "63204": 1402, "6331e16": [1343, 1371, 1396], "636253": 1396, "64": [1, 60, 62, 73, 75, 79, 83, 90, 93, 174, 211, 318, 356, 439, 619, 643, 850, 1237, 1240, 1371, 1393], "64030": [738, 1329], "642093": 1396, "647961": 183, "64bit": [175, 650, 850, 1246, 1371], "65": [227, 356, 880, 969, 1122, 1371], "650": [525, 636, 850], "65280": [738, 1329], "654": [28, 829, 927, 969], "65432": 1397, "654321": 605, "65536": 1393, "65552": [414, 1026], "66": [260, 325, 356, 675, 764, 850, 896, 935, 969, 1171, 1261, 1371], "663053": 140, "666": 975, "666000": 975, "666667": [223, 251, 327, 344, 356, 503, 808, 809, 815, 850, 877, 894, 936, 954, 969, 1127, 1371], "666f6f": [700, 1291], "67500": 828, "676": [261, 356, 897, 969], "678": [698, 705, 1289, 1296], "6789": [29, 975], "67890": 29, "686241": 1388, "69": [675, 850, 1171, 1371], "693147": [593, 850, 1216, 1218, 1371, 1393], "6_000_000": 1380, "7": [1, 17, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 53, 59, 61, 66, 157, 161, 162, 175, 190, 212, 216, 219, 220, 221, 223, 225, 226, 229, 230, 232, 236, 239, 241, 245, 247, 249, 251, 259, 263, 266, 268, 270, 272, 273, 277, 280, 282, 285, 286, 288, 289, 291, 292, 293, 294, 296, 299, 301, 304, 305, 306, 307, 312, 314, 315, 316, 324, 326, 327, 328, 356, 359, 360, 366, 370, 392, 393, 395, 404, 445, 457, 458, 462, 470, 478, 481, 482, 487, 495, 497, 508, 521, 527, 532, 533, 550, 564, 577, 578, 579, 580, 637, 638, 648, 654, 658, 674, 675, 692, 708, 737, 751, 775, 784, 785, 788, 791, 792, 798, 803, 811, 812, 829, 833, 840, 850, 869, 874, 875, 877, 879, 882, 884, 887, 889, 891, 892, 894, 895, 900, 907, 909, 912, 915, 917, 918, 919, 923, 927, 930, 969, 975, 991, 1004, 1005, 1007, 1016, 1074, 1075, 1079, 1085, 1090, 1102, 1103, 1108, 1116, 1118, 1131, 1155, 1170, 1189, 1202, 1203, 1204, 1205, 1250, 1251, 1264, 1270, 1299, 1328, 1371, 1376, 1381, 1386, 1388, 1389, 1390, 1393, 1395, 1399, 1402], "70": [223, 356, 764, 792, 850, 877, 969, 1171, 1371, 1388], "700": [325, 356, 935, 969], "702963": [41, 356], "7051579356916758811": 169, "707107": [403, 505, 672, 673, 771, 850, 1015, 1129, 1371, 1396], "712389": 1396, "714": 1402, "714286": [533, 850, 1155, 1371], "718281828459045": [11, 500, 591, 850, 1122, 1216, 1371], "718282": [508, 850, 1131, 1371, 1393], "720": [448, 647, 850], "7264": 1402, "732051": [1284, 1371], "7415e16": 183, "742": [261, 356, 897, 969], "75": [41, 223, 227, 356, 370, 637, 645, 648, 661, 663, 665, 667, 672, 674, 676, 808, 812, 850, 877, 880, 969, 975, 1066, 1151, 1171, 1242, 1310, 1371, 1388, 1396, 1402], "7500": [258, 356], "7508": 1402, "754": [757, 850], "754888": [500, 850], "761594": [753, 850, 1344, 1371], "764052": 97, "7654": 975, "765431": 1104, "7654321": 28, "76933c": [41, 356], "77": 1108, "78": [9, 148, 719, 1311], "780": 9, "784": [260, 356, 896, 969], "785398": [378, 771, 772, 850, 990, 1371, 1396], "789": [11, 975], "79": [1171, 1371], "7d": 975, "8": [1, 12, 36, 38, 40, 43, 44, 45, 46, 47, 49, 58, 59, 61, 62, 66, 84, 88, 94, 161, 162, 175, 212, 216, 219, 220, 221, 223, 225, 226, 228, 229, 230, 232, 236, 239, 241, 243, 247, 249, 256, 259, 260, 261, 263, 264, 266, 268, 270, 273, 282, 285, 286, 288, 289, 291, 292, 293, 294, 296, 299, 301, 303, 304, 305, 307, 312, 314, 315, 316, 324, 327, 328, 330, 356, 370, 372, 384, 392, 393, 395, 442, 445, 446, 458, 487, 521, 528, 532, 533, 558, 560, 564, 577, 578, 579, 580, 619, 637, 638, 643, 648, 654, 655, 660, 678, 684, 690, 692, 716, 717, 718, 733, 764, 769, 775, 780, 782, 785, 787, 795, 797, 802, 803, 806, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 829, 831, 834, 835, 839, 850, 869, 874, 875, 877, 879, 881, 882, 884, 887, 889, 892, 895, 896, 897, 900, 901, 911, 915, 918, 919, 923, 927, 930, 938, 969, 975, 1004, 1005, 1007, 1057, 1064, 1085, 1151, 1155, 1170, 1183, 1185, 1189, 1202, 1203, 1204, 1205, 1237, 1240, 1251, 1254, 1256, 1259, 1261, 1263, 1265, 1266, 1308, 1309, 1324, 1371, 1380, 1381, 1386, 1388, 1389, 1390, 1393, 1394, 1395, 1399, 1402], "80": [41, 227, 356, 880, 969], "800": [490, 491, 493, 1108], "8000": 154, "803065983": 140, "81": 1393, "814697265625": [1126, 1371], "816497": [304, 356], "8192": 152, "82": [260, 356, 896, 969], "8257e14": 1402, "83": [260, 356, 896, 969], "833": [260, 356, 896, 969], "833333": [344, 954], "848062": 1396, "848808": 183, "85": [41, 148, 356, 1171, 1371, 1402], "850": [525, 636, 850], "8568409950394724": [1122, 1371], "8589934592": [684, 850], "86": 1402, "8601": 1394, "87": 1402, "876": 9, "877809": 1388, "88": [223, 356, 877, 969], "881374": [377, 850, 989, 1371], "888": [829, 927, 969], "8_000_000": 1380, "8a": [1023, 1024], "8nin": 1402, "9": [1, 9, 36, 38, 40, 41, 43, 44, 47, 52, 53, 58, 66, 212, 221, 223, 236, 238, 247, 251, 259, 261, 263, 264, 280, 288, 290, 291, 294, 306, 307, 324, 328, 330, 349, 356, 366, 370, 372, 384, 392, 393, 395, 400, 402, 442, 445, 448, 458, 487, 513, 521, 532, 538, 558, 564, 575, 583, 621, 637, 638, 647, 654, 658, 659, 660, 671, 674, 675, 686, 690, 705, 737, 745, 748, 778, 784, 785, 788, 791, 803, 838, 850, 877, 887, 892, 894, 895, 897, 900, 917, 919, 930, 938, 959, 969, 975, 999, 1000, 1004, 1005, 1007, 1012, 1014, 1066, 1079, 1089, 1091, 1097, 1103, 1116, 1117, 1161, 1170, 1183, 1189, 1200, 1208, 1251, 1255, 1256, 1262, 1264, 1266, 1278, 1296, 1328, 1337, 1371, 1380, 1381, 1386, 1388, 1389, 1390, 1399], "90": [223, 261, 356, 737, 877, 897, 969, 1328, 1388, 1396], "90000": 828, "901234": [1050, 1140, 1266, 1371], "909": [260, 356, 896, 969], "910": [260, 356, 705, 896, 969, 1296], "910t": [698, 705, 1289, 1296], "914": [260, 356, 896, 969], "9223372036854775807": [760, 850], "9223372036854775808": [594, 850], "927295": 1396, "928571": [506, 850, 1130, 1371], "93": [1171, 1371], "94": [367, 850], "9477376373212048": [1171, 1371], "95": [18, 367, 850, 975], "95b3d7": [41, 356], "96": [18, 223, 356, 367, 850, 877, 969, 1171, 1371], "961": 62, "963624": [505, 850, 1129, 1371], "964028": [280, 356], "96_067_179": 1380, "97": [18, 250, 356, 367, 850, 1171, 1371], "9774092659964970114": [526, 850], "978307200": [464, 1081], "978307200000": 486, "978307200000000": [464, 486, 1081, 1107], "978307200000000000": 1107, "978393600": [464, 1081], "978393600000": 486, "978393600000000": [464, 486, 1081, 1107], "978393600000000000": 1107, "978480000": [464, 1081], "978480000000": 486, "978480000000000": [464, 486, 1081, 1107], "978480000000000000": 1107, "978738": 97, "98": [18, 250, 280, 356, 426, 520, 523, 691, 737, 755, 850, 1328], "987": [28, 605], "987000": 975, "9876": 9, "987654": [28, 975], "987654321": 11, "9876543210": 140, "987m": 975, "988": 11, "99": [18, 41, 234, 235, 250, 253, 280, 325, 356, 367, 426, 510, 512, 520, 523, 691, 755, 850, 885, 886, 935, 969, 1108, 1122, 1134, 1371, 1393], "9914e218": 183, "998347": [280, 356], "999": [457, 470, 975, 1074, 1090, 1391, 1402], "999000": 975, "999954": [280, 356], "999999": [480, 743, 791, 836, 837, 838, 975, 1101, 1108, 1334], "999999\u00b5": 975, "9bbb59": [41, 356], "A": [14, 38, 41, 47, 49, 52, 53, 54, 55, 64, 65, 70, 76, 132, 140, 145, 147, 152, 153, 154, 155, 167, 169, 174, 189, 220, 227, 228, 229, 234, 235, 238, 245, 260, 265, 267, 269, 274, 280, 306, 309, 324, 325, 326, 330, 331, 356, 361, 365, 432, 452, 453, 458, 484, 487, 501, 502, 510, 511, 512, 522, 524, 536, 539, 541, 542, 548, 588, 595, 596, 609, 623, 632, 633, 655, 661, 663, 665, 667, 669, 672, 674, 676, 696, 697, 698, 704, 705, 706, 707, 708, 709, 710, 713, 715, 719, 720, 721, 723, 734, 743, 778, 794, 795, 799, 850, 875, 880, 881, 882, 885, 886, 891, 896, 902, 915, 935, 938, 939, 969, 975, 1045, 1069, 1070, 1075, 1105, 1108, 1124, 1134, 1135, 1136, 1233, 1257, 1258, 1260, 1263, 1264, 1265, 1287, 1288, 1289, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1304, 1306, 1310, 1311, 1312, 1314, 1325, 1334, 1371, 1380, 1381, 1384, 1397, 1399], "AND": [765, 766, 829, 975, 1390], "ANDs": [417, 850, 1029, 1371], "AS": [303, 356, 829, 830, 927, 969, 1380, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1399, 1401], "And": [741, 1332], "As": [13, 57, 98, 100, 133, 135, 136, 137, 139, 157, 161, 162, 171, 236, 284, 313, 318, 356, 588, 840, 887, 914, 969], "At": [47, 49, 50, 51, 52, 64, 65, 280, 356, 872, 873, 883, 911, 924, 969], "BY": [829, 927, 969, 1380, 1383, 1389, 1398, 1399], "Be": 969, "By": [5, 13, 15, 31, 34, 58, 152, 153, 167, 245, 259, 260, 265, 288, 290, 299, 304, 326, 327, 356, 401, 477, 482, 495, 581, 584, 590, 638, 653, 658, 662, 664, 666, 668, 670, 673, 675, 677, 683, 694, 762, 782, 789, 790, 792, 793, 794, 810, 831, 837, 838, 839, 850, 872, 891, 895, 896, 902, 917, 923, 928, 936, 969, 1013, 1098, 1103, 1116, 1206, 1250, 1274, 1285, 1361, 1371], "For": [15, 40, 41, 53, 54, 55, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 213, 227, 228, 231, 233, 259, 260, 280, 288, 313, 342, 356, 359, 474, 475, 487, 503, 505, 506, 517, 588, 597, 609, 650, 689, 696, 704, 705, 706, 708, 710, 734, 784, 794, 798, 799, 840, 846, 850, 880, 881, 896, 917, 952, 969, 1108, 1126, 1127, 1129, 1130, 1133, 1221, 1246, 1281, 1287, 1295, 1296, 1297, 1299, 1301, 1325, 1349, 1371, 1376], "IF": 1392, "If": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 63, 64, 65, 74, 133, 134, 135, 136, 137, 138, 139, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 184, 185, 186, 197, 211, 213, 216, 228, 233, 236, 243, 245, 247, 255, 256, 257, 259, 260, 263, 264, 269, 276, 280, 284, 288, 290, 291, 292, 296, 299, 301, 303, 306, 307, 310, 311, 313, 314, 320, 321, 323, 324, 325, 356, 359, 369, 371, 389, 394, 401, 406, 414, 428, 454, 458, 459, 466, 474, 475, 484, 487, 513, 528, 534, 538, 546, 551, 552, 556, 567, 576, 581, 582, 585, 588, 596, 597, 604, 605, 611, 613, 638, 643, 644, 645, 648, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 683, 685, 689, 690, 695, 705, 706, 708, 710, 711, 712, 723, 724, 725, 726, 728, 729, 730, 733, 734, 735, 736, 740, 743, 750, 761, 765, 767, 770, 774, 775, 776, 779, 780, 782, 784, 789, 790, 792, 793, 794, 797, 798, 804, 805, 806, 808, 809, 810, 812, 816, 822, 825, 826, 827, 832, 833, 834, 837, 838, 840, 841, 850, 872, 873, 883, 887, 891, 895, 896, 901, 906, 911, 913, 914, 915, 917, 921, 923, 924, 925, 927, 932, 934, 935, 944, 952, 962, 969, 974, 975, 982, 983, 997, 998, 1001, 1006, 1013, 1016, 1018, 1026, 1040, 1053, 1071, 1075, 1076, 1083, 1095, 1096, 1105, 1108, 1133, 1150, 1151, 1156, 1161, 1170, 1171, 1175, 1176, 1177, 1181, 1192, 1201, 1206, 1207, 1210, 1213, 1221, 1240, 1241, 1242, 1244, 1246, 1249, 1250, 1251, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1268, 1270, 1272, 1274, 1277, 1281, 1282, 1286, 1296, 1297, 1299, 1301, 1302, 1303, 1310, 1314, 1315, 1316, 1317, 1319, 1320, 1321, 1324, 1325, 1326, 1327, 1331, 1334, 1341, 1342, 1345, 1349, 1351, 1360, 1371, 1376, 1380, 1381, 1383, 1391, 1394, 1399], "In": [58, 65, 154, 156, 168, 169, 172, 183, 187, 207, 212, 231, 233, 236, 245, 260, 261, 264, 276, 280, 288, 314, 323, 356, 359, 596, 597, 638, 658, 719, 720, 840, 850, 873, 891, 896, 897, 917, 934, 969, 1126, 1133, 1240, 1245, 1311, 1371, 1376], "It": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 74, 80, 97, 99, 100, 132, 143, 144, 145, 146, 147, 148, 156, 162, 164, 165, 167, 168, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 209, 223, 261, 265, 272, 279, 303, 313, 318, 325, 333, 342, 356, 359, 360, 361, 446, 447, 454, 466, 528, 588, 597, 608, 645, 659, 660, 662, 664, 666, 668, 670, 671, 673, 675, 677, 775, 777, 808, 809, 840, 846, 850, 868, 872, 873, 877, 883, 897, 901, 902, 907, 911, 927, 935, 942, 943, 952, 969, 977, 1048, 1064, 1065, 1071, 1083, 1151, 1242, 1255, 1256, 1259, 1261, 1262, 1269, 1271, 1349, 1354, 1371, 1376], "Its": [246, 356, 526, 850, 1149, 1371], "NO": 975, "NOT": [136, 256, 297, 356, 588, 607, 682, 850, 922, 969, 1399], "No": [21, 259, 272, 356, 840, 895, 907, 969], "Not": [213, 259, 356, 541, 542, 850, 872, 883, 895, 911, 924, 969], "ON": 1399, "OR": [767, 768, 887, 969, 975, 1390], "ORs": [422, 850, 1034, 1371], "On": [757, 850, 899, 969], "One": [58, 223, 259, 276, 313, 318, 356, 370, 637, 769, 781, 797, 803, 806, 815, 817, 820, 821, 830, 850, 877, 895, 969, 975, 1066, 1371], "Or": [244, 245, 260, 288, 302, 326, 335, 356, 359, 504, 658, 692, 789, 790, 792, 793, 837, 838, 846, 850, 890, 891, 896, 917, 926, 945, 969, 1128, 1371], "That": [158, 901, 969], "The": [10, 21, 34, 38, 39, 40, 41, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 67, 72, 73, 75, 76, 77, 85, 89, 90, 97, 100, 101, 103, 132, 133, 135, 136, 137, 139, 140, 147, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 183, 184, 185, 187, 189, 197, 213, 215, 223, 224, 226, 227, 228, 229, 232, 233, 236, 243, 244, 245, 246, 251, 257, 259, 260, 261, 264, 272, 278, 280, 284, 288, 289, 290, 291, 294, 295, 296, 303, 308, 313, 314, 319, 322, 326, 330, 331, 333, 334, 335, 342, 356, 368, 409, 410, 411, 412, 426, 427, 446, 447, 449, 452, 453, 454, 462, 466, 473, 477, 478, 482, 484, 487, 495, 496, 503, 505, 506, 507, 510, 513, 517, 518, 526, 559, 563, 596, 597, 611, 638, 645, 648, 651, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 689, 695, 699, 700, 704, 709, 710, 711, 712, 717, 718, 719, 720, 728, 729, 730, 731, 732, 733, 734, 744, 748, 754, 755, 756, 775, 778, 796, 800, 809, 810, 812, 826, 827, 828, 829, 832, 840, 842, 843, 845, 846, 850, 851, 852, 855, 857, 858, 859, 867, 872, 873, 877, 878, 880, 881, 883, 884, 887, 890, 891, 894, 895, 896, 897, 901, 907, 911, 914, 917, 919, 920, 921, 924, 927, 931, 933, 938, 939, 942, 943, 945, 952, 969, 973, 974, 975, 981, 984, 1021, 1022, 1023, 1024, 1038, 1039, 1052, 1064, 1065, 1066, 1069, 1070, 1071, 1079, 1083, 1094, 1098, 1099, 1103, 1105, 1108, 1116, 1117, 1125, 1127, 1129, 1130, 1133, 1134, 1137, 1141, 1149, 1184, 1188, 1221, 1240, 1242, 1244, 1248, 1249, 1250, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1278, 1281, 1286, 1290, 1291, 1300, 1301, 1302, 1303, 1308, 1309, 1310, 1311, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1345, 1351, 1353, 1355, 1356, 1363, 1365, 1367, 1371, 1372, 1377, 1378, 1379, 1380, 1385, 1399, 1400, 1402], "Then": 172, "There": 1399, "These": [1, 33, 41, 142, 149, 154, 155, 207, 320, 356, 849, 850], "To": [40, 65, 227, 228, 234, 235, 356, 436, 452, 453, 511, 512, 696, 703, 704, 705, 708, 719, 720, 729, 730, 731, 732, 741, 850, 880, 881, 885, 886, 969, 1053, 1069, 1070, 1135, 1136, 1287, 1294, 1295, 1296, 1299, 1310, 1311, 1332, 1351, 1371, 1399], "Will": [64, 872, 883, 911, 924, 969, 1371], "With": [161, 255, 299, 356, 401, 581, 683, 850, 872, 923, 969, 1013, 1170, 1206, 1274, 1371], "_": [1, 58, 62, 207, 280, 311, 315, 356, 394, 431, 432, 567, 697, 705, 707, 709, 714, 715, 721, 724, 725, 1044, 1045, 1047, 1288, 1296, 1300, 1305, 1306, 1312, 1316, 1346, 1371], "__array_ufunc__": 977, "__call__": 846, "__enter__": 1399, "__exit__": 1399, "__getattr__": 846, "__getitem__": 744, "__init__": [1, 32, 33, 34, 35, 53, 54, 55, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 143, 144, 145, 146, 180, 192, 198, 199, 201, 202, 943, 944, 1399], "__name__": [258, 356], "_auto_init_unhandled_kei": 33, "_awai": [678, 850], "_bar_": 799, "_btm_by_a": [427, 850], "_btm_by_b": [427, 850], "_by_ca": [427, 756, 850], "_by_cb": [427, 756, 850], "_check_ord": [924, 969], "_deletion_fil": 172, "_df": [1, 59], "_diff": [330, 356, 938, 969], "_eager": 588, "_expr": [1, 60], "_foo": 602, "_geventdataframeresult": [65, 873, 969], "_internal_cal": 56, "_is_not_nan": [542, 850], "_is_odd": [294, 356, 919, 969], "_isnan": [541, 850], "_isnul": [544, 850], "_kwarg": [872, 911, 969], "_ldf": 1, "_lf": 61, "_lower_boundari": [245, 356, 891, 969], "_mean_squar": [335, 945], "_not_nul": [543, 850], "_o": [431, 432, 714, 715, 1044, 1045, 1305, 1306], "_revers": [622, 626, 655, 850], "_right": [259, 260, 261, 356, 895, 896, 897, 969], "_storage_account": 34, "_storage_options_has_endpoint_url": 33, "_suffix": 627, "_sum": [335, 945], "_to_even": [678, 850], "_top_by_a": [756, 850], "_top_by_b": [756, 850], "_train": [940, 969], "_type": [913, 969], "_type_check": [924, 969], "_upper_boundari": [245, 356, 891, 969], "_world": 799, "a1": [41, 59, 61, 356], "a101": 1402, "a123": [41, 356], "a2": [41, 59, 61, 356], "a_1": [725, 1316, 1346, 1371], "a_2": [1346, 1371], "a_3": [1346, 1371], "a_a": 830, "a_agg_list": [245, 356, 891, 969], "a_b_doubl": 795, "a_btm_by_a": [427, 850], "a_btm_by_b": [427, 850], "a_by_ca": [427, 756, 850], "a_by_cb": [427, 756, 850], "a_div_2": 1393, "a_div_5": 1393, "a_interpol": [533, 850], "a_is_even": [303, 356, 829, 927, 969], "a_isnul": [544, 850], "a_lag_": 778, "a_log2": 1393, "a_mod_2": 1393, "a_not_nul": [543, 850], "a_revers": [622, 626, 655, 850], "a_rol": 778, "a_suffix": 627, "a_times_2": [597, 850], "a_times_b": [596, 850], "a_top_by_a": [756, 850], "a_top_by_b": [756, 850], "a_txt": 830, "aa": [507, 696, 708, 796, 850, 975, 1066, 1287, 1299, 1371, 1394], "aaa": [1, 41, 356, 696, 708, 744, 746, 747, 975, 1287, 1299], "aaaa": [1023, 1024], "aabcdef": 730, "aad": [1023, 1024], "aag": 27, "aazz": 1394, "ab": [247, 263, 307, 330, 356, 720, 744, 746, 747, 850, 938, 969, 975, 1150, 1175, 1342, 1371, 1392, 1394], "ab12": 720, "ab12cd34ef": 720, "abc": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 366, 702, 705, 719, 729, 850, 975, 1293, 1296, 1310, 1311, 1394], "abc123": 1394, "abc456": [719, 1310, 1311, 1394], "abcabc": 720, "abcd": 1394, "abcdeff": 729, "abf": [156, 168, 169], "abl": [107, 154, 588], "about": [53, 54, 55, 107, 147, 149, 154, 689, 696, 704, 705, 708, 719, 720, 850, 1281, 1287, 1295, 1296, 1299, 1310, 1311, 1371, 1402], "abov": [41, 213, 260, 280, 356, 359, 896, 969], "abs_a": 1393, "absolut": [149, 156, 168, 169, 176, 177, 178, 179, 365, 503, 505, 506, 850, 980, 1127, 1129, 1130, 1371, 1393], "acc": [784, 785, 798, 824], "accent": 975, "accept": [38, 43, 47, 49, 50, 51, 52, 55, 147, 149, 150, 152, 153, 156, 158, 160, 162, 164, 167, 170, 171, 172, 183, 197, 215, 225, 244, 294, 295, 299, 302, 319, 330, 331, 335, 356, 366, 427, 436, 507, 534, 638, 652, 653, 692, 721, 748, 756, 764, 766, 768, 773, 776, 777, 778, 779, 787, 796, 814, 816, 819, 828, 832, 834, 840, 846, 850, 867, 879, 890, 919, 920, 923, 926, 931, 938, 939, 945, 969, 974, 1039, 1053, 1156, 1240, 1249, 1250, 1274, 1312, 1356, 1371], "access": [38, 43, 47, 49, 50, 51, 52, 59, 60, 61, 62, 158, 162, 164, 167, 169, 170, 171, 172, 197, 211, 219, 257, 280, 289, 290, 303, 356, 706, 744, 874, 927, 940, 969, 974, 1297, 1402], "accord": [289, 356, 645, 789, 790, 792, 793, 837, 838, 850, 1085, 1242, 1371], "accordingli": [147, 150, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166], "account": [41, 140, 155, 169, 356, 477, 503, 505, 506, 850, 1098, 1127, 1129, 1130, 1371], "accumul": [784, 785, 798, 824], "acg": 27, "achiev": [264, 280, 342, 356, 432, 597, 715, 850, 1045, 1221, 1306, 1371], "aco": 1392, "acosd": 1392, "across": [41, 58, 155, 157, 224, 246, 259, 267, 269, 274, 296, 306, 356, 449, 526, 611, 766, 768, 784, 785, 787, 814, 816, 819, 834, 850, 878, 895, 921, 969, 1149, 1371], "action": [40, 356], "activ": [7, 8, 19, 20, 22, 23, 24, 25, 29, 30, 560, 705, 1185, 1296], "actual": [41, 136, 183, 187, 291, 356, 1276, 1371, 1394, 1401], "ad": [39, 41, 136, 157, 245, 265, 303, 313, 318, 320, 325, 330, 331, 356, 372, 487, 510, 604, 605, 748, 784, 785, 829, 850, 891, 902, 927, 935, 938, 939, 969, 975, 1108, 1134, 1349, 1354, 1371], "adbc": [39, 154, 155, 356], "adbc_driver_manag": 175, "adbc_ingest": [39, 356], "add": [40, 41, 42, 47, 52, 153, 213, 233, 245, 264, 330, 331, 332, 333, 356, 359, 447, 624, 625, 626, 627, 645, 748, 794, 798, 840, 850, 891, 895, 938, 939, 940, 941, 942, 969, 1133, 1371, 1376], "add_calendar_dai": 794, "add_calendar_month": 794, "add_calendar_year": 794, "add_chart": [41, 356], "add_dai": 794, "add_format": [41, 356], "add_hour": 794, "add_milli": 794, "add_second": 794, "add_seri": [41, 356], "add_week": 794, "add_worksheet": [41, 356], "addit": [30, 37, 39, 40, 41, 136, 151, 156, 157, 168, 169, 181, 183, 185, 187, 197, 228, 232, 244, 262, 265, 278, 294, 295, 302, 315, 322, 330, 331, 335, 356, 366, 463, 507, 510, 638, 692, 696, 704, 705, 708, 719, 720, 744, 748, 773, 776, 777, 778, 779, 796, 828, 829, 832, 846, 850, 884, 890, 902, 919, 920, 926, 933, 938, 939, 945, 969, 975, 1072, 1080, 1134, 1287, 1295, 1296, 1299, 1310, 1311, 1352, 1371, 1381, 1399], "addition": [66, 157, 289, 356, 975], "address": 705, "adjac": [41, 356], "adjust": [503, 505, 506, 689, 850, 1127, 1129, 1130, 1281, 1371], "adl": [156, 168, 169], "adlf": 169, "advanc": [41, 280, 356, 406, 588, 621, 624, 626, 628, 629, 1018, 1213, 1402], "advantag": [41, 207, 279, 356], "advis": [41, 57, 100, 356], "aedt": 791, "aeiuo": [708, 1299], "af1": 58, "af2": 58, "af3": 58, "affect": [39, 176, 177, 178, 179, 356], "afm": 169, "afoo": [940, 969], "after": [41, 136, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 215, 216, 233, 319, 322, 356, 426, 427, 428, 454, 507, 638, 648, 743, 755, 756, 775, 850, 867, 931, 933, 969, 1038, 1039, 1071, 1133, 1244, 1334, 1355, 1356, 1371, 1386], "afterward": [57, 840], "ag": [272, 356, 907, 969, 1400], "again": [597, 850], "against": [39, 109, 152, 154, 236, 284, 303, 356, 560, 708, 829, 887, 914, 927, 969, 1185, 1299, 1380, 1399, 1401, 1402], "agg": [244, 245, 280, 288, 356, 367, 417, 422, 425, 427, 513, 515, 520, 523, 596, 597, 638, 691, 692, 756, 763, 789, 792, 812, 850, 872, 873, 883, 890, 891, 911, 913, 917, 924, 969, 975], "agg_group": [801, 850], "agg_list": [596, 850], "aggreg": [149, 152, 153, 156, 164, 168, 238, 244, 245, 266, 268, 270, 273, 276, 280, 281, 282, 288, 304, 305, 324, 327, 335, 336, 338, 340, 356, 367, 417, 422, 425, 513, 529, 596, 597, 638, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 765, 766, 767, 768, 784, 785, 786, 787, 798, 803, 813, 814, 816, 818, 819, 824, 833, 834, 850, 891, 901, 903, 904, 905, 908, 909, 912, 917, 928, 929, 936, 945, 946, 948, 950, 969, 1029, 1034, 1037, 1152, 1256, 1257, 1258, 1260, 1263, 1264, 1265, 1371, 1387, 1389, 1392, 1398], "aggregate_funct": [280, 356, 975], "aho": [697, 707, 709, 721, 1288, 1298, 1300, 1312], "aiosqlit": 154, "alchemy_conn": 154, "algorithm": [214, 356, 373, 697, 707, 709, 721, 769, 850, 866, 969, 985, 1288, 1298, 1300, 1312, 1371], "alia": [1, 13, 58, 60, 62, 66, 96, 200, 204, 219, 245, 250, 263, 280, 288, 322, 330, 333, 356, 359, 366, 370, 409, 410, 411, 412, 413, 416, 426, 429, 431, 432, 433, 441, 442, 443, 444, 445, 447, 450, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 494, 495, 496, 497, 498, 501, 502, 515, 517, 518, 522, 524, 530, 531, 534, 537, 540, 548, 550, 572, 584, 590, 595, 597, 601, 604, 605, 607, 614, 617, 619, 621, 632, 633, 637, 639, 643, 645, 648, 650, 679, 681, 696, 697, 698, 699, 701, 702, 704, 705, 707, 708, 709, 710, 714, 715, 721, 722, 723, 724, 725, 726, 727, 731, 732, 734, 744, 745, 746, 747, 749, 754, 755, 757, 763, 764, 770, 771, 772, 776, 777, 778, 779, 789, 792, 794, 795, 798, 799, 804, 807, 808, 811, 812, 824, 828, 832, 837, 840, 850, 891, 893, 900, 917, 933, 938, 942, 969, 1021, 1065, 1072, 1073, 1076, 1079, 1080, 1081, 1082, 1088, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1105, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1141, 1175, 1242, 1247, 1295, 1296, 1300, 1311, 1316, 1317, 1371], "alias": [303, 356, 604, 605, 927, 969], "alic": [152, 1400], "align": [11, 16, 17, 41, 58, 66, 356, 1400], "align_fram": 66, "align_ful": 66, "align_inn": 66, "align_left": 66, "align_right": 66, "all": [1, 4, 5, 8, 14, 18, 21, 26, 31, 38, 40, 41, 47, 49, 50, 51, 52, 53, 54, 55, 58, 64, 71, 118, 120, 133, 134, 138, 148, 152, 153, 156, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 180, 181, 184, 187, 207, 212, 214, 216, 223, 225, 227, 228, 235, 247, 252, 254, 256, 257, 258, 259, 261, 262, 263, 269, 271, 275, 276, 280, 283, 285, 289, 290, 291, 295, 301, 302, 306, 307, 311, 313, 314, 318, 321, 323, 324, 325, 326, 331, 333, 356, 359, 370, 372, 394, 427, 440, 446, 452, 453, 454, 455, 466, 487, 495, 507, 512, 525, 526, 529, 532, 536, 539, 543, 544, 549, 559, 560, 567, 585, 588, 596, 618, 621, 622, 624, 625, 626, 627, 628, 629, 636, 638, 648, 653, 655, 660, 678, 684, 690, 692, 698, 702, 705, 706, 710, 713, 716, 720, 728, 729, 730, 734, 756, 766, 775, 777, 784, 785, 786, 787, 796, 798, 803, 804, 807, 816, 824, 832, 833, 834, 840, 846, 850, 856, 862, 865, 866, 869, 872, 873, 877, 879, 880, 881, 883, 886, 895, 897, 901, 906, 911, 915, 920, 924, 925, 926, 932, 934, 935, 939, 940, 942, 969, 975, 1006, 1064, 1066, 1069, 1070, 1071, 1072, 1083, 1108, 1116, 1150, 1157, 1169, 1175, 1184, 1185, 1192, 1210, 1213, 1244, 1250, 1256, 1282, 1289, 1293, 1296, 1297, 1300, 1301, 1304, 1311, 1319, 1320, 1321, 1325, 1342, 1351, 1371, 1375, 1376, 1381, 1383, 1388, 1389, 1394, 1398, 1399, 1401, 1402], "all_compat": 1383, "all_data": 1399, "all_horizont": [227, 228, 356, 765, 840, 880, 881, 969], "all_stat": 31, "alloc": [149, 152, 153, 231, 283, 356, 850, 944, 1126, 1371], "allow": [1, 8, 40, 41, 49, 50, 51, 52, 56, 57, 66, 100, 109, 134, 154, 157, 167, 169, 170, 171, 172, 173, 180, 183, 184, 187, 207, 211, 257, 260, 262, 265, 289, 290, 292, 314, 315, 318, 321, 334, 356, 361, 429, 433, 477, 484, 487, 576, 596, 597, 604, 605, 650, 680, 733, 735, 736, 850, 895, 896, 901, 902, 906, 913, 932, 940, 969, 973, 975, 1098, 1105, 1108, 1201, 1221, 1246, 1268, 1324, 1326, 1327, 1351, 1352, 1371, 1394, 1402], "allow_alias": [604, 605], "allow_chunk": [183, 187], "allow_copi": [134, 211, 314, 356, 1351, 1371], "allow_dupl": [645, 850, 1242, 1371], "allow_exact_match": [260, 356, 896, 969], "allow_infin": [183, 187], "allow_masked_out": [183, 187], "allow_missing_column": [164, 172], "allow_nul": [180, 183, 187, 1402], "allow_object": 810, "allow_parallel": [260, 356, 895, 896, 969], "allow_pyarrow_filt": 173, "allow_time_zon": [183, 184, 187], "allowed_dtyp": [183, 184, 187, 1402], "almost": [65, 264, 342, 356, 733, 735, 736, 873, 969, 973, 1221, 1324, 1326, 1327, 1371], "along": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 969], "alpha": [503, 505, 506, 850, 975, 1127, 1129, 1130, 1371], "alpha_i": [504, 850, 1128, 1371], "alphabet": [975, 1402], "alphanumer": [741, 975, 1332], "alreadi": [39, 40, 108, 313, 356, 560, 612, 761, 850, 924, 969, 1064, 1185, 1360, 1371], "also": [28, 38, 41, 49, 50, 51, 52, 57, 64, 65, 136, 140, 154, 157, 158, 163, 164, 167, 172, 182, 183, 186, 187, 192, 201, 207, 229, 244, 245, 265, 272, 276, 280, 288, 290, 294, 302, 313, 325, 330, 333, 356, 442, 445, 454, 466, 477, 481, 487, 513, 534, 597, 604, 605, 638, 648, 652, 653, 678, 692, 719, 720, 721, 728, 729, 744, 775, 784, 785, 788, 791, 798, 800, 824, 840, 849, 850, 856, 872, 873, 883, 890, 891, 902, 907, 911, 917, 919, 924, 926, 935, 938, 940, 942, 969, 975, 1071, 1083, 1102, 1156, 1244, 1249, 1250, 1266, 1289, 1310, 1311, 1312, 1319, 1371, 1375, 1381, 1383, 1386, 1390, 1394, 1397, 1399, 1400], "alt": [356, 359, 1371, 1376], "altair": [175, 356, 359, 1371, 1376], "altern": [41, 192, 356, 846, 1391], "although": [303, 356, 927, 969], "alwai": [14, 38, 40, 49, 55, 74, 80, 152, 158, 162, 164, 215, 244, 259, 260, 264, 319, 342, 356, 426, 427, 596, 608, 733, 755, 756, 840, 850, 867, 895, 896, 901, 931, 969, 975, 1038, 1039, 1221, 1324, 1355, 1356, 1371, 1380, 1381, 1399, 1402], "am": [722, 1313], "amarillo": 1394, "amaz": [356, 359, 1371, 1376], "amazonaw": 33, "ambigu": [480, 481, 482, 495, 733, 736, 791, 1101, 1102, 1103, 1116, 1324, 1327], "america": 792, "amount": [53, 57, 75, 100, 162, 167, 170, 171, 597, 794, 850, 1388], "amsterdam": [481, 1102], "an": [1, 31, 34, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 56, 59, 61, 62, 66, 74, 75, 76, 97, 105, 109, 112, 115, 122, 124, 133, 135, 136, 139, 147, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 167, 168, 169, 170, 171, 172, 181, 183, 187, 197, 213, 217, 218, 219, 225, 231, 234, 238, 240, 245, 256, 257, 258, 260, 261, 264, 265, 276, 280, 285, 286, 288, 289, 293, 303, 308, 314, 318, 320, 324, 325, 330, 333, 342, 356, 359, 361, 368, 390, 393, 405, 409, 411, 417, 420, 422, 423, 425, 442, 443, 444, 445, 446, 447, 454, 458, 459, 477, 481, 484, 498, 504, 512, 513, 518, 519, 520, 523, 557, 560, 563, 565, 587, 588, 596, 597, 609, 611, 621, 622, 643, 644, 645, 653, 654, 658, 660, 661, 663, 665, 667, 669, 672, 674, 676, 695, 696, 699, 705, 708, 712, 733, 735, 736, 738, 740, 754, 757, 765, 770, 774, 776, 780, 782, 789, 790, 792, 793, 795, 797, 800, 804, 805, 806, 807, 808, 809, 810, 822, 824, 825, 828, 832, 837, 838, 840, 841, 846, 850, 869, 870, 871, 873, 877, 879, 883, 887, 891, 896, 897, 901, 902, 915, 917, 918, 927, 935, 938, 940, 942, 944, 952, 966, 969, 973, 974, 975, 1002, 1005, 1017, 1021, 1023, 1029, 1032, 1034, 1035, 1037, 1052, 1054, 1060, 1061, 1062, 1063, 1064, 1071, 1075, 1105, 1119, 1126, 1128, 1141, 1170, 1182, 1185, 1188, 1190, 1212, 1221, 1250, 1251, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1269, 1271, 1286, 1287, 1290, 1296, 1299, 1303, 1324, 1326, 1327, 1329, 1331, 1351, 1353, 1371, 1389, 1391, 1394, 1398, 1399, 1401], "ana": [722, 1313], "anan": [722, 1313], "ananab": 1394, "and_": 850, "ang": 1394, "angl": [771, 772], "ani": [4, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 73, 74, 80, 99, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 207, 209, 212, 213, 215, 221, 225, 227, 228, 233, 235, 236, 238, 240, 255, 257, 258, 259, 260, 261, 264, 265, 269, 279, 284, 285, 289, 290, 291, 303, 306, 309, 310, 313, 314, 315, 318, 319, 321, 324, 325, 333, 356, 359, 360, 361, 366, 369, 370, 394, 426, 427, 428, 446, 447, 454, 466, 483, 501, 502, 512, 513, 517, 520, 522, 524, 528, 538, 548, 555, 560, 567, 577, 578, 579, 580, 595, 596, 597, 604, 614, 617, 619, 621, 622, 624, 626, 628, 629, 632, 633, 637, 642, 645, 652, 653, 654, 659, 660, 662, 664, 666, 668, 670, 671, 673, 675, 677, 681, 685, 695, 697, 711, 729, 730, 731, 732, 733, 735, 736, 738, 740, 749, 755, 756, 757, 764, 765, 766, 768, 775, 777, 779, 780, 781, 808, 809, 810, 812, 816, 834, 840, 850, 867, 872, 873, 879, 880, 881, 883, 886, 887, 895, 896, 897, 902, 910, 911, 914, 915, 927, 931, 932, 935, 942, 943, 944, 969, 973, 975, 977, 979, 982, 1006, 1038, 1039, 1048, 1064, 1065, 1071, 1083, 1104, 1123, 1124, 1133, 1136, 1142, 1144, 1146, 1151, 1161, 1170, 1173, 1180, 1185, 1192, 1202, 1203, 1204, 1205, 1220, 1221, 1232, 1233, 1242, 1249, 1250, 1251, 1255, 1256, 1259, 1261, 1262, 1269, 1270, 1286, 1288, 1302, 1324, 1326, 1327, 1329, 1331, 1349, 1350, 1351, 1352, 1354, 1355, 1356, 1371, 1376, 1399, 1402], "anna": [272, 356, 907, 969], "annex": [716, 1307], "announc": [913, 969], "anoth": [102, 182, 216, 224, 230, 244, 260, 296, 356, 449, 456, 533, 563, 601, 607, 611, 652, 662, 664, 666, 668, 670, 673, 675, 677, 708, 850, 869, 878, 890, 896, 921, 940, 969, 1064, 1073, 1125, 1133, 1155, 1188, 1249, 1250, 1299, 1371, 1393, 1394], "anti": [259, 356, 895, 952, 969, 1269, 1271, 1371, 1387], "antipattern": [152, 158, 162, 164], "any_horizont": [767, 840], "anyth": [40, 289, 356], "anywher": [413, 416, 733, 735, 736, 1324, 1326, 1327], "ap": 1394, "apach": [36, 43, 44, 47, 134, 150, 154, 155, 158, 160, 169, 210, 356, 978], "apaya": [734, 1325], "api": [0, 33, 38, 43, 47, 49, 50, 51, 52, 134, 162, 164, 167, 170, 171, 172, 173, 192, 197, 211, 264, 342, 356, 597, 812, 850, 952, 969, 1221, 1371, 1398], "apia": [455, 1072], "app": [433, 727, 1046, 1318], "appear": [41, 70, 136, 178, 179, 356, 720, 759, 850, 975, 1358, 1371, 1400], "append": [39, 40, 42, 183, 233, 259, 260, 261, 356, 649, 840, 850, 895, 896, 897, 969, 1133, 1371], "appl": [220, 249, 259, 285, 286, 309, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 349, 356, 427, 429, 433, 655, 701, 727, 756, 850, 895, 915, 947, 948, 950, 951, 953, 954, 955, 956, 957, 958, 959, 969, 1041, 1046, 1292, 1318, 1387, 1394], "appli": [11, 21, 38, 41, 49, 64, 66, 132, 147, 154, 167, 180, 183, 187, 207, 223, 238, 261, 264, 279, 302, 303, 313, 342, 356, 382, 457, 460, 461, 462, 465, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 483, 485, 496, 497, 499, 505, 506, 596, 597, 642, 661, 662, 663, 664, 667, 668, 674, 675, 692, 719, 720, 733, 735, 736, 740, 773, 784, 785, 798, 811, 812, 824, 829, 840, 850, 877, 897, 901, 910, 926, 927, 952, 969, 1053, 1074, 1077, 1078, 1079, 1082, 1084, 1085, 1089, 1090, 1091, 1093, 1094, 1097, 1099, 1100, 1104, 1106, 1117, 1118, 1120, 1129, 1130, 1221, 1257, 1258, 1260, 1264, 1310, 1311, 1324, 1326, 1327, 1331, 1371, 1380], "applic": [55, 314, 356, 597, 850], "apply_on_context_ent": 207, "appropri": [41, 173, 236, 284, 314, 356, 487, 648, 850, 887, 914, 969, 1108, 1244, 1371], "approx": [373, 850], "approx_n_uniqu": [356, 850, 969, 1371], "approxim": [47, 214, 356, 373, 504, 769, 850, 866, 969, 985, 1128, 1371, 1393, 1402], "april": [484, 1105, 1394, 1395], "ar": [1, 11, 12, 18, 21, 31, 33, 35, 38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 64, 65, 66, 97, 98, 100, 107, 113, 129, 133, 134, 135, 136, 137, 138, 139, 140, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 181, 183, 184, 185, 187, 197, 207, 211, 215, 216, 221, 223, 227, 228, 231, 236, 237, 238, 243, 244, 245, 257, 259, 260, 261, 262, 264, 271, 272, 278, 280, 284, 288, 289, 290, 291, 294, 295, 299, 302, 309, 313, 314, 315, 318, 319, 323, 325, 326, 330, 331, 334, 335, 356, 369, 371, 385, 401, 406, 426, 427, 428, 436, 442, 444, 445, 454, 482, 487, 495, 500, 502, 503, 504, 505, 506, 513, 528, 534, 536, 538, 539, 541, 542, 543, 544, 546, 551, 552, 581, 585, 588, 596, 633, 638, 644, 645, 648, 651, 652, 653, 654, 658, 659, 662, 664, 666, 668, 670, 671, 673, 675, 677, 681, 683, 686, 689, 691, 692, 697, 706, 710, 712, 713, 717, 718, 719, 720, 721, 723, 734, 736, 738, 743, 748, 750, 754, 755, 756, 765, 766, 767, 768, 773, 776, 777, 778, 779, 780, 787, 789, 790, 792, 793, 808, 809, 814, 816, 819, 828, 832, 833, 834, 837, 838, 840, 842, 843, 845, 849, 850, 851, 852, 855, 856, 857, 858, 859, 862, 865, 867, 872, 873, 877, 880, 881, 887, 890, 891, 895, 896, 897, 901, 906, 907, 911, 913, 914, 915, 917, 919, 920, 923, 924, 926, 931, 934, 935, 938, 939, 940, 945, 969, 973, 975, 982, 983, 997, 998, 1013, 1016, 1018, 1038, 1039, 1043, 1053, 1062, 1063, 1071, 1103, 1108, 1116, 1122, 1124, 1126, 1127, 1128, 1129, 1130, 1137, 1139, 1151, 1156, 1159, 1161, 1162, 1164, 1165, 1166, 1167, 1171, 1176, 1177, 1206, 1210, 1213, 1233, 1241, 1242, 1244, 1248, 1249, 1250, 1251, 1255, 1262, 1270, 1274, 1278, 1281, 1288, 1297, 1301, 1303, 1308, 1309, 1310, 1311, 1314, 1325, 1327, 1329, 1334, 1341, 1349, 1351, 1352, 1353, 1355, 1356, 1363, 1365, 1367, 1371, 1372, 1375, 1377, 1378, 1379, 1381, 1383, 1386, 1391, 1399, 1402], "arbitrari": [53, 87, 240, 356, 449, 850, 878, 969, 975], "arbitrarili": [264, 356], "arcco": [850, 1371], "arccosh": [850, 1371], "arcsin": [850, 1371], "arcsinh": [850, 1371], "arctan": [771, 772, 850, 1371], "arctan2": 772, "arctanh": [850, 1371], "aren": [38, 49, 356, 969], "arg": [32, 57, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 149, 200, 204, 236, 279, 284, 356, 382, 642, 773, 799, 850, 887, 910, 914, 969, 1221, 1371, 1384], "arg_max": [850, 1371], "arg_min": [850, 1371], "arg_sort": [850, 1371], "arg_tru": [774, 850, 1371], "arg_uniqu": [850, 1371], "arg_wher": [383, 850], "argmax": [596, 850], "argument": [37, 40, 47, 97, 147, 149, 151, 152, 156, 164, 167, 168, 183, 185, 187, 197, 221, 225, 232, 244, 245, 260, 278, 279, 288, 294, 295, 302, 315, 322, 326, 330, 331, 335, 356, 454, 482, 495, 507, 513, 534, 596, 638, 642, 658, 692, 728, 729, 730, 737, 748, 765, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 796, 828, 832, 840, 846, 850, 879, 884, 890, 891, 896, 910, 917, 919, 920, 926, 933, 938, 939, 945, 966, 969, 975, 1071, 1103, 1116, 1156, 1319, 1320, 1321, 1328, 1352, 1371, 1393, 1394], "aris": 154, "arithmet": [238, 356], "arm": 175, "arm64": 175, "around": [38, 49, 356, 969], "arr": [314, 356, 842, 1351, 1363, 1371, 1394], "arr_bar": 1389, "arr_foo": 1389, "arrai": [133, 137, 152, 153, 156, 164, 168, 209, 213, 231, 232, 308, 313, 314, 315, 356, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 414, 442, 443, 444, 445, 555, 570, 571, 572, 573, 575, 584, 585, 587, 590, 592, 596, 654, 661, 663, 665, 667, 669, 672, 674, 676, 682, 754, 777, 795, 809, 829, 850, 884, 969, 974, 977, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1026, 1060, 1061, 1062, 1063, 1068, 1126, 1180, 1195, 1196, 1197, 1198, 1200, 1208, 1209, 1210, 1212, 1215, 1217, 1218, 1251, 1257, 1258, 1260, 1263, 1264, 1265, 1272, 1276, 1345, 1349, 1351, 1352, 1353, 1371, 1392, 1394, 1398, 1401], "array_agg": 1392, "array_contain": 1392, "array_get": 1392, "array_length": 1392, "array_low": 1392, "array_mean": 1392, "array_revers": 1392, "array_sum": 1392, "array_to_str": 1392, "array_uniqu": 1392, "array_upp": 1392, "arraylik": [1068, 1371], "arrow": [43, 44, 50, 133, 134, 154, 155, 158, 160, 170, 210, 257, 290, 291, 308, 310, 314, 356, 969, 978, 1345, 1351, 1371], "arrowarrayexport": [133, 134], "arrowinvaliderror": [40, 356], "arrowstreamexport": [133, 134], "as_": [1371, 1376], "as_arrai": 809, "as_dict": [153, 278, 356], "as_expr": 975, "as_seri": [216, 309, 356, 869, 969, 975], "asarrai": [209, 977], "ascend": [245, 272, 288, 356, 638, 658, 850, 891, 907, 917, 969], "ascii": [7, 21, 431, 432, 697, 707, 709, 710, 714, 715, 721, 723, 734, 743, 975, 1044, 1045, 1288, 1298, 1300, 1301, 1305, 1306, 1312, 1314, 1325, 1334], "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_case_insensit": [697, 707, 709, 721, 1288, 1298, 1300, 1312], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_horizontal_onli": 21, "ascii_lett": 1402, "ascii_markdown": 21, "ascii_no_bord": 21, "ascii_onli": 975, "ascii_t": 207, "ascii_uppercas": [324, 356], "asd": [698, 705, 1289, 1296], "asia": [140, 975, 1077, 1078, 1106], "asid": 487, "asin": 1392, "asind": 1392, "asof": [260, 356, 896, 969], "asofjoinstrategi": [260, 356, 896, 969], "assert": [176, 177, 178, 179, 183, 187, 288, 356, 862, 975], "assert_frame_equ": [177, 178, 230, 356, 1402], "assert_frame_not_equ": [176, 179], "assert_series_equ": [176, 179, 1125, 1371, 1402], "assert_series_not_equ": [177, 178], "assert_someth": 181, "assertionerror": [176, 177, 178, 179], "assign": [181, 213, 245, 341, 356, 406, 588, 638, 648, 725, 726, 850, 891, 951, 969, 1018, 1213, 1244, 1316, 1317, 1371], "associ": [39, 41, 58, 155, 157, 182, 185, 291, 356, 974, 1382, 1384, 1388], "assum": [33, 291, 356, 901, 952, 969, 1394], "assume_rol": 33, "assumpt": [596, 850], "async": [64, 65, 154, 873, 969], "async_engin": 154, "asynchron": [65, 154, 873, 969], "asyncio": [65, 154, 873, 969], "asyncresult": [65, 873, 969], "asyncsurrealdb": 154, "ata": 27, "atan": 1392, "atan2": [771, 772, 1392], "atan2_ab": 1396, "atan2d": [772, 1392], "atan2d_ab": 1396, "atand": 1392, "atg": 27, "atgataaaggag": 27, "atol": [176, 177, 178, 179], "attain": [692, 850], "attempt": [1, 10, 49, 50, 51, 52, 64, 65, 213, 449, 850, 872, 873, 878, 883, 911, 924, 969], "attr": [356, 359, 1371, 1376], "attribut": [67, 70, 73, 74, 75, 76, 77, 85, 89, 143, 144, 145, 146, 180, 198, 199, 201, 202, 356, 359, 842, 843, 845, 846, 851, 852, 855, 857, 858, 859, 943, 944, 969, 1363, 1365, 1367, 1371, 1372, 1376, 1377, 1378, 1379], "attributeerror": 1, "audi": [309, 356, 655, 850], "august": 487, "australia": 791, "auth": 35, "authent": [40, 156, 164, 167, 168, 169, 170, 172, 192, 356], "author": 1, "auto": [10, 38, 40, 43, 47, 49, 50, 51, 52, 64, 65, 66, 133, 135, 136, 137, 139, 156, 161, 162, 164, 167, 168, 170, 171, 172, 192, 197, 320, 356, 872, 873, 883, 911, 924, 969, 1402], "auto_structifi": [294, 330, 356, 919, 938, 969], "autofilt": [41, 356], "autofit": [41, 356], "autogener": [152, 153, 157, 163, 167], "automat": [8, 38, 49, 66, 133, 135, 136, 137, 139, 140, 149, 152, 153, 154, 155, 161, 162, 164, 167, 169, 170, 171, 183, 187, 189, 192, 294, 303, 330, 356, 596, 653, 728, 729, 730, 829, 850, 919, 927, 938, 969, 1249, 1250, 1319, 1320, 1321, 1354, 1371, 1381, 1383, 1386, 1399], "autumn": [719, 720], "avail": [41, 47, 52, 142, 154, 155, 156, 165, 168, 169, 181, 194, 195, 196, 207, 265, 280, 303, 355, 356, 361, 487, 648, 829, 842, 843, 845, 849, 850, 851, 852, 855, 856, 857, 858, 859, 862, 902, 927, 967, 968, 969, 975, 1066, 1244, 1363, 1365, 1367, 1371, 1372, 1375, 1377, 1378, 1379, 1390], "available_timezon": [73, 975], "averag": [41, 356, 503, 504, 505, 506, 648, 850, 1127, 1128, 1129, 1130, 1244, 1371, 1388], "avg": 1392, "avocado": 1394, "avoid": [183, 187, 236, 284, 290, 356, 368, 850, 887, 914, 969], "avro": [36, 150, 200, 356, 862], "avrocompress": [36, 356], "aw": [33, 38, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 969], "awai": [678, 850, 1393], "await": [65, 154, 873, 963, 969], "await_result": [913, 969], "awar": [11, 154, 257, 290, 291, 310, 356, 504, 697, 707, 709, 721, 736, 850, 969, 1128, 1288, 1298, 1300, 1312, 1327, 1371], "aws_access_key_id": [40, 156, 168, 172, 356], "aws_region": [40, 168, 172, 356], "aws_secret_access_kei": [40, 156, 168, 172, 356], "awsassumerolekwarg": 33, "axi": [271, 323, 356, 359, 771, 772, 906, 934, 969, 1371, 1376], "aya": [723, 1314, 1325], "az": [156, 168, 169], "azur": [34, 38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 169, 170, 171, 172, 197, 356, 969], "azure_storage_account_kei": [156, 168, 169], "azure_storage_account_nam": [156, 168, 169], "b": [1, 11, 36, 38, 40, 43, 44, 47, 53, 61, 66, 89, 97, 104, 107, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 154, 157, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 254, 255, 256, 257, 258, 259, 262, 263, 265, 266, 268, 270, 273, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 299, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 366, 368, 369, 371, 372, 382, 384, 389, 394, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 427, 428, 440, 447, 451, 484, 487, 507, 509, 511, 512, 513, 515, 525, 526, 529, 532, 533, 534, 536, 539, 541, 542, 543, 544, 549, 555, 560, 567, 577, 578, 579, 580, 596, 597, 602, 618, 621, 622, 623, 624, 625, 626, 627, 635, 636, 638, 642, 645, 648, 652, 653, 655, 657, 684, 690, 692, 699, 703, 708, 712, 719, 720, 744, 745, 756, 759, 763, 765, 766, 767, 768, 769, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 799, 802, 803, 804, 806, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 824, 826, 827, 829, 831, 832, 833, 834, 835, 839, 846, 850, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 914, 915, 916, 918, 919, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 940, 941, 942, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 969, 975, 981, 984, 1006, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1043, 1047, 1048, 1065, 1068, 1105, 1108, 1122, 1125, 1126, 1133, 1136, 1156, 1161, 1180, 1202, 1203, 1204, 1205, 1242, 1247, 1290, 1294, 1299, 1303, 1310, 1311, 1335, 1337, 1338, 1340, 1352, 1358, 1371, 1381, 1383, 1384, 1386, 1387, 1388, 1389, 1394, 1395, 1396, 1399], "b1": [59, 61], "b2": [59, 61], "b345": [41, 356], "b4": [41, 356], "b_b": [303, 356], "b_btm_by_a": [427, 850], "b_btm_by_b": [427, 850], "b_by_ca": [427, 756, 850], "b_by_cb": [427, 756, 850], "b_div_a": [250, 356], "b_is_not_nan": [542, 850], "b_isnan": [541, 850], "b_isnul": [544, 850], "b_not_nul": [543, 850], "b_revers": [622, 626, 655, 850], "b_suffix": 627, "b_sum": [335, 945], "b_top_by_a": [756, 850], "b_top_by_b": [756, 850], "ba": [449, 507, 611, 727, 796, 850, 975], "back": [4, 58, 172, 233, 245, 296, 314, 315, 356, 611, 638, 720, 850, 872, 883, 891, 911, 921, 924, 944, 969, 1133, 1352, 1371], "backend": [40, 154, 155, 156, 168, 169, 356, 359, 1371, 1376], "background": [64, 65, 356, 360, 872, 873, 968, 969], "backward": [47, 52, 235, 260, 356, 409, 454, 475, 512, 850, 886, 896, 969, 1021, 1071, 1096, 1136, 1371], "backward_fil": [512, 518, 850, 1136, 1141, 1371], "bad": [719, 720, 1310, 1311], "balanc": [186, 188, 1402], "ballon_dor": [704, 706, 1295, 1297], "banana": [220, 309, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 427, 655, 701, 727, 756, 850, 948, 950, 953, 954, 955, 956, 957, 958, 959, 1394], "banded_column": [41, 356], "banded_row": [41, 356], "banker": [678, 850, 1266, 1371], "bar": [36, 38, 40, 43, 44, 45, 46, 47, 148, 161, 162, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 233, 236, 238, 240, 241, 242, 247, 249, 250, 251, 253, 259, 263, 264, 266, 267, 268, 269, 270, 273, 274, 277, 280, 282, 284, 285, 286, 289, 292, 293, 294, 296, 301, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 321, 322, 327, 328, 329, 334, 356, 359, 430, 449, 531, 601, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 689, 698, 700, 703, 705, 706, 722, 724, 726, 731, 732, 769, 780, 781, 782, 797, 802, 803, 806, 807, 813, 815, 817, 818, 820, 821, 828, 831, 835, 839, 840, 846, 850, 869, 874, 875, 879, 880, 881, 882, 887, 893, 894, 895, 909, 914, 915, 918, 919, 932, 933, 937, 969, 974, 975, 1042, 1192, 1281, 1289, 1291, 1294, 1296, 1297, 1313, 1317, 1322, 1323, 1371, 1385, 1387, 1388, 1389, 1391, 1394, 1397], "bar2": 1394, "bar22": [238, 356], "bar_": 724, "bar_3": [311, 356], "bar_4": [311, 356], "bar_a": [280, 356], "bar_at_2": 1389, "bar_avg": 1388, "bar_b": [280, 356], "bar_color": [41, 356], "bar_max": 1388, "bar_median": 1388, "bar_min": 1388, "bar_negative_border_color_sam": [41, 356], "bar_negative_color_sam": [41, 356], "bar_std": 1388, "bar_sum": 1388, "bar_var": 1388, "bare": [604, 605, 975], "base": [32, 41, 53, 54, 55, 71, 118, 120, 157, 185, 213, 228, 236, 245, 261, 284, 288, 356, 455, 463, 500, 503, 504, 505, 506, 513, 528, 533, 591, 592, 596, 597, 643, 645, 653, 658, 662, 664, 666, 668, 670, 673, 675, 677, 738, 798, 850, 887, 891, 897, 914, 917, 969, 975, 1072, 1080, 1122, 1127, 1128, 1129, 1130, 1151, 1155, 1216, 1217, 1221, 1240, 1242, 1249, 1250, 1329, 1362, 1371, 1387, 1393, 1402], "base64": [411, 412, 699, 700, 1023, 1024, 1290, 1291], "base_nam": [320, 356], "base_path": [53, 54, 55], "base_utc_offset": [463, 1080], "baseexcept": 1399, "basepartitioncontext": 54, "basi": [41, 157, 183, 356], "basic": [41, 209, 356, 603, 977, 1402], "basic_chart": [41, 356], "batch": [44, 97, 142, 147, 153, 154, 160, 162, 171, 173, 290, 318, 356, 872, 901, 969], "batch_siz": [38, 49, 147, 152, 153, 154, 162, 171, 173, 318, 356, 969], "batchedcsvread": 153, "baz": [240, 250, 251, 322, 356, 706, 724, 726, 797, 806, 821, 846, 894, 933, 969, 974, 975, 1297, 1317, 1385, 1391, 1394], "bb": [975, 1066, 1371, 1394, 1399], "bbb": [1, 41, 356, 744, 746, 747, 975], "bc": [708, 720, 833, 1299], "bcbc45": 1394, "bea": 13, "bear": 975, "bearer": 192, "bearer_token": 192, "beauti": 13, "becaus": [162, 171, 231, 245, 262, 264, 324, 342, 356, 517, 560, 588, 850, 891, 952, 969, 1126, 1185, 1221, 1371], "becom": [185, 355, 967, 968], "bed3": [41, 356], "been": [5, 31, 41, 190, 211, 337, 356, 519, 597, 615, 648, 850, 947, 1244, 1371], "beetl": [309, 356, 655, 850], "befor": [41, 49, 50, 51, 52, 53, 72, 73, 147, 149, 152, 154, 157, 167, 173, 176, 177, 178, 179, 189, 207, 233, 245, 260, 303, 313, 318, 322, 356, 420, 421, 423, 424, 444, 445, 446, 596, 638, 639, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 703, 743, 750, 778, 826, 827, 850, 891, 893, 896, 933, 969, 1032, 1033, 1035, 1036, 1062, 1063, 1064, 1133, 1237, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1294, 1334, 1341, 1371, 1387], "beforehand": [733, 735, 736, 1324, 1326, 1327], "begin": [13, 41, 251, 356, 503, 505, 506, 532, 533, 704, 734, 850, 894, 969, 1127, 1129, 1130, 1154, 1155, 1295, 1325, 1371], "behav": [236, 284, 356, 513, 597, 729, 730, 840, 850, 887, 914, 969], "behavior": [47, 52, 56, 152, 164, 172, 213, 227, 228, 236, 259, 260, 356, 393, 519, 563, 565, 703, 797, 806, 850, 880, 881, 895, 896, 966, 969, 1005, 1188, 1190, 1294], "behaviour": [11, 58, 227, 228, 236, 284, 303, 356, 696, 704, 705, 708, 719, 720, 757, 829, 850, 880, 881, 887, 914, 927, 969, 1287, 1295, 1296, 1299, 1310, 1311], "behind": 189, "being": [14, 32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 99, 132, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 157, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 216, 232, 261, 265, 303, 311, 313, 318, 325, 356, 359, 360, 361, 446, 447, 454, 466, 528, 597, 645, 659, 660, 662, 664, 666, 668, 670, 671, 673, 675, 677, 703, 775, 777, 795, 808, 809, 840, 850, 869, 872, 873, 883, 884, 897, 902, 911, 927, 935, 943, 969, 1048, 1064, 1065, 1071, 1083, 1151, 1242, 1255, 1256, 1259, 1261, 1262, 1294, 1346, 1349, 1354, 1371, 1376, 1402], "belong": [1, 245, 356, 891, 969], "below": [20, 40, 156, 157, 168, 169, 228, 236, 280, 284, 356, 487, 512, 710, 719, 720, 734, 789, 790, 792, 793, 837, 838, 840, 846, 850, 887, 914, 969, 1108, 1301, 1310, 1311, 1325], "best": [169, 264, 342, 356, 597, 850, 1221, 1371], "better": [264, 313, 314, 342, 356, 432, 597, 715, 850, 868, 952, 969, 1045, 1269, 1271, 1306, 1371], "between": [25, 66, 103, 180, 181, 183, 187, 212, 221, 259, 272, 282, 290, 348, 356, 394, 428, 450, 451, 487, 534, 558, 567, 577, 578, 579, 580, 639, 645, 646, 669, 670, 695, 711, 771, 772, 775, 780, 782, 809, 823, 826, 827, 850, 895, 907, 912, 958, 969, 1006, 1040, 1047, 1067, 1068, 1108, 1156, 1183, 1192, 1202, 1203, 1204, 1205, 1237, 1242, 1243, 1261, 1286, 1302, 1371, 1388, 1396], "between_ab": [534, 850], "beyond": [53, 741, 1332], "bia": [505, 506, 546, 659, 671, 689, 850, 1129, 1130, 1171, 1255, 1262, 1281, 1371], "bias": [546, 689, 850, 1171, 1281, 1371], "big": [153, 414, 1026], "big_fil": 153, "bigidx": 141, "bigqueri": 155, "bigquery_format": 200, "bin": [447, 528, 645, 738, 764, 843, 850, 1065, 1151, 1242, 1329, 1365, 1371, 1376], "bin2int": 414, "bin_count": [528, 850, 1151, 1371], "bin_i": [764, 850], "bin_x": [764, 850], "bin_xor_xi": [764, 850], "binari": [41, 43, 148, 154, 224, 296, 356, 410, 411, 412, 413, 414, 415, 416, 449, 611, 699, 850, 878, 921, 969, 975, 1022, 1023, 1025, 1026, 1027, 1028, 1290, 1390], "binary_str": [764, 850], "bind": 157, "birthdai": 152, "bit": [72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 418, 419, 420, 421, 423, 424, 650, 696, 850, 1030, 1032, 1033, 1035, 1036, 1246, 1287, 1371, 1390, 1394], "bit_and": 1392, "bit_count": 1392, "bit_length": 1392, "bit_or": 1392, "bit_xor": 1392, "bitmap": [231, 356, 1126, 1371], "bitwis": [370, 417, 422, 425, 637, 764, 765, 766, 767, 768, 850, 1029, 1034, 1037, 1371, 1392, 1398], "bitwise_and": [850, 1371], "bitwise_count_on": [850, 1371], "bitwise_count_zero": [850, 1371], "bitwise_leading_on": [850, 1371], "bitwise_leading_zero": [850, 1371], "bitwise_or": [850, 1371], "bitwise_trailing_on": [850, 1371], "bitwise_trailing_zero": [850, 1371], "bitwise_xor": [850, 1371], "bla": [698, 705, 1289, 1296], "black": [264, 356, 410, 411, 412, 413, 416], "blindli": [560, 1185], "block": [21, 65, 244, 321, 356, 873, 890, 915, 932, 941, 942, 952, 969, 1269, 1271, 1371], "blue": [57, 98, 100, 410, 411, 412, 413, 416, 761, 850, 1360, 1371], "bob": [152, 272, 356, 907, 969, 1400], "bodi": [41, 356, 360], "bold": [41, 356], "bom": [38, 49, 356, 969], "bool": [5, 7, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 38, 40, 41, 47, 49, 50, 51, 52, 53, 55, 56, 58, 64, 65, 66, 97, 98, 133, 134, 135, 136, 138, 139, 140, 143, 147, 148, 149, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 209, 211, 215, 216, 217, 218, 223, 225, 230, 235, 236, 237, 238, 242, 243, 244, 245, 249, 252, 253, 254, 257, 259, 260, 269, 278, 280, 284, 285, 289, 290, 291, 292, 297, 300, 302, 303, 306, 309, 311, 314, 315, 319, 320, 321, 322, 325, 326, 328, 330, 338, 340, 343, 346, 356, 368, 369, 370, 371, 372, 382, 385, 386, 389, 393, 394, 402, 407, 410, 411, 413, 416, 427, 428, 429, 433, 441, 442, 443, 444, 445, 447, 454, 466, 467, 483, 500, 501, 502, 503, 505, 506, 522, 524, 525, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 551, 552, 556, 560, 563, 565, 567, 576, 583, 588, 589, 595, 596, 597, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 632, 633, 635, 637, 638, 640, 641, 645, 648, 650, 659, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 680, 681, 682, 684, 689, 691, 692, 695, 696, 697, 698, 699, 701, 707, 708, 709, 711, 719, 720, 721, 724, 725, 727, 733, 735, 736, 738, 740, 744, 746, 747, 756, 758, 761, 764, 765, 766, 767, 768, 770, 773, 774, 775, 776, 779, 780, 782, 783, 784, 789, 790, 792, 793, 798, 804, 805, 808, 809, 810, 812, 816, 822, 825, 828, 829, 832, 834, 837, 838, 840, 841, 850, 867, 869, 870, 872, 873, 877, 879, 883, 886, 887, 890, 891, 895, 896, 901, 906, 911, 914, 915, 922, 924, 926, 927, 931, 932, 933, 934, 935, 938, 943, 944, 948, 950, 953, 956, 969, 974, 975, 977, 982, 983, 994, 997, 998, 1001, 1005, 1006, 1014, 1019, 1022, 1023, 1025, 1028, 1039, 1040, 1041, 1043, 1046, 1048, 1052, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1071, 1083, 1084, 1104, 1122, 1124, 1125, 1127, 1129, 1130, 1137, 1139, 1147, 1148, 1151, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1176, 1177, 1181, 1185, 1188, 1190, 1192, 1201, 1208, 1214, 1221, 1233, 1235, 1238, 1239, 1242, 1244, 1245, 1246, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1268, 1270, 1271, 1272, 1276, 1281, 1283, 1286, 1287, 1288, 1289, 1290, 1292, 1298, 1299, 1300, 1302, 1310, 1311, 1312, 1315, 1316, 1318, 1324, 1326, 1327, 1329, 1331, 1346, 1351, 1352, 1356, 1357, 1360, 1371, 1380, 1381, 1383, 1389, 1394, 1399], "boolean": [58, 97, 183, 215, 236, 238, 284, 302, 319, 356, 369, 370, 371, 385, 386, 389, 410, 413, 416, 427, 466, 467, 513, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 551, 552, 556, 635, 637, 640, 641, 681, 692, 712, 756, 763, 764, 773, 774, 832, 840, 850, 867, 887, 914, 926, 931, 969, 975, 982, 983, 995, 997, 998, 1001, 1022, 1039, 1083, 1084, 1137, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1176, 1177, 1181, 1235, 1238, 1239, 1270, 1271, 1287, 1356, 1362, 1371, 1391], "border": 21, "both": [11, 26, 38, 49, 57, 98, 100, 154, 157, 172, 219, 245, 259, 260, 261, 272, 288, 289, 315, 325, 356, 372, 436, 447, 487, 507, 534, 645, 658, 662, 664, 666, 668, 670, 673, 675, 677, 723, 789, 790, 792, 793, 808, 809, 837, 838, 840, 846, 850, 861, 891, 895, 896, 897, 907, 917, 924, 935, 969, 975, 1053, 1108, 1156, 1314, 1352, 1371, 1399, 1400], "boto3": 33, "bottom": [215, 356, 427, 850, 867, 969], "bottom_k": [319, 356, 427, 755, 756, 850, 931, 969, 1039, 1355, 1356, 1371], "bottom_k_bi": [426, 755, 756, 850, 1038, 1355, 1356, 1371], "bound": [114, 152, 153, 231, 245, 356, 393, 436, 534, 563, 565, 588, 594, 760, 770, 789, 790, 792, 793, 808, 809, 837, 838, 850, 891, 969, 1005, 1053, 1126, 1156, 1188, 1190, 1219, 1359, 1371, 1389], "boundari": [245, 356, 436, 741, 850, 891, 969, 1053, 1332, 1371], "box": [21, 264, 356], "box_draw": 21, "branch": [64, 840, 872, 883, 911, 924, 969], "break": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 99, 132, 143, 144, 145, 146, 147, 148, 156, 162, 164, 165, 167, 168, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 259, 261, 265, 303, 313, 318, 325, 356, 359, 360, 361, 446, 447, 454, 466, 528, 597, 645, 659, 660, 662, 664, 666, 668, 670, 671, 673, 675, 677, 775, 777, 808, 809, 850, 872, 873, 883, 895, 897, 902, 911, 927, 935, 943, 969, 1048, 1064, 1065, 1071, 1083, 1151, 1242, 1255, 1256, 1259, 1261, 1262, 1349, 1354, 1371, 1376], "breakpoint": [447, 528, 645, 850, 1065, 1151, 1242, 1371], "breezah": 167, "breviti": 207, "broadcast": [721, 777, 975, 1312], "broader": 975, "brotli": [47, 52, 356, 969], "brussel": [481, 1102], "bst": [459, 463, 481, 1076, 1080, 1102], "bucket": [40, 156, 168, 169, 172, 356, 482, 495, 528, 850, 1103, 1116, 1151, 1371], "bud": [719, 720, 1310, 1311], "budget": 1380, "buffer": [53, 152, 153, 154, 231, 257, 356, 414, 1026, 1126, 1371], "buffer_s": [257, 356], "bug": [97, 147, 596, 597, 850, 901, 952, 969, 1221, 1371], "build": [63, 134, 975, 1402], "built": 103, "builtin": [150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 224, 356, 449, 850, 878, 969], "bundl": 207, "busi": [454, 466, 775, 1071, 1083], "by_alternate_row": 1, "by_dtyp": 975, "by_first_letter_of_column_nam": 59, "by_first_letter_of_column_valu": 59, "by_index": 975, "by_left": [260, 356, 896, 969], "by_nam": 975, "by_pred": [289, 356], "by_right": [260, 356, 896, 969], "bye": 1, "byi": 1394, "bys": [245, 356, 891, 969], "byte": [36, 38, 41, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 148, 150, 151, 152, 153, 158, 159, 160, 161, 162, 165, 166, 167, 170, 171, 224, 231, 296, 356, 414, 431, 432, 449, 611, 708, 709, 710, 714, 715, 723, 734, 850, 878, 921, 969, 1026, 1044, 1045, 1126, 1299, 1300, 1301, 1305, 1306, 1314, 1325, 1371, 1394], "bytesio": [41, 43, 44, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 224, 296, 356, 449, 611, 850, 878, 921, 969], "c": [1, 11, 36, 38, 40, 43, 44, 47, 53, 59, 61, 66, 107, 134, 136, 138, 140, 143, 149, 157, 167, 211, 212, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 232, 236, 238, 241, 242, 243, 244, 245, 247, 249, 250, 258, 259, 262, 263, 265, 266, 268, 270, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 289, 292, 293, 294, 301, 302, 303, 304, 305, 307, 308, 311, 312, 313, 314, 315, 316, 319, 323, 324, 325, 327, 328, 330, 335, 338, 339, 340, 343, 344, 346, 349, 350, 356, 360, 366, 368, 369, 371, 389, 427, 447, 487, 525, 534, 555, 567, 597, 604, 621, 622, 636, 638, 642, 645, 684, 725, 733, 756, 759, 766, 768, 769, 771, 772, 773, 776, 777, 779, 780, 781, 782, 784, 785, 787, 797, 798, 799, 802, 803, 806, 807, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 829, 831, 833, 834, 835, 839, 846, 850, 867, 869, 870, 871, 872, 873, 874, 875, 876, 879, 880, 881, 882, 883, 884, 887, 890, 891, 895, 899, 902, 909, 911, 914, 915, 916, 918, 919, 924, 925, 926, 927, 931, 934, 935, 938, 940, 945, 948, 949, 950, 953, 954, 956, 959, 960, 969, 975, 1047, 1065, 1156, 1180, 1242, 1316, 1324, 1338, 1358, 1371, 1381, 1383, 1384, 1386, 1387, 1388, 1389, 1394, 1399], "c00": 975, "c01": 975, "c02": 975, "c03": 975, "c05": 975, "c1": 406, "c123": 1394, "c2": 406, "c20": 975, "c25": 975, "c3": 406, "c40": 975, "c45": 1394, "c4d79b": [41, 356], "c50": 975, "c567": [41, 356], "c60": 975, "c75": 975, "c80": 975, "c8ae6d2b276": [41, 356], "c93": 975, "c95": 975, "c96": 975, "c97": 975, "c98": 975, "c99": 975, "c_btm_by_a": [427, 850], "c_btm_by_b": [427, 850], "c_by_ca": [427, 756, 850], "c_by_cb": [427, 756, 850], "c_c_c": [829, 927, 969], "c_contigu": [314, 356], "c_max": [638, 850], "c_mean_squar": [335, 945], "c_min": [638, 850], "c_top_by_a": [756, 850], "c_top_by_b": [756, 850], "c_total": 1399, "ca": 783, "cach": [57, 64, 98, 100, 127, 158, 167, 170, 172, 176, 177, 178, 179, 191, 652, 653, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 733, 735, 736, 740, 850, 861, 872, 883, 911, 924, 969, 1043, 1249, 1250, 1324, 1326, 1327, 1331, 1371], "cadi": [280, 356], "cafe": [738, 1329], "caf\u00e9": [431, 432, 714, 715, 975, 1044, 1045, 1305, 1306], "calamin": 157, "calcul": [41, 47, 52, 58, 223, 245, 304, 327, 356, 450, 503, 504, 505, 506, 546, 558, 577, 584, 590, 594, 659, 671, 689, 694, 760, 762, 782, 826, 827, 831, 839, 850, 877, 891, 928, 936, 969, 1066, 1067, 1127, 1128, 1129, 1130, 1171, 1183, 1202, 1255, 1262, 1281, 1285, 1361, 1371], "calendar": [72, 73, 245, 260, 288, 326, 356, 457, 468, 470, 477, 482, 495, 499, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 794, 837, 838, 850, 891, 896, 917, 969, 1074, 1085, 1090, 1098, 1103, 1116, 1120, 1128, 1371], "calendar_year": [468, 499], "call": [10, 38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 64, 138, 147, 149, 152, 153, 154, 156, 157, 158, 162, 164, 167, 168, 170, 171, 172, 176, 177, 178, 179, 183, 187, 197, 207, 215, 244, 245, 262, 264, 288, 303, 314, 319, 355, 356, 426, 427, 442, 445, 454, 466, 596, 597, 621, 622, 624, 626, 628, 629, 652, 653, 685, 755, 756, 775, 781, 846, 850, 867, 872, 883, 890, 891, 911, 917, 924, 927, 931, 966, 967, 968, 969, 975, 1038, 1039, 1071, 1083, 1221, 1250, 1277, 1351, 1355, 1356, 1371, 1381, 1385, 1399], "callabl": [53, 54, 55, 59, 60, 61, 62, 97, 147, 167, 238, 264, 279, 285, 342, 356, 406, 588, 596, 597, 622, 623, 642, 660, 784, 785, 798, 811, 812, 824, 850, 901, 910, 915, 952, 969, 1018, 1213, 1221, 1256, 1371], "callback": [47, 52, 53, 54, 55, 144, 146, 356, 969], "caller": [97, 155, 272, 356, 588, 901, 907, 952, 969], "cam": [285, 356, 915, 969], "can": [1, 15, 28, 38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 57, 58, 64, 72, 73, 75, 89, 97, 98, 100, 136, 147, 152, 153, 154, 156, 157, 158, 162, 163, 164, 167, 168, 170, 171, 172, 173, 181, 182, 183, 187, 189, 192, 197, 207, 209, 215, 217, 227, 228, 229, 238, 240, 244, 245, 252, 254, 256, 259, 260, 264, 265, 276, 280, 288, 290, 291, 294, 296, 297, 302, 313, 314, 318, 319, 320, 324, 330, 333, 342, 356, 359, 361, 369, 406, 427, 442, 445, 446, 449, 454, 466, 474, 475, 477, 481, 484, 487, 504, 510, 513, 534, 560, 588, 596, 597, 604, 608, 611, 612, 618, 621, 622, 624, 626, 628, 629, 638, 643, 644, 645, 650, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 682, 684, 689, 692, 697, 706, 713, 719, 720, 721, 728, 729, 730, 733, 744, 750, 756, 773, 775, 788, 791, 798, 800, 804, 805, 808, 812, 829, 833, 840, 846, 849, 850, 861, 867, 868, 872, 873, 878, 880, 881, 883, 891, 895, 896, 902, 917, 919, 921, 922, 924, 926, 927, 931, 938, 941, 942, 969, 975, 977, 1018, 1039, 1064, 1071, 1083, 1095, 1096, 1098, 1102, 1105, 1108, 1128, 1134, 1156, 1185, 1213, 1221, 1226, 1240, 1241, 1242, 1246, 1250, 1269, 1271, 1272, 1275, 1281, 1288, 1289, 1297, 1304, 1310, 1311, 1312, 1319, 1320, 1321, 1324, 1341, 1349, 1351, 1356, 1371, 1376, 1386, 1399], "cancel": [872, 969], "candid": [704, 706, 1295, 1297], "cannot": [1, 47, 49, 50, 51, 52, 64, 65, 109, 112, 152, 153, 157, 158, 160, 162, 163, 164, 172, 189, 207, 260, 264, 291, 292, 314, 333, 342, 356, 411, 487, 507, 576, 597, 612, 680, 699, 725, 746, 812, 850, 872, 873, 883, 896, 911, 924, 942, 944, 952, 969, 975, 1023, 1108, 1201, 1221, 1268, 1290, 1316, 1351, 1371], "capabl": [1, 41, 356], "capac": [231, 300, 356, 1126, 1276, 1371], "capit": [741, 1332], "captur": [704, 706, 719, 720, 1295, 1297, 1310, 1311], "car": [285, 309, 356, 655, 850, 915, 969], "cardin": [214, 356, 373, 769, 850, 866, 969, 985, 1371], "care": [41, 297, 356, 597, 638, 682, 850, 922, 969, 1272, 1371], "cars_revers": [655, 850], "cartesian": [259, 356, 895, 969], "case": [41, 57, 58, 65, 97, 107, 133, 135, 136, 137, 139, 147, 149, 154, 161, 162, 171, 172, 189, 233, 245, 257, 264, 280, 288, 290, 291, 310, 313, 314, 356, 455, 504, 596, 608, 609, 622, 638, 658, 696, 697, 705, 707, 708, 709, 719, 720, 721, 741, 840, 850, 873, 891, 914, 917, 969, 975, 1072, 1128, 1133, 1287, 1288, 1296, 1298, 1299, 1300, 1310, 1311, 1312, 1332, 1349, 1371], "cast": [1, 40, 56, 60, 61, 133, 135, 136, 139, 149, 172, 176, 177, 178, 179, 238, 245, 265, 279, 288, 313, 314, 318, 330, 356, 372, 444, 445, 456, 484, 487, 498, 637, 642, 643, 650, 652, 658, 712, 713, 743, 750, 754, 778, 779, 830, 850, 862, 891, 902, 910, 917, 938, 969, 975, 1048, 1062, 1063, 1073, 1105, 1108, 1119, 1240, 1246, 1303, 1304, 1334, 1341, 1347, 1351, 1353, 1354, 1371, 1392], "cast_opt": 172, "cast_str_to_int": [279, 356, 910, 969], "cast_to_supertyp": [149, 850], "cat": [27, 57, 98, 100, 447, 645, 696, 698, 739, 742, 754, 779, 845, 850, 975, 1065, 1151, 1242, 1287, 1289, 1330, 1333, 1367, 1371], "catalog": [0, 862], "catalog_nam": [193, 195, 196, 197], "cataloginfo": [194, 205], "categor": [40, 57, 76, 98, 100, 102, 176, 177, 178, 179, 259, 311, 356, 429, 430, 431, 432, 433, 447, 645, 652, 653, 754, 850, 975, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1065, 1242, 1249, 1250, 1353, 1371], "categori": [41, 57, 76, 100, 311, 356, 430, 447, 528, 645, 850, 1042, 1065, 1151, 1242, 1346, 1371], "categorical_as_str": [176, 177, 178, 179], "categoricalord": 70, "categoricaltyp": [308, 356], "caus": [115, 124, 134, 152, 153, 154, 167, 211, 233, 314, 356, 596, 850, 1133, 1351, 1371], "cb": 783, "cba": 730, "cbrt": [850, 1371, 1392], "cbrt_a": 1393, "cc": [507, 796, 850, 975, 1066, 1371, 1394], "ccc": [1, 41, 356, 744, 746, 747, 975, 1394], "ccy": 1402, "cd": [720, 744, 746, 747, 975], "cd34": 720, "cdatainterfac": [134, 210, 978], "cde": [975, 1394], "cdt": [482, 495, 1103, 1116], "ceil": [60, 850, 1371, 1392], "ceil_a": 1393, "cell": [16, 17, 41, 280, 356], "cent": [457, 1310], "center": [16, 17, 41, 356, 503, 505, 506, 659, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 850, 1127, 1129, 1130, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1371], "central": [168, 169, 207, 546, 689, 850, 1171, 1281, 1371], "centuri": 1395, "certain": [53, 250, 326, 356, 729, 730, 846, 865, 872, 911, 969, 1371], "certainli": [733, 735, 736, 1324, 1326, 1327], "cest": [481, 1102], "cet": [481, 1102], "cfg": [2, 4, 18, 207], "cfg_ascii_fram": 207, "cfg_markdown": 207, "cfg_verbos": 207, "cfoo": [940, 969], "chain": [621, 622, 624, 626, 628, 629, 840], "chanc": [180, 183, 187, 1402], "chang": [31, 32, 33, 34, 35, 38, 40, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 64, 65, 74, 80, 99, 132, 134, 140, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 215, 245, 259, 261, 265, 280, 288, 303, 308, 313, 318, 319, 325, 326, 332, 356, 359, 360, 361, 427, 446, 447, 450, 454, 466, 487, 503, 505, 506, 528, 597, 638, 639, 645, 652, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 737, 756, 775, 777, 808, 809, 826, 827, 840, 850, 867, 872, 873, 883, 891, 895, 897, 902, 911, 917, 927, 931, 935, 941, 943, 969, 975, 1047, 1048, 1064, 1065, 1071, 1083, 1108, 1125, 1127, 1129, 1130, 1151, 1237, 1242, 1249, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1276, 1328, 1345, 1349, 1354, 1371, 1376, 1399], "changes_length": [149, 850], "char": [28, 152, 167, 705, 1296], "char_length": 1394, "charact": [7, 9, 13, 21, 27, 28, 29, 38, 39, 49, 101, 151, 152, 153, 155, 167, 356, 431, 432, 477, 702, 703, 705, 710, 714, 715, 717, 718, 719, 720, 723, 724, 725, 728, 729, 730, 731, 732, 734, 741, 743, 911, 969, 975, 1044, 1045, 1098, 1293, 1294, 1296, 1301, 1305, 1306, 1308, 1309, 1310, 1311, 1314, 1315, 1316, 1319, 1320, 1321, 1325, 1332, 1334, 1394], "character_length": 1394, "characterist": [183, 187], "charli": [152, 1400], "chart": [41, 356, 359, 911, 969, 1371, 1376], "cheap": [217, 218, 295, 331, 356, 870, 871, 920, 939, 969, 1052, 1054, 1371], "cheaper": [563, 1188], "check": [40, 73, 109, 152, 153, 167, 176, 177, 178, 179, 191, 230, 255, 259, 260, 356, 389, 410, 413, 416, 429, 433, 525, 534, 538, 556, 696, 701, 708, 727, 850, 895, 896, 901, 969, 1001, 1022, 1025, 1028, 1041, 1046, 1125, 1147, 1148, 1158, 1161, 1168, 1170, 1181, 1287, 1292, 1299, 1318, 1371], "check_column_ord": [176, 177], "check_dtyp": [176, 177, 178, 179, 974, 1125, 1371], "check_exact": [176, 177, 178, 179], "check_nam": [178, 179, 1125, 1371], "check_ord": [178, 179], "check_order_observ": 943, "check_row_ord": [176, 177], "check_sorted": [260, 356, 896, 969], "children": 143, "choos": [47, 50, 52, 245, 280, 356, 487, 891, 969, 1108], "chrono": [38, 49, 103, 356, 484, 487, 733, 735, 736, 740, 969, 1105, 1108, 1324, 1326, 1327, 1331, 1394, 1395], "chunk": [15, 52, 142, 152, 153, 156, 162, 164, 167, 168, 170, 171, 172, 183, 187, 233, 258, 275, 314, 356, 372, 649, 850, 969, 984, 1051, 1133, 1145, 1227, 1245, 1345, 1351, 1371], "chunk_length": 1371, "chunkedarrai": [133, 275, 356], "citi": [719, 720], "clang": 175, "clariti": [289, 356], "class": [1, 18, 32, 33, 34, 35, 53, 54, 55, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 118, 120, 143, 144, 145, 146, 180, 181, 192, 198, 199, 201, 202, 291, 296, 356, 361, 611, 808, 837, 846, 850, 856, 862, 875, 882, 918, 937, 943, 944, 969, 974, 1350, 1371, 1375, 1383, 1399], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 224, 356, 449, 519, 850, 878, 969, 1381, 1399], "claus": [862, 1389, 1398], "clean": [733, 735, 736, 1324, 1326, 1327], "cleaner": 207, "cleanli": [11, 243, 356, 1399], "clear": [57, 98, 218, 356, 871, 969, 1054, 1371], "clearer": 136, "clickhous": 155, "client": [33, 154, 192], "clip": [850, 1371], "clipboard": [37, 151, 356, 862], "clone": [135, 136, 137, 138, 139, 217, 314, 356, 870, 969, 1052, 1371], "close": [41, 49, 50, 51, 52, 54, 154, 245, 288, 303, 356, 447, 534, 593, 645, 658, 662, 664, 666, 668, 670, 673, 675, 677, 689, 789, 790, 792, 793, 808, 809, 837, 838, 850, 891, 917, 927, 969, 1065, 1156, 1242, 1281, 1371], "closedinterv": [245, 288, 356, 534, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 808, 809, 837, 838, 850, 891, 917, 969, 1156, 1371], "closest": [133, 260, 356, 896, 969, 1388, 1393], "closur": [662, 664, 673, 675, 677, 850], "cloud": [35, 38, 40, 43, 47, 49, 50, 51, 52, 97, 154, 156, 162, 164, 167, 168, 169, 170, 171, 172, 173, 197, 356, 862, 913, 969], "cloudi": [719, 720], "cloudpickl": 175, "cluster": 172, "cluster_with_column": [64, 872, 883, 911, 924, 943, 969], "co": [705, 850, 1296, 1371, 1392], "coalesc": [66, 259, 260, 325, 356, 532, 707, 709, 733, 840, 850, 895, 896, 935, 969, 1300, 1324, 1387, 1392], "code": [207, 219, 259, 356, 410, 411, 412, 413, 416, 449, 597, 682, 850, 878, 895, 899, 969, 1272, 1371, 1381], "codebas": 207, "coeffici": [221, 356, 689, 850, 1281, 1371, 1388], "coerc": [66, 651, 850, 1248, 1371], "coerce_int96_timestamp_unit": 56, "coercion": [64, 265, 356, 651, 850, 872, 883, 902, 911, 924, 969, 1248, 1371], "col": [1, 13, 38, 41, 49, 53, 58, 59, 60, 61, 137, 139, 167, 181, 183, 236, 244, 245, 250, 253, 255, 259, 260, 261, 264, 265, 276, 279, 280, 284, 288, 289, 294, 302, 313, 318, 322, 324, 330, 335, 356, 360, 361, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 542, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 619, 620, 621, 623, 625, 627, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 773, 774, 776, 777, 778, 779, 781, 783, 786, 788, 789, 791, 792, 794, 798, 799, 800, 801, 802, 803, 813, 815, 817, 818, 820, 823, 824, 828, 829, 831, 833, 835, 836, 839, 840, 850, 887, 890, 891, 893, 895, 896, 897, 902, 910, 914, 917, 919, 926, 927, 933, 938, 940, 945, 969, 975, 1098, 1102, 1185, 1269, 1271, 1300, 1304, 1324, 1371, 1402], "col0": [183, 1402], "col1": [183, 280, 356, 969, 1402], "col2": [183, 280, 356, 969, 1402], "col3": [280, 356, 1402], "col4": 1402, "col_idx": 213, "col_nam": [279, 356, 597, 840, 850, 910, 969], "col_or_expr": 99, "cole": 148, "coli": [41, 356, 628, 629, 975, 1402], "collaps": [64, 872, 883, 911, 924, 969], "collapse_join": [64, 872, 883, 911, 924, 943, 969], "collect": [10, 49, 50, 51, 52, 56, 61, 64, 65, 97, 132, 167, 168, 169, 173, 183, 184, 187, 227, 228, 262, 280, 303, 308, 321, 322, 356, 361, 507, 538, 577, 578, 579, 580, 597, 778, 796, 800, 828, 829, 832, 850, 865, 866, 867, 869, 870, 873, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 919, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 940, 941, 942, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 966, 968, 969, 975, 1161, 1202, 1203, 1204, 1205, 1371, 1381, 1382, 1383, 1386, 1387, 1399, 1400, 1402], "collect_al": [61, 65, 132, 872, 873, 969], "collect_all_async": [873, 969], "collect_async": [65, 969], "collect_dtyp": [48, 361], "collect_schema": [61, 262, 356, 875, 882, 910, 918, 937, 969], "collis": 66, "colnam": [25, 41, 167, 356], "color": [57, 98, 100, 342, 356, 359, 410, 411, 412, 413, 416, 699, 761, 850, 952, 1022, 1023, 1024, 1025, 1028, 1290, 1360, 1371, 1394], "column": [11, 17, 18, 19, 22, 23, 25, 40, 41, 47, 52, 53, 54, 55, 57, 58, 59, 66, 73, 89, 99, 100, 104, 108, 133, 135, 136, 137, 138, 139, 140, 147, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 183, 199, 202, 212, 213, 215, 216, 219, 221, 222, 225, 226, 227, 228, 229, 232, 236, 237, 240, 241, 243, 244, 245, 249, 250, 255, 256, 257, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 297, 302, 304, 305, 306, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 341, 356, 359, 360, 361, 368, 369, 371, 382, 391, 400, 402, 405, 414, 427, 436, 440, 441, 447, 457, 458, 460, 461, 462, 465, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 480, 483, 484, 485, 487, 496, 497, 499, 507, 509, 513, 515, 528, 533, 534, 549, 555, 561, 563, 583, 587, 588, 597, 603, 604, 606, 608, 610, 621, 623, 624, 625, 626, 627, 628, 629, 638, 645, 649, 651, 652, 653, 654, 656, 657, 658, 662, 664, 666, 668, 670, 673, 675, 677, 684, 685, 691, 692, 695, 703, 708, 710, 711, 721, 725, 726, 733, 734, 735, 736, 737, 738, 740, 745, 748, 756, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 846, 850, 867, 869, 876, 879, 880, 881, 882, 884, 887, 890, 891, 895, 896, 897, 901, 902, 903, 904, 905, 906, 908, 909, 912, 914, 915, 917, 918, 919, 920, 922, 926, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 945, 951, 952, 969, 974, 975, 982, 983, 1003, 1012, 1014, 1017, 1026, 1039, 1043, 1047, 1053, 1058, 1059, 1065, 1074, 1077, 1078, 1079, 1082, 1084, 1085, 1089, 1090, 1091, 1093, 1094, 1097, 1099, 1100, 1104, 1105, 1106, 1108, 1117, 1118, 1120, 1132, 1151, 1155, 1180, 1186, 1188, 1208, 1212, 1242, 1248, 1250, 1251, 1254, 1275, 1286, 1294, 1299, 1302, 1316, 1317, 1324, 1326, 1327, 1328, 1329, 1331, 1337, 1340, 1346, 1347, 1356, 1360, 1371, 1387, 1388, 1389, 1391, 1393, 1394, 1396, 1397, 1400, 1401, 1402], "column_0": [1, 264, 320, 356, 913, 969], "column_1": [264, 320, 356, 1396], "column_2": [320, 356, 1396], "column_abc": 16, "column_format": [41, 356], "column_nam": [285, 320, 356, 915, 969], "column_tot": [41, 356], "column_width": [41, 356], "column_x": [152, 153, 157, 163, 167], "column_xyz": 16, "columnar": [137, 139, 257, 290, 356], "columnformatdict": [41, 356], "columninfo": [202, 205], "columnnameorselector": [216, 225, 227, 228, 271, 278, 280, 291, 311, 321, 322, 323, 324, 356, 869, 879, 880, 881, 906, 932, 933, 934, 969], "columnnotfounderror": [240, 241, 356], "columntotalsdefinit": [41, 356], "columnwidthsdefinit": [41, 356], "colx": [41, 356, 628, 629, 975, 1386, 1402], "colz": [975, 1402], "com": [33, 41, 155, 356, 503, 505, 506, 704, 705, 706, 850, 1127, 1129, 1130, 1295, 1296, 1297, 1371], "combin": [47, 52, 64, 66, 132, 236, 245, 246, 260, 280, 284, 288, 326, 356, 370, 383, 504, 517, 612, 637, 653, 658, 728, 729, 730, 789, 790, 792, 793, 837, 838, 840, 850, 872, 883, 891, 896, 911, 914, 917, 924, 969, 1128, 1250, 1319, 1320, 1321, 1371, 1387, 1400], "come": [127, 155, 245, 321, 323, 356, 454, 466, 474, 475, 546, 588, 775, 840, 850, 891, 932, 934, 969, 1071, 1083, 1095, 1096, 1171, 1371], "comm_subexpr_elim": [64, 872, 883, 911, 924, 943, 969], "comm_subplan_elim": [64, 872, 883, 911, 924, 943, 969], "comma": [37, 38, 152, 153, 167, 356], "comment": [152, 153, 167, 198, 199, 201, 202], "comment_prefix": [152, 153, 167], "common": [56, 58, 64, 66, 107, 132, 152, 153, 167, 325, 356, 622, 856, 872, 883, 911, 924, 935, 969, 1375], "commonli": 840, "compact": 1397, "compani": 155, "compar": [172, 176, 177, 178, 179, 230, 236, 284, 356, 501, 502, 522, 524, 534, 548, 595, 632, 633, 850, 887, 914, 969, 1047, 1124, 1125, 1233, 1371], "comparison": [173, 236, 284, 356, 887, 914, 969], "compat": [21, 41, 43, 44, 47, 50, 52, 102, 140, 308, 356, 696, 698, 704, 705, 706, 708, 719, 720, 969, 975, 1108, 1287, 1289, 1295, 1296, 1297, 1299, 1310, 1311, 1345, 1371, 1381, 1394, 1395, 1399], "compat_level": [43, 44, 50, 308, 356, 969, 1345, 1371], "compatibleframetyp": [1382, 1384, 1399], "compatlevel": [43, 44, 50, 308, 356, 969, 1345, 1371], "competit": [648, 850, 1244, 1371], "compil": [63, 387, 388, 553, 554, 973, 999, 1000, 1178, 1179], "complement": 975, "complet": [152, 154, 167, 1400], "complex": [184, 426, 427, 446, 755, 756, 850, 1038, 1039, 1064, 1355, 1356, 1371], "compliant": [41, 356, 487, 1108], "compon": [458, 483, 487, 733, 736, 794, 1075, 1104, 1108, 1324, 1327], "compos": 1400, "composit": [89, 1402], "compound": [140, 291, 356, 975], "comprehens": 181, "compress": [36, 40, 43, 44, 47, 50, 52, 356, 656, 850, 969, 1253, 1371], "compression_level": [47, 52, 356, 969], "comput": [64, 66, 105, 231, 244, 260, 280, 315, 321, 335, 348, 356, 365, 374, 375, 376, 377, 378, 379, 396, 397, 398, 403, 404, 408, 434, 437, 438, 439, 442, 443, 444, 445, 451, 500, 503, 504, 505, 506, 508, 546, 570, 571, 572, 573, 577, 578, 579, 580, 584, 590, 591, 592, 593, 618, 638, 639, 644, 648, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 687, 688, 689, 693, 752, 753, 761, 766, 768, 771, 772, 773, 780, 782, 795, 816, 826, 827, 840, 850, 865, 872, 890, 893, 895, 896, 913, 932, 940, 945, 958, 969, 980, 986, 987, 988, 989, 990, 991, 1008, 1009, 1010, 1015, 1016, 1020, 1049, 1055, 1056, 1057, 1060, 1061, 1062, 1063, 1068, 1122, 1126, 1127, 1128, 1129, 1130, 1131, 1171, 1195, 1196, 1197, 1198, 1202, 1203, 1204, 1205, 1209, 1215, 1216, 1217, 1218, 1226, 1237, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1278, 1279, 1280, 1281, 1284, 1343, 1344, 1352, 1360, 1371, 1393, 1396], "computecontext": [913, 969], "computeerror": [608, 738, 840, 1329], "concat": [57, 98, 100, 108, 153, 260, 356, 896, 940, 969, 1051, 1145, 1227, 1245, 1371, 1392], "concat_list": [560, 795], "concat_w": [303, 356, 829, 927, 969, 1392, 1399], "concaten": [57, 66, 98, 100, 238, 279, 356, 642, 695, 711, 777, 778, 779, 850, 910, 969, 1051, 1227, 1286, 1302, 1371, 1394], "concatmethod": 66, "conclus": [137, 139, 356, 969], "concret": [183, 187], "condit": [41, 228, 236, 261, 284, 289, 356, 429, 433, 513, 534, 701, 727, 774, 798, 840, 850, 887, 897, 914, 969, 1156, 1371, 1387, 1392, 1398], "conditional_format": [41, 356], "conditionalformatdict": [41, 356], "config": [0, 58, 223, 294, 313, 330, 356, 697, 707, 709, 721, 789, 790, 792, 793, 794, 862, 872, 877, 919, 938, 969, 1288, 1300, 1312], "configur": [5, 33, 40, 56, 156, 164, 168, 169, 172, 207, 356, 359, 863, 872, 883, 911, 924, 944, 969, 1371, 1376], "configure_axisx": [356, 359, 1371, 1376], "configure_point": [356, 359, 1371, 1376], "conflat": [534, 850], "conform": [152, 1402], "confus": [107, 369, 541, 542, 721, 850], "conjunct": [41, 98, 154, 157, 163, 181, 356, 804, 807, 969], "conn": 154, "connect": [38, 39, 43, 47, 49, 50, 51, 52, 76, 152, 154, 155, 158, 160, 162, 164, 167, 170, 171, 172, 173, 197, 356, 863, 969], "connectionorcursor": [39, 154, 356], "connector": 155, "connectorx": [154, 155, 175], "consecut": [235, 356, 409, 512, 518, 695, 711, 719, 850, 886, 969, 1021, 1136, 1141, 1286, 1302, 1311, 1371], "consid": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 98, 99, 100, 132, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 215, 227, 228, 230, 256, 261, 264, 265, 271, 290, 303, 313, 318, 319, 321, 323, 325, 356, 359, 360, 361, 427, 436, 446, 447, 454, 466, 517, 528, 596, 597, 604, 620, 621, 624, 626, 628, 629, 645, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 756, 775, 777, 784, 798, 808, 809, 846, 850, 867, 872, 873, 880, 881, 883, 897, 902, 906, 911, 924, 927, 931, 932, 934, 935, 943, 952, 969, 975, 1039, 1043, 1048, 1053, 1064, 1065, 1071, 1083, 1125, 1151, 1221, 1242, 1255, 1256, 1259, 1261, 1262, 1269, 1271, 1349, 1354, 1356, 1371, 1376, 1381], "consider": 148, "consist": [244, 278, 314, 356, 733, 789, 790, 808, 840, 890, 969, 975, 984, 1133, 1324, 1351, 1371], "consola": [41, 356], "const": 11, "constant": [231, 288, 356, 455, 504, 510, 809, 850, 917, 969, 1072, 1126, 1128, 1134, 1371], "constrain": [58, 167, 227, 228, 356, 880, 881, 969, 975], "constraint": [236, 284, 356, 513, 621, 622, 624, 626, 628, 629, 840, 850, 887, 914, 969, 975, 1401], "construct": [57, 98, 100, 107, 133, 135, 136, 137, 138, 139, 140, 148, 154, 356, 519, 822, 825, 841, 846, 850, 878, 969, 1043, 1371, 1386], "construct_categor": 57, "constructor": [148, 157, 187], "consumpt": [53, 54, 55], "contain": [5, 38, 39, 40, 41, 49, 53, 54, 55, 58, 63, 103, 135, 138, 140, 149, 154, 155, 156, 164, 168, 169, 172, 182, 183, 185, 187, 215, 220, 227, 228, 229, 245, 253, 258, 276, 313, 314, 318, 319, 325, 337, 356, 369, 371, 394, 413, 416, 429, 433, 449, 525, 538, 567, 597, 695, 697, 701, 704, 706, 708, 711, 713, 726, 727, 743, 765, 766, 767, 768, 779, 812, 840, 850, 867, 875, 878, 880, 881, 882, 891, 911, 931, 935, 947, 969, 975, 982, 983, 1006, 1041, 1046, 1147, 1148, 1192, 1227, 1286, 1288, 1292, 1295, 1297, 1299, 1302, 1304, 1317, 1318, 1334, 1345, 1351, 1371, 1389], "contains_with_expr": 410, "contains_with_lit": 410, "content": [14, 49, 50, 51, 52, 685, 850, 969, 973, 1277, 1371], "context": [57, 98, 100, 144, 146, 189, 276, 303, 356, 361, 367, 513, 560, 596, 597, 608, 691, 692, 761, 781, 797, 800, 806, 807, 812, 821, 825, 828, 849, 850, 861, 862, 913, 927, 940, 969, 1185, 1360, 1371, 1386, 1399, 1401], "contigu": [66, 133, 134, 138, 152, 153, 156, 158, 160, 162, 164, 167, 168, 170, 171, 172, 283, 314, 356], "continu": [447, 645, 689, 850, 1065, 1242, 1281, 1371, 1388], "contrast": 794, "control": [11, 12, 41, 52, 65, 66, 157, 181, 183, 302, 303, 313, 356, 653, 692, 829, 850, 872, 873, 883, 911, 924, 926, 927, 944, 966, 969, 1250, 1349, 1371, 1383, 1386, 1399], "conveni": [233, 318, 356, 961, 984, 1133, 1371, 1381], "convers": [134, 211, 257, 258, 290, 291, 310, 314, 315, 356, 459, 733, 735, 736, 740, 862, 1076, 1324, 1326, 1327, 1331, 1351, 1352, 1371, 1397, 1399], "convert": [40, 56, 103, 134, 138, 149, 156, 157, 163, 168, 211, 291, 309, 310, 311, 312, 313, 314, 315, 317, 318, 356, 405, 406, 448, 459, 484, 487, 587, 588, 596, 622, 647, 706, 733, 735, 736, 737, 738, 740, 745, 850, 969, 1017, 1018, 1047, 1076, 1105, 1108, 1212, 1213, 1297, 1324, 1326, 1327, 1328, 1329, 1331, 1337, 1340, 1348, 1349, 1350, 1351, 1352, 1354, 1371, 1394, 1396, 1397, 1399], "convert_time_zon": [481, 1102], "coo": [285, 356, 915, 969], "coord": 748, "coordin": [41, 356, 1155, 1371], "copi": [37, 133, 134, 151, 209, 211, 217, 218, 258, 308, 314, 315, 330, 356, 510, 850, 870, 871, 938, 969, 977, 1052, 1054, 1134, 1345, 1350, 1351, 1352, 1371, 1399], "corasick": [697, 707, 709, 721, 1288, 1298, 1300, 1312], "core": [1, 261, 356, 897, 969, 1399, 1402], "cores_right": [261, 356, 897, 969], "corner": [21, 41, 140, 356], "corr": [356, 1392], "corrcoef": [221, 356], "correct": [97, 149, 157, 163, 505, 506, 546, 588, 659, 671, 689, 850, 901, 969, 1129, 1130, 1171, 1255, 1262, 1281, 1371], "correctli": [41, 356, 596, 798, 850], "correl": [221, 356, 780, 826, 1388], "correlationmethod": 780, "correspond": [245, 260, 288, 314, 326, 356, 427, 468, 477, 482, 495, 597, 648, 658, 662, 664, 666, 668, 670, 673, 675, 677, 756, 789, 790, 792, 793, 837, 838, 850, 872, 891, 896, 917, 969, 1085, 1098, 1103, 1116, 1244, 1371, 1388], "cosd": 1392, "cosh": [850, 1371], "cosin": [374, 375, 437, 438, 596, 850, 986, 987, 1055, 1056, 1371, 1396], "cost": [261, 291, 356, 719, 897, 969, 1311], "cost_usd": [719, 1311], "cot": [850, 1371, 1392], "cotang": [439, 850, 1057, 1371, 1396], "cotd": 1392, "could": [40, 95, 105, 356, 686, 784, 794, 798, 840, 850, 869, 877, 969, 1278, 1371], "count": [41, 173, 214, 223, 245, 276, 277, 288, 320, 326, 332, 347, 356, 373, 390, 399, 441, 454, 466, 504, 528, 549, 557, 569, 574, 597, 620, 636, 644, 648, 658, 662, 664, 666, 668, 670, 673, 675, 677, 698, 750, 759, 761, 769, 775, 783, 807, 820, 833, 850, 866, 877, 891, 909, 917, 941, 957, 969, 975, 985, 1002, 1011, 1059, 1066, 1071, 1083, 1128, 1151, 1174, 1182, 1194, 1199, 1228, 1236, 1241, 1289, 1341, 1358, 1360, 1371, 1376, 1380, 1392], "count_digit": 698, "count_num": [41, 356], "counterpart": 148, "countri": [260, 356, 455, 896, 969, 1072], "country_holidai": [454, 466, 775, 1071, 1083], "covar": 1388, "covar_samp": 1388, "covari": [149, 782, 827, 850, 1388], "cover": 11, "cow": [717, 718, 1308, 1309], "cpu": [152, 153, 175, 313, 356, 944, 1349, 1371], "crab": [696, 708, 1287, 1299], "crate": [38, 49, 103, 356, 696, 698, 704, 705, 706, 708, 719, 720, 733, 735, 736, 740, 969, 975, 1287, 1289, 1295, 1296, 1297, 1299, 1310, 1311, 1324, 1326, 1327, 1331], "creat": [39, 41, 49, 50, 51, 52, 53, 55, 57, 100, 133, 137, 139, 152, 153, 154, 155, 158, 160, 164, 168, 169, 181, 182, 183, 184, 185, 186, 187, 188, 207, 217, 218, 245, 277, 280, 288, 313, 314, 326, 330, 333, 356, 359, 360, 458, 482, 495, 504, 528, 588, 596, 649, 658, 662, 664, 666, 668, 670, 673, 675, 677, 778, 788, 789, 790, 791, 792, 793, 794, 808, 836, 837, 838, 840, 846, 850, 870, 871, 877, 883, 891, 917, 938, 942, 969, 973, 974, 1052, 1054, 1065, 1075, 1103, 1116, 1128, 1151, 1234, 1242, 1245, 1349, 1351, 1371, 1376, 1398, 1399, 1402], "create_async_engin": 154, "create_engin": [39, 356], "created_at": [198, 201, 202], "created_bi": [198, 201, 202], "creation": [144, 146, 153], "credenti": [32, 33, 34, 35, 38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 862, 969], "credential_provid": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 969], "credentialproviderfunct": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 969], "cross": [259, 356, 895, 969, 1387], "crustacean": [708, 1299], "cst": [482, 495, 1103, 1116], "csv": [37, 38, 49, 50, 51, 52, 53, 54, 55, 151, 152, 153, 157, 158, 167, 200, 356, 862, 969], "csvencod": [152, 153, 167], "csvquotestyl": [38, 49, 356, 969], "ctx": [53, 54, 55, 1380, 1382, 1383, 1384, 1385, 1386, 1399], "cube": [1, 62, 434, 643, 850, 1049, 1371, 1393], "cuda": 944, "cum_count": [850, 1371], "cum_count_revers": [441, 850], "cum_max": [850, 1371], "cum_max_all_fil": [442, 850], "cum_max_revers": [442, 850], "cum_min": [850, 1371], "cum_min_revers": [443, 850], "cum_prod": [366, 850, 1371], "cum_prod_revers": [444, 850], "cum_reduc": 784, "cum_sum": [531, 638, 749, 787, 850, 893, 969, 1170, 1371], "cum_sum_revers": [445, 850], "cumsum_horizont": 786, "cumul": [441, 442, 443, 444, 445, 783, 784, 785, 786, 787, 850, 1059, 1060, 1061, 1062, 1063, 1371], "cumulative_ev": [850, 1371], "cumulative_sal": [638, 850], "current": [2, 3, 5, 6, 31, 38, 39, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 140, 144, 145, 146, 154, 155, 162, 164, 167, 170, 171, 172, 180, 181, 183, 184, 185, 186, 187, 188, 197, 217, 218, 225, 259, 260, 285, 303, 313, 318, 356, 359, 360, 463, 588, 639, 850, 865, 870, 871, 879, 895, 896, 915, 924, 927, 944, 969, 975, 1052, 1054, 1072, 1080, 1237, 1349, 1354, 1371, 1376, 1383, 1399], "cursor": [39, 154, 356], "custom": [1, 28, 40, 41, 59, 60, 61, 62, 106, 148, 165, 186, 188, 223, 264, 280, 342, 356, 406, 454, 466, 484, 487, 588, 596, 597, 660, 761, 775, 811, 812, 850, 877, 901, 952, 969, 1018, 1071, 1083, 1105, 1108, 1213, 1221, 1256, 1360, 1371, 1402], "customis": [41, 356], "cut": [645, 850, 1242, 1371], "cxx": 1394, "cypher": 154, "d": [29, 36, 38, 40, 41, 43, 44, 47, 136, 173, 212, 236, 243, 245, 246, 247, 259, 263, 284, 307, 308, 318, 324, 328, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 366, 368, 441, 464, 484, 487, 534, 603, 642, 678, 684, 698, 705, 719, 720, 725, 733, 735, 736, 776, 777, 794, 800, 829, 850, 887, 891, 895, 914, 927, 948, 950, 953, 954, 955, 956, 957, 958, 959, 969, 975, 1047, 1059, 1081, 1105, 1108, 1156, 1180, 1289, 1296, 1310, 1311, 1316, 1324, 1326, 1327, 1338, 1371, 1387, 1389, 1391, 1394, 1395], "d1": [41, 356, 458], "d2": 458, "d3": 458, "d789": [41, 356], "d_4": [725, 1316], "d_awai": [678, 850], "d_to_even": [678, 850], "dai": [72, 73, 90, 245, 258, 260, 288, 326, 356, 359, 454, 466, 474, 475, 477, 478, 480, 482, 484, 487, 488, 495, 497, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 775, 788, 789, 790, 791, 792, 793, 794, 837, 838, 850, 891, 896, 917, 969, 975, 1071, 1083, 1095, 1096, 1098, 1099, 1101, 1103, 1105, 1108, 1109, 1116, 1118, 1128, 1371, 1395], "dark": 1380, "data": [0, 1, 11, 19, 20, 22, 25, 29, 36, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 66, 71, 72, 73, 75, 86, 87, 89, 90, 100, 103, 107, 109, 112, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 205, 209, 211, 218, 219, 229, 231, 232, 233, 243, 244, 245, 257, 258, 259, 262, 264, 278, 279, 280, 283, 289, 290, 291, 293, 297, 300, 308, 313, 314, 315, 318, 320, 330, 334, 354, 356, 360, 361, 369, 370, 371, 374, 375, 376, 377, 378, 379, 382, 385, 386, 387, 388, 389, 391, 394, 396, 397, 398, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 428, 430, 431, 432, 436, 437, 438, 439, 440, 447, 448, 449, 454, 455, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 509, 520, 522, 523, 524, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 548, 549, 553, 554, 556, 561, 567, 569, 576, 587, 589, 595, 597, 632, 633, 637, 638, 645, 647, 648, 651, 652, 653, 654, 656, 657, 662, 664, 666, 668, 670, 673, 675, 677, 678, 680, 682, 687, 688, 689, 695, 698, 699, 700, 703, 704, 705, 706, 710, 711, 712, 713, 714, 715, 723, 724, 725, 726, 733, 734, 735, 736, 738, 740, 743, 752, 753, 754, 757, 758, 764, 770, 778, 781, 788, 789, 790, 791, 792, 793, 794, 804, 805, 807, 808, 809, 810, 811, 812, 822, 825, 836, 837, 838, 841, 846, 850, 862, 870, 871, 878, 882, 884, 890, 891, 918, 922, 938, 969, 974, 977, 982, 983, 995, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1017, 1019, 1022, 1023, 1024, 1026, 1027, 1040, 1042, 1044, 1045, 1052, 1053, 1054, 1065, 1066, 1071, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1125, 1126, 1128, 1132, 1133, 1151, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1176, 1177, 1178, 1179, 1181, 1186, 1192, 1194, 1201, 1212, 1214, 1221, 1235, 1242, 1244, 1248, 1249, 1250, 1251, 1253, 1254, 1266, 1268, 1276, 1281, 1286, 1287, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1301, 1302, 1303, 1304, 1305, 1306, 1314, 1315, 1316, 1317, 1324, 1325, 1326, 1327, 1329, 1331, 1334, 1345, 1350, 1351, 1352, 1353, 1357, 1370, 1371, 1380, 1387, 1394, 1399, 1401], "data_bar": [41, 356], "data_bar_2010": [41, 356], "data_label": [41, 356], "data_page_s": [47, 52, 356, 969], "data_source_format": 202, "databas": [39, 131, 154, 155, 356, 862], "databrick": 192, "databricks_format": 200, "datafram": [0, 1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 85, 97, 104, 107, 108, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 176, 177, 180, 181, 207, 354, 355, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 824, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 846, 850, 862, 865, 872, 873, 875, 877, 879, 882, 884, 888, 891, 895, 896, 897, 898, 899, 901, 906, 907, 911, 916, 918, 925, 927, 932, 933, 934, 935, 937, 940, 945, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 969, 974, 975, 1065, 1066, 1102, 1128, 1151, 1221, 1242, 1300, 1304, 1316, 1317, 1340, 1346, 1347, 1360, 1371, 1380, 1381, 1382, 1383, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1399, 1402], "dataframeplot": [356, 359], "dataload": [318, 356], "datapoint": [245, 356, 891, 969], "dataset": [15, 47, 76, 152, 153, 156, 157, 163, 167, 168, 172, 173, 259, 318, 356, 546, 850, 862, 895, 901, 969, 1171, 1371, 1400], "datasourceformat": [202, 205], "datat": [41, 356], "datatyp": [0, 38, 49, 99, 133, 135, 136, 137, 139, 141, 159, 161, 162, 164, 166, 171, 172, 184, 185, 187, 229, 238, 356, 428, 507, 684, 754, 777, 796, 798, 810, 846, 850, 862, 882, 969, 974, 975, 1040, 1066, 1121, 1221, 1275, 1353, 1371, 1397], "datatypeexpr": [48, 99, 361, 414, 428, 596, 653, 712, 770, 804, 805, 850, 869, 969], "date": [17, 41, 58, 73, 152, 153, 155, 157, 163, 164, 167, 170, 172, 173, 216, 223, 243, 245, 258, 260, 288, 303, 356, 359, 454, 456, 457, 458, 459, 462, 464, 466, 467, 468, 470, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 638, 658, 662, 664, 666, 668, 670, 673, 675, 677, 733, 735, 754, 775, 789, 790, 792, 793, 800, 808, 810, 836, 850, 869, 877, 891, 896, 917, 969, 975, 1071, 1073, 1074, 1075, 1076, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1128, 1230, 1231, 1324, 1326, 1353, 1371, 1392, 1395, 1397], "date32": [258, 356], "date_format": [38, 49, 356, 969], "date_min": 477, "date_minus_1y_2mon": 1098, "date_part": 1392, "date_plus_1i": [477, 1098], "date_rang": [260, 326, 356, 462, 464, 478, 486, 497, 792, 793, 896, 969, 1079, 1094, 1099, 1100, 1117, 1118], "date_right": [260, 356, 896, 969], "datetim": [17, 38, 41, 49, 56, 58, 103, 140, 156, 164, 168, 170, 172, 183, 184, 185, 187, 197, 198, 201, 202, 216, 223, 243, 245, 258, 260, 288, 303, 326, 356, 359, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 605, 638, 658, 662, 664, 666, 668, 670, 673, 675, 677, 733, 736, 754, 775, 788, 789, 790, 792, 793, 794, 800, 808, 810, 837, 838, 850, 869, 877, 891, 896, 917, 969, 974, 975, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1128, 1230, 1231, 1324, 1327, 1351, 1353, 1371, 1394, 1395], "datetime_cast": 56, "datetime_format": [38, 49, 356, 969], "datetime_rang": [245, 356, 456, 459, 474, 475, 477, 481, 482, 488, 489, 490, 491, 492, 493, 494, 495, 498, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 850, 891, 969, 1072, 1073, 1076, 1080, 1081, 1082, 1088, 1089, 1091, 1093, 1095, 1096, 1097, 1098, 1102, 1103, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116], "datetime_str": 484, "datetimecastopt": 56, "datetimeindex": 138, "david": 1400, "day_nam": [484, 487], "day_of_month": [462, 478, 497], "day_of_year": [462, 478, 497], "daylight": [245, 260, 288, 326, 356, 455, 463, 477, 482, 495, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 794, 837, 838, 850, 891, 896, 917, 969, 1080, 1098, 1103, 1116], "dayofweek": 1395, "dayofyear": 1395, "days_diff": 488, "db": [39, 154, 155, 356], "dbapi2": 154, "dbc": [698, 1289], "dbreadengin": 155, "dbwriteengin": [39, 356], "dbwritemod": [39, 356], "dd": [41, 356, 1394], "ddd": [1, 41, 356, 744, 746, 747], "dddd": 1394, "ddof": [304, 327, 356, 403, 408, 584, 590, 672, 673, 676, 677, 694, 762, 780, 782, 826, 827, 831, 839, 850, 928, 936, 969, 1015, 1020, 1209, 1215, 1263, 1265, 1285, 1361, 1371], "ddww": 1394, "de": 1394, "deal": [47, 52, 257, 356, 369, 371, 480, 481, 648, 733, 736, 765, 766, 767, 768, 791, 850, 969, 982, 983, 1101, 1102, 1244, 1324, 1327, 1371], "debug": [30, 901, 969, 1402], "decad": [1380, 1395], "decai": [503, 504, 505, 506, 850, 1127, 1128, 1129, 1130, 1371], "decemb": [487, 1108], "decim": [9, 11, 12, 28, 29, 38, 41, 49, 152, 153, 167, 356, 360, 678, 737, 850, 969, 975, 1266, 1328, 1371, 1393], "decimal_comma": [152, 153, 167], "decimal_separ": [9, 28], "declar": [133, 135, 136, 137, 139, 154, 161, 162, 171, 313, 318, 356, 840, 969, 975, 1380], "decod": [152, 153, 712], "decompos": [322, 356, 933, 969], "decompress": [47, 50, 52, 356, 969], "decor": [57, 59, 60, 61, 62, 183, 187, 264, 356, 597, 850, 861, 862, 1221, 1371], "dedic": [1, 134, 257, 290, 356, 975, 1399], "deem": [223, 356, 877, 969], "deepcopi": [217, 356, 870, 969, 1052, 1371], "def": [1, 57, 59, 60, 61, 62, 154, 181, 183, 187, 207, 279, 320, 356, 366, 642, 702, 705, 730, 764, 811, 850, 873, 910, 969, 975, 1293, 1296, 1402], "default": [4, 5, 9, 10, 11, 15, 28, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 64, 65, 66, 70, 73, 74, 75, 133, 134, 135, 136, 137, 138, 139, 140, 149, 152, 153, 155, 157, 158, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 207, 223, 224, 227, 228, 231, 240, 244, 245, 246, 257, 259, 260, 265, 269, 271, 278, 280, 288, 289, 290, 291, 292, 296, 299, 303, 304, 306, 311, 313, 314, 318, 321, 323, 324, 325, 327, 332, 341, 356, 368, 369, 371, 389, 394, 401, 406, 414, 447, 449, 454, 466, 480, 481, 487, 500, 502, 503, 505, 506, 526, 538, 556, 563, 567, 576, 581, 582, 584, 588, 590, 591, 596, 604, 605, 608, 611, 630, 631, 633, 638, 639, 645, 648, 652, 653, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 685, 694, 695, 704, 711, 723, 728, 729, 730, 733, 735, 736, 738, 740, 761, 762, 765, 767, 770, 774, 775, 776, 779, 780, 782, 789, 790, 791, 792, 793, 794, 797, 800, 804, 805, 806, 808, 809, 810, 816, 822, 825, 828, 831, 832, 834, 837, 838, 839, 840, 841, 850, 872, 873, 877, 878, 880, 881, 883, 890, 891, 895, 896, 902, 906, 911, 913, 917, 921, 923, 924, 927, 928, 932, 934, 935, 936, 941, 944, 951, 969, 973, 975, 982, 983, 1001, 1006, 1013, 1018, 1026, 1053, 1065, 1066, 1071, 1083, 1101, 1102, 1108, 1122, 1126, 1127, 1129, 1130, 1149, 1161, 1181, 1188, 1192, 1201, 1206, 1207, 1213, 1230, 1231, 1237, 1242, 1244, 1249, 1250, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1268, 1274, 1277, 1285, 1286, 1287, 1295, 1299, 1302, 1314, 1319, 1320, 1321, 1324, 1326, 1327, 1329, 1331, 1349, 1351, 1360, 1361, 1371, 1393, 1394, 1402], "default_match": [696, 708], "default_scop": 35, "defaultazurecredenti": 34, "defaultdict": [291, 356], "defer": [207, 356, 359, 360, 1371, 1376], "defin": [38, 41, 49, 56, 73, 76, 154, 161, 164, 172, 180, 181, 183, 216, 227, 228, 232, 245, 264, 276, 279, 288, 325, 342, 356, 432, 534, 563, 597, 642, 645, 657, 658, 662, 664, 666, 668, 670, 673, 675, 677, 710, 715, 723, 734, 741, 789, 790, 792, 793, 808, 809, 812, 832, 837, 838, 850, 869, 880, 881, 884, 891, 910, 917, 935, 952, 969, 973, 974, 975, 1045, 1156, 1188, 1221, 1242, 1254, 1301, 1306, 1314, 1325, 1332, 1371], "definit": [41, 77, 356, 546, 659, 850, 974, 975, 1171, 1255, 1371], "deflat": [36, 356], "deg": 1396, "degre": [304, 327, 356, 584, 590, 647, 672, 673, 676, 677, 694, 762, 772, 782, 826, 827, 831, 839, 850, 928, 936, 969, 1263, 1265, 1285, 1361, 1371, 1392], "delai": 97, "delet": [76, 1387, 1398], "deletionfil": 172, "delimit": [46, 49, 162, 171, 280, 311, 356, 695, 711, 969, 1286, 1302, 1346, 1371, 1394], "delta": [40, 156, 168, 200, 304, 327, 356, 584, 590, 672, 673, 676, 677, 694, 762, 782, 826, 827, 831, 839, 850, 862, 928, 936, 969, 1263, 1265, 1285, 1361, 1371], "delta_merge_opt": [40, 356], "delta_table_opt": [156, 168, 197], "delta_table_vers": 197, "delta_write_opt": [40, 356], "deltalak": [40, 156, 168, 175, 197, 356], "deltashar": 200, "deltat": [40, 156, 168, 356], "demo": [41, 356], "demonstr": [152, 517, 850, 975], "dens": [21, 243, 356, 648, 850, 1244, 1371], "densiti": [1371, 1376], "depend": [47, 53, 57, 63, 100, 154, 157, 163, 175, 212, 213, 356, 387, 388, 553, 554, 597, 608, 645, 648, 794, 797, 800, 806, 850, 979, 999, 1000, 1178, 1179, 1242, 1244, 1371, 1402], "deploi": [183, 187], "deprec": [40, 64, 67, 152, 153, 164, 172, 180, 181, 182, 183, 187, 190, 214, 271, 314, 332, 337, 356, 461, 498, 519, 615, 652, 695, 703, 763, 772, 780, 781, 850, 866, 872, 883, 906, 911, 921, 924, 934, 940, 941, 947, 969, 1078, 1087, 1088, 1119, 1148, 1249, 1286, 1294, 1351, 1371], "depth": 148, "desc": [975, 1380, 1383, 1387, 1389], "descend": [58, 215, 297, 302, 319, 356, 382, 402, 427, 583, 638, 648, 681, 682, 691, 692, 756, 761, 773, 850, 867, 922, 926, 931, 969, 994, 1014, 1168, 1208, 1244, 1270, 1272, 1283, 1360, 1371], "describ": [183, 243, 356, 716, 969, 1307, 1371], "descript": [245, 356, 891, 969, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1397, 1400, 1401], "deseri": [148, 296, 356, 519, 611, 850, 921, 969], "deserializ": [224, 296, 356, 449, 611, 850, 878, 921, 969], "design": [313, 318, 356, 865], "desir": [183, 259, 356, 406, 498, 588, 895, 969, 1018, 1119, 1213], "destin": 155, "detail": [63, 134, 154, 155, 176, 178, 211, 245, 325, 356, 487, 754, 850, 891, 935, 944, 969, 1108, 1353, 1371, 1402], "determin": [15, 38, 41, 49, 58, 66, 95, 148, 152, 153, 154, 157, 163, 164, 167, 172, 174, 215, 219, 238, 245, 257, 258, 264, 288, 319, 320, 326, 356, 361, 427, 466, 467, 480, 481, 528, 588, 608, 645, 651, 653, 689, 697, 710, 733, 734, 736, 737, 756, 791, 809, 822, 825, 841, 850, 867, 874, 875, 882, 891, 917, 931, 937, 969, 1039, 1083, 1084, 1101, 1102, 1151, 1213, 1242, 1248, 1249, 1250, 1281, 1288, 1324, 1327, 1328, 1356, 1371], "determinist": [761, 850, 1360, 1371], "dev": [210, 978, 1263, 1371], "develop": [155, 183, 187], "deviat": [304, 356, 505, 672, 673, 694, 831, 850, 928, 969, 1129, 1285, 1371, 1388], "devic": [313, 356, 872, 883, 911, 924, 944, 969, 1349, 1371], "devicememoryresourc": 944, "df": [1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 59, 60, 85, 104, 108, 134, 135, 136, 137, 138, 139, 140, 153, 154, 155, 167, 180, 181, 183, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 414, 415, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 737, 738, 739, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 824, 828, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 846, 850, 891, 917, 933, 935, 949, 952, 960, 969, 975, 1102, 1128, 1300, 1304, 1316, 1317, 1347, 1371, 1376, 1380, 1381, 1382, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1399, 1402], "df0": [272, 356, 907, 969, 1386], "df1": [58, 66, 176, 177, 230, 233, 272, 303, 328, 356, 907, 969, 1383, 1385, 1386, 1387, 1399], "df2": [58, 66, 176, 177, 230, 233, 328, 356, 1383, 1385, 1386, 1387, 1399], "df3": [58, 356], "df4": 356, "df5": 356, "df6": 356, "df_a": 1399, "df_a1": 66, "df_a2": 66, "df_a3": 66, "df_agg_nuniqu": [276, 356], "df_b": 1399, "df_count": [761, 850], "df_current_batch": 153, "df_d1": 66, "df_d2": 66, "df_from_str_repr": [312, 356], "df_h1": 66, "df_h2": 66, "df_new_grid": [532, 850], "df_nuniqu": [276, 356], "df_original_grid": [532, 850], "df_panda": 1381, "df_pd": 134, "df_tempor": [662, 664, 666, 668, 670, 673, 675, 677, 850], "dfi": 211, "diagon": [66, 320, 356], "diagonal_relax": 66, "diagram": [913, 969], "dict": [31, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 59, 61, 63, 133, 135, 136, 137, 138, 139, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 183, 197, 198, 201, 202, 237, 257, 278, 289, 290, 291, 309, 310, 313, 318, 320, 356, 850, 969, 974, 975, 1139, 1371, 1384], "dictat": [149, 477, 850, 1098], "dictionari": [31, 38, 40, 41, 43, 47, 49, 50, 51, 52, 63, 89, 133, 135, 136, 137, 139, 148, 152, 153, 154, 155, 156, 159, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 197, 257, 278, 289, 290, 291, 309, 310, 313, 318, 356, 969, 974], "did": [455, 1072], "diff": [330, 356, 488, 489, 490, 491, 492, 493, 494, 577, 850, 938, 969, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1202, 1371], "differ": [41, 47, 56, 103, 106, 127, 152, 157, 172, 173, 176, 178, 207, 227, 233, 245, 246, 257, 259, 280, 288, 290, 291, 310, 313, 314, 320, 356, 450, 462, 477, 478, 481, 487, 496, 502, 517, 526, 558, 577, 579, 588, 597, 630, 631, 633, 638, 652, 653, 733, 759, 797, 800, 806, 850, 863, 880, 881, 883, 891, 895, 917, 969, 973, 975, 1047, 1067, 1079, 1098, 1099, 1102, 1108, 1117, 1124, 1133, 1149, 1183, 1202, 1204, 1221, 1230, 1231, 1233, 1249, 1250, 1324, 1371, 1395, 1397, 1399], "digit": [74, 642, 678, 679, 705, 850, 975, 1266, 1267, 1289, 1296, 1371, 1402], "dimens": [133, 135, 137, 139, 161, 162, 171, 356, 654, 850, 969, 1251, 1351, 1371], "dimension": [135, 137, 139, 314, 356, 969, 1371], "direct": [41, 155, 164, 169, 172, 299, 313, 324, 356, 401, 581, 683, 850, 923, 969, 1013, 1206, 1274, 1371], "directli": [6, 31, 41, 65, 66, 154, 183, 187, 207, 213, 291, 313, 356, 503, 505, 506, 653, 825, 850, 873, 969, 1127, 1129, 1130, 1250, 1349, 1371, 1383, 1399, 1402], "directori": [41, 47, 49, 50, 51, 52, 53, 55, 149, 164, 167, 170, 172, 356, 969], "dirpath": [36, 38, 43, 44, 47, 167, 356], "disabl": [47, 52, 57, 98, 100, 164, 170, 184, 257, 356, 872, 969], "disable_string_cach": 100, "disallow": 183, "discard": [236, 284, 356, 513, 850, 887, 914, 969, 1137, 1371], "disco": [707, 709, 1298, 1300], "discont": [707, 709, 1298, 1300], "discourag": [597, 850], "discoveri": [280, 356], "discret": [447, 450, 500, 558, 577, 645, 850, 1065, 1067, 1122, 1183, 1202, 1242, 1371], "disk": [47, 49, 50, 51, 52, 158, 356, 612, 863, 924, 969], "dispatch": 975, "displai": [7, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 41, 223, 243, 356, 877, 883, 924, 969], "distanc": [260, 356, 896, 969], "distinct": [41, 187, 278, 280, 334, 356, 389, 407, 537, 538, 540, 556, 589, 648, 657, 794, 850, 1001, 1019, 1160, 1161, 1163, 1181, 1214, 1244, 1254, 1371, 1388, 1398, 1400, 1402], "distinct_count": [47, 52, 356, 969], "distinguish": [487, 1108], "distribut": [546, 689, 850, 913, 969, 1171, 1281, 1371], "div": 1392, "diverg": [64, 132], "divid": [21, 447, 482, 495, 503, 505, 506, 517, 546, 645, 648, 850, 1065, 1103, 1116, 1127, 1129, 1130, 1171, 1242, 1371, 1388, 1393], "divis": [517, 757, 850, 1393], "divisor": [304, 327, 356, 584, 590, 672, 673, 676, 677, 694, 762, 782, 826, 827, 831, 839, 850, 928, 936, 969, 1263, 1265, 1285, 1361, 1371], "dl": [318, 356], "do": [1, 41, 56, 58, 64, 135, 136, 139, 152, 164, 167, 172, 176, 177, 178, 179, 212, 223, 225, 233, 256, 259, 260, 280, 285, 308, 320, 324, 356, 359, 454, 560, 596, 719, 720, 728, 729, 730, 780, 822, 825, 841, 850, 868, 872, 877, 879, 883, 895, 896, 901, 911, 913, 915, 924, 944, 969, 975, 1064, 1071, 1133, 1185, 1310, 1311, 1319, 1320, 1321, 1354, 1371, 1376], "do_polars_oper": 30, "do_someth": 154, "do_various_th": 207, "doc": [40, 43, 44, 134, 155, 158, 160, 176, 178, 209, 210, 221, 356, 977, 978], "document": [33, 103, 152, 155, 209, 356, 360, 484, 487, 713, 733, 735, 736, 740, 846, 944, 977, 1047, 1105, 1108, 1304, 1324, 1326, 1327, 1331], "doe": [11, 38, 40, 49, 50, 51, 52, 58, 64, 65, 121, 133, 135, 136, 137, 139, 140, 152, 153, 154, 155, 156, 157, 161, 162, 167, 168, 171, 173, 213, 218, 233, 240, 245, 246, 258, 259, 265, 284, 289, 290, 291, 321, 330, 333, 356, 359, 360, 498, 513, 517, 526, 588, 597, 697, 707, 709, 721, 729, 730, 759, 846, 850, 865, 871, 872, 873, 877, 883, 887, 891, 895, 901, 902, 911, 914, 924, 932, 938, 942, 969, 1054, 1119, 1133, 1137, 1149, 1276, 1288, 1298, 1300, 1312, 1371, 1376, 1394], "doesn": [40, 152, 167, 245, 260, 356, 500, 850, 891, 896, 969, 1122, 1371], "dog": [696, 739, 742, 779, 1287, 1330, 1333], "doi": 1395, "dollar": [719, 720, 1310, 1311], "domain": [1, 705, 1296], "don": [66, 245, 260, 264, 321, 324, 356, 446, 560, 597, 638, 850, 891, 896, 932, 969, 975, 1064, 1185, 1221, 1371], "done": [49, 50, 51, 52, 64, 65, 132, 153, 173, 207, 214, 260, 356, 372, 373, 638, 850, 866, 869, 872, 873, 883, 896, 911, 969, 985, 1371], "dot": [58, 612, 846, 850, 913, 924, 969, 1371], "doubl": [315, 356, 719, 720, 1310, 1311], "dow": 1395, "down": [167, 170, 171, 172, 173, 216, 356, 428, 516, 850, 1140, 1371], "downcast": 56, "download": [162, 167, 170, 171, 612, 924, 969], "downstream": [314, 356, 682, 850, 1272, 1371], "dr": 169, "drago": [710, 1301], "dragon": 710, "dragonfr": 1301, "dragonfruit": [710, 723, 734, 1301, 1314, 1325], "dramat": 157, "draw": [21, 26, 183, 187, 1402], "drawback": 846, "drawfn": 1402, "drawing_charact": 21, "dremio": 154, "driver": [39, 154, 155, 356], "drop": [1, 136, 226, 227, 228, 264, 284, 321, 330, 356, 450, 452, 453, 558, 559, 645, 850, 880, 881, 914, 932, 938, 969, 1067, 1069, 1070, 1183, 1184, 1242, 1371, 1398], "drop_dupl": [321, 356, 932, 969], "drop_empty_col": [157, 163], "drop_empty_row": [157, 163], "drop_first": [311, 356, 1346, 1371], "drop_in_plac": 356, "drop_nan": [228, 356, 453, 850, 881, 969, 1070, 1371], "drop_nul": [227, 356, 452, 850, 880, 969, 1069, 1371], "dset": 173, "dst": [482, 495, 1103, 1116], "dst_offset": [455, 1072], "dt": [1, 41, 58, 157, 163, 288, 356, 658, 794, 850, 859, 917, 969, 975, 1379, 1394, 1395], "dt1": 1394, "dt2": 1394, "dtm": [41, 356, 458, 487, 975, 1075, 1108, 1394], "dtm_iso": 487, "dtm_iso_strict": 487, "dtype": [11, 41, 56, 57, 61, 67, 73, 77, 89, 98, 100, 110, 133, 135, 137, 139, 140, 152, 153, 154, 155, 157, 161, 162, 163, 167, 171, 180, 181, 182, 183, 187, 209, 211, 216, 219, 231, 245, 260, 288, 312, 313, 314, 315, 318, 324, 333, 356, 414, 428, 429, 430, 431, 432, 433, 444, 445, 487, 498, 507, 520, 555, 563, 594, 596, 597, 604, 643, 650, 651, 658, 684, 686, 712, 733, 750, 754, 760, 770, 777, 796, 798, 800, 804, 805, 807, 808, 809, 810, 811, 812, 822, 825, 832, 841, 850, 869, 874, 891, 896, 917, 942, 969, 974, 975, 977, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1026, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1052, 1062, 1063, 1066, 1067, 1108, 1119, 1126, 1158, 1176, 1177, 1180, 1188, 1212, 1219, 1221, 1240, 1248, 1252, 1275, 1278, 1303, 1324, 1341, 1348, 1349, 1351, 1352, 1353, 1354, 1359, 1371, 1399, 1402], "dtype_format": [41, 356], "dtype_of": 361, "dtypekind": 211, "dtypelik": [209, 977], "dtypeoper": [1, 61], "dubiou": 103, "duckdb": 140, "due": [245, 260, 288, 291, 326, 356, 368, 463, 477, 482, 495, 621, 622, 624, 626, 628, 629, 658, 662, 664, 666, 668, 670, 673, 675, 677, 775, 789, 790, 792, 793, 837, 838, 850, 869, 891, 896, 917, 969, 1080, 1098, 1103, 1116], "dummi": [311, 356, 1346, 1371], "dump": 148, "duplic": [58, 108, 252, 259, 260, 261, 321, 325, 356, 368, 535, 621, 645, 840, 850, 895, 896, 897, 932, 935, 969, 1157, 1242, 1371, 1400], "duplicateerror": [645, 850, 1242, 1371], "dur": [261, 356, 897, 969], "durat": [207, 260, 326, 356, 455, 463, 487, 488, 489, 490, 491, 492, 493, 494, 498, 504, 754, 789, 790, 792, 793, 837, 838, 850, 896, 969, 974, 975, 1072, 1080, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1119, 1128, 1351, 1353, 1371], "dure": [49, 50, 51, 52, 57, 64, 65, 107, 132, 152, 153, 167, 172, 207, 233, 356, 863, 872, 873, 883, 911, 943, 969, 1133, 1371], "dutch": [454, 466, 775, 1071, 1083], "dynam": [149, 245, 356, 406, 588, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 850, 891, 969, 973, 1018, 1213], "dynamicgroupbi": [245, 356], "e": [11, 34, 36, 38, 40, 43, 44, 47, 49, 148, 152, 158, 160, 164, 170, 172, 173, 185, 224, 236, 243, 247, 256, 260, 263, 307, 308, 314, 324, 356, 366, 449, 500, 504, 507, 534, 591, 597, 602, 603, 604, 605, 606, 608, 609, 610, 612, 613, 614, 684, 689, 708, 729, 730, 741, 796, 812, 829, 840, 850, 878, 887, 896, 899, 915, 969, 973, 975, 1122, 1128, 1156, 1281, 1299, 1332, 1371, 1389, 1394, 1402], "e101": [41, 356], "e_filt": [608, 610], "e_sum_ov": [608, 610], "e_sum_slic": [608, 610], "each": [38, 41, 49, 53, 54, 55, 58, 67, 74, 85, 153, 154, 157, 162, 171, 176, 177, 178, 179, 181, 220, 222, 229, 236, 243, 244, 245, 258, 260, 264, 278, 280, 284, 288, 290, 292, 313, 318, 322, 325, 326, 334, 335, 337, 339, 341, 342, 350, 356, 382, 427, 431, 432, 447, 466, 482, 495, 513, 537, 540, 566, 569, 576, 586, 593, 597, 645, 648, 656, 657, 665, 669, 680, 685, 692, 705, 709, 710, 714, 715, 723, 725, 726, 734, 741, 756, 770, 773, 779, 804, 805, 809, 832, 840, 850, 872, 875, 876, 882, 887, 891, 896, 911, 914, 917, 933, 935, 945, 947, 949, 951, 952, 960, 969, 994, 1044, 1045, 1051, 1065, 1083, 1103, 1116, 1160, 1163, 1191, 1194, 1201, 1211, 1242, 1244, 1253, 1254, 1268, 1277, 1296, 1300, 1301, 1305, 1306, 1314, 1316, 1317, 1325, 1332, 1340, 1371, 1388, 1394, 1399, 1400, 1402], "eager": [97, 245, 260, 280, 324, 356, 456, 459, 462, 464, 474, 475, 477, 478, 481, 482, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 662, 664, 666, 668, 670, 673, 675, 677, 770, 774, 776, 780, 782, 789, 790, 792, 793, 800, 804, 805, 808, 809, 822, 825, 828, 829, 832, 837, 838, 841, 849, 850, 891, 896, 901, 969, 974, 1072, 1073, 1076, 1079, 1080, 1081, 1082, 1088, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1399], "eager_execut": 1399, "eagerli": [588, 1380], "ear": [723, 734, 1314], "earlier": [260, 356, 896, 969], "earliest": [245, 356, 480, 481, 733, 736, 791, 891, 961, 969, 1101, 1102, 1324, 1327], "easi": 207, "easiest": 212, "easili": [58, 294, 318, 330, 335, 356, 832, 846, 919, 938, 945, 969], "east": [76, 172, 261, 356, 897, 969], "ebf1d": [41, 356], "edg": [528, 850, 1151, 1371], "eee": [1, 41, 356, 975], "ef": 720, "effect": [41, 49, 50, 51, 52, 56, 238, 245, 356, 463, 517, 597, 623, 625, 627, 780, 850, 891, 941, 942, 969, 1072, 1080], "effici": [134, 154, 256, 258, 356, 596, 850, 865], "efgh": 1394, "eg": [18, 26, 27, 41, 66, 155, 207, 313, 356, 733, 736, 757, 850, 975, 1324, 1327], "egnaro": 1394, "either": [64, 65, 89, 149, 183, 255, 259, 260, 261, 278, 288, 289, 313, 314, 356, 504, 596, 643, 645, 658, 681, 733, 765, 773, 777, 832, 850, 872, 873, 895, 896, 897, 899, 917, 969, 973, 975, 1128, 1240, 1242, 1270, 1324, 1371, 1384, 1402], "element": [14, 15, 26, 178, 179, 182, 183, 185, 187, 212, 213, 215, 222, 255, 280, 289, 302, 304, 319, 327, 356, 374, 375, 376, 377, 378, 379, 390, 391, 426, 427, 434, 437, 438, 439, 440, 442, 443, 444, 445, 446, 452, 453, 508, 509, 513, 526, 530, 538, 549, 551, 552, 557, 559, 560, 561, 564, 569, 577, 578, 579, 580, 584, 585, 590, 592, 593, 596, 597, 638, 639, 648, 651, 659, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 681, 686, 687, 688, 692, 693, 694, 725, 726, 737, 752, 753, 755, 756, 762, 773, 782, 808, 826, 827, 831, 839, 850, 867, 876, 926, 928, 931, 936, 969, 986, 987, 988, 989, 990, 991, 997, 998, 1002, 1003, 1016, 1038, 1039, 1049, 1052, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1069, 1070, 1131, 1132, 1137, 1138, 1150, 1153, 1161, 1170, 1172, 1174, 1175, 1176, 1177, 1182, 1184, 1185, 1186, 1189, 1194, 1202, 1203, 1204, 1205, 1210, 1217, 1218, 1221, 1237, 1244, 1248, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1270, 1278, 1279, 1280, 1284, 1285, 1316, 1317, 1328, 1342, 1343, 1344, 1348, 1355, 1356, 1357, 1361, 1371, 1388, 1389], "elementwis": [596, 638, 660, 661, 663, 665, 667, 669, 672, 674, 676, 850, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1371], "elig": [901, 969], "elimin": [64, 132, 546, 850, 1171, 1371], "elis": [272, 356, 907, 969], "ellips": 21, "ellipsi": [243, 356], "elppa": 1394, "els": [153, 1241, 1341, 1371], "email": [705, 1296], "email_part": [705, 1296], "emphas": [356, 360], "emploi": 975, "empti": [14, 36, 38, 49, 112, 136, 152, 153, 157, 163, 165, 167, 217, 218, 245, 271, 323, 356, 644, 695, 703, 750, 810, 828, 833, 850, 870, 871, 891, 906, 934, 969, 974, 975, 1052, 1054, 1138, 1158, 1172, 1241, 1286, 1294, 1341, 1371], "en": [21, 41, 356], "enabl": [29, 30, 47, 52, 57, 64, 65, 98, 100, 156, 164, 168, 170, 176, 177, 178, 179, 191, 209, 294, 315, 330, 356, 369, 371, 652, 653, 682, 697, 707, 709, 721, 761, 846, 850, 872, 873, 883, 911, 919, 924, 938, 969, 977, 982, 983, 1249, 1250, 1272, 1288, 1298, 1300, 1312, 1352, 1360, 1371], "enable_string_cach": 98, "enclos": [519, 850], "encod": [70, 76, 88, 148, 152, 153, 167, 311, 356, 359, 411, 519, 656, 699, 745, 850, 1023, 1253, 1290, 1346, 1371, 1376], "encompass": [528, 850, 1151, 1371], "encount": [56, 123, 152, 153, 167, 172, 245, 356, 630, 631, 712, 713, 780, 784, 798, 850, 891, 969, 1230, 1231, 1303, 1304, 1371], "end": [38, 41, 49, 152, 153, 167, 245, 251, 280, 356, 410, 413, 416, 429, 433, 455, 482, 507, 532, 533, 582, 696, 701, 705, 710, 717, 723, 727, 728, 729, 732, 770, 775, 788, 789, 790, 791, 792, 793, 796, 804, 805, 808, 809, 837, 838, 840, 846, 850, 891, 894, 911, 969, 975, 1025, 1041, 1046, 1072, 1103, 1154, 1155, 1168, 1207, 1292, 1296, 1301, 1308, 1314, 1318, 1319, 1320, 1325, 1371, 1394], "endian": [414, 1026], "endpoint": [192, 447, 645, 808, 850, 1065, 1242, 1371], "ends_a": 1394, "ends_in_digit": 1394, "ends_with": [410, 416, 433, 696, 727, 975, 1046, 1318, 1392], "ends_with_expr": 413, "ends_with_lit": 413, "engin": [10, 15, 39, 49, 50, 51, 52, 64, 65, 97, 147, 154, 155, 157, 163, 189, 244, 259, 264, 314, 321, 342, 356, 596, 829, 850, 872, 873, 883, 890, 895, 901, 906, 911, 924, 932, 944, 952, 966, 969, 973, 1221, 1351, 1371, 1383, 1399], "engine_opt": [39, 157, 356], "enginetyp": [49, 50, 51, 52, 64, 65, 872, 873, 883, 911, 924, 969], "enough": [560, 689, 850, 1185, 1281, 1371], "ensur": [11, 41, 53, 55, 97, 149, 155, 182, 185, 209, 236, 244, 265, 278, 280, 284, 289, 314, 356, 534, 596, 850, 887, 890, 901, 902, 914, 944, 969, 975, 977, 1351, 1371], "enter": 207, "entir": [41, 157, 163, 356], "entri": [207, 356, 969, 974, 1399], "entropi": [850, 1371], "enumer": [76, 138, 152, 153, 157, 163, 167, 258, 356], "env": [4, 188], "env_onli": 31, "environ": [4, 31, 38, 43, 47, 49, 50, 51, 52, 64, 65, 149, 162, 164, 167, 170, 171, 172, 186, 189, 192, 197, 313, 356, 872, 873, 883, 911, 924, 969], "eol_char": [152, 153, 167], "eparg": 1394, "epoch": [72, 73, 495, 800, 1116, 1395], "epoch_": [464, 1081], "epoch_n": [464, 1081], "epochtimeunit": [464, 800, 1081], "eq": [236, 284, 356, 502, 513, 850, 887, 914, 969, 1124, 1371], "eq_miss": [850, 1233, 1371], "equal": [57, 100, 152, 153, 167, 176, 177, 178, 179, 245, 260, 261, 272, 302, 356, 447, 495, 501, 502, 522, 548, 588, 633, 645, 651, 659, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 692, 717, 718, 721, 743, 773, 808, 826, 827, 840, 846, 850, 887, 891, 896, 897, 907, 914, 926, 969, 1065, 1103, 1124, 1213, 1233, 1242, 1248, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1308, 1309, 1312, 1334, 1371, 1388, 1391, 1402], "equiprob": [223, 282, 348, 356, 646, 669, 670, 823, 850, 877, 912, 958, 969, 1066, 1243, 1261, 1371], "equival": [41, 66, 133, 135, 136, 137, 139, 161, 162, 171, 245, 255, 276, 356, 366, 370, 432, 501, 502, 504, 517, 522, 524, 548, 595, 617, 619, 632, 633, 634, 637, 643, 715, 739, 741, 742, 749, 757, 764, 850, 891, 969, 1045, 1123, 1124, 1128, 1144, 1146, 1170, 1173, 1220, 1232, 1233, 1306, 1330, 1332, 1333, 1371, 1381, 1389, 1401], "err": 706, "error": [15, 40, 56, 65, 66, 97, 118, 122, 124, 135, 136, 139, 147, 152, 153, 157, 164, 167, 172, 260, 265, 280, 289, 314, 356, 368, 393, 394, 411, 454, 563, 565, 567, 588, 621, 653, 696, 699, 704, 706, 708, 712, 713, 733, 735, 736, 740, 850, 869, 873, 896, 902, 944, 952, 969, 1005, 1006, 1023, 1071, 1188, 1190, 1192, 1250, 1287, 1290, 1295, 1297, 1299, 1303, 1304, 1324, 1326, 1327, 1331, 1351, 1371, 1397], "escap": [101, 152, 153, 155, 167, 702, 719, 720, 1293, 1310, 1311], "esp": 15, "especi": [181, 657, 850, 969, 1254, 1371], "espresso": 975, "est": 792, "establish": [154, 207], "estim": [152, 153, 214, 231, 356, 373, 505, 506, 546, 769, 850, 866, 969, 985, 1126, 1129, 1130, 1171, 1371], "estimated_s": [356, 1371], "etc": [22, 40, 41, 149, 152, 156, 157, 158, 160, 168, 169, 356, 597, 850, 975, 1269, 1271, 1371, 1395], "eu": [168, 169], "eur": [243, 356, 1402], "europ": [459, 463, 481, 1076, 1080, 1102], "eval": [312, 356, 596, 597, 795, 850, 1221, 1348, 1371], "evalu": [49, 50, 51, 52, 99, 172, 234, 236, 260, 284, 356, 370, 383, 385, 386, 418, 419, 420, 421, 423, 424, 446, 513, 531, 551, 552, 588, 637, 638, 765, 767, 770, 774, 776, 780, 782, 789, 790, 792, 793, 795, 804, 805, 808, 809, 822, 825, 828, 832, 837, 838, 840, 841, 850, 872, 887, 893, 895, 896, 914, 969, 995, 997, 998, 1030, 1031, 1032, 1033, 1035, 1036, 1064, 1137, 1176, 1177, 1362, 1371, 1391], "even": [38, 49, 152, 259, 356, 504, 642, 645, 678, 795, 850, 895, 969, 975, 1128, 1242, 1266, 1371], "evenli": [245, 356, 808, 809, 891, 969], "event": [65, 873, 969], "eventu": [39, 356], "ever": [638, 850], "everi": [15, 38, 49, 152, 153, 157, 163, 167, 239, 245, 310, 326, 356, 385, 386, 387, 388, 391, 393, 399, 442, 443, 444, 445, 446, 482, 495, 509, 521, 553, 554, 558, 561, 564, 565, 566, 574, 577, 582, 586, 657, 703, 784, 785, 850, 889, 891, 969, 997, 998, 999, 1000, 1003, 1005, 1011, 1060, 1061, 1062, 1063, 1064, 1103, 1116, 1132, 1143, 1178, 1179, 1183, 1186, 1189, 1190, 1191, 1199, 1202, 1207, 1211, 1254, 1294, 1371], "everybodi": [697, 721, 1288, 1312], "everyth": 975, "evolv": [265, 356, 902, 969], "ew": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "ewm_mean": [850, 1371], "ewm_mean_bi": [850, 1371], "ewm_std": [850, 1371], "ewm_var": [850, 1371], "ewma": [504, 850, 1128, 1371], "exact": [178, 181, 183, 187, 260, 300, 356, 373, 517, 703, 731, 732, 733, 735, 736, 757, 850, 896, 969, 1294, 1324, 1326, 1327], "exactli": [135, 136, 139, 176, 177, 178, 179, 182, 183, 187, 265, 356, 725, 726, 731, 732, 794, 902, 969, 1276, 1316, 1317, 1322, 1323, 1371], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 66, 67, 76, 85, 89, 97, 98, 100, 104, 107, 108, 109, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 152, 153, 154, 155, 156, 157, 161, 162, 163, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 846, 850, 862, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 969, 974, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1142, 1143, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1337, 1338, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1371, 1376, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1391, 1393, 1394, 1395, 1396, 1397, 1399, 1400, 1401], "exc_tb": 1399, "exc_typ": 1399, "exc_val": 1399, "exce": [243, 356], "excel": [37, 41, 151, 157, 356, 862], "excelspreadsheetengin": 157, "except": [0, 225, 240, 245, 247, 260, 263, 265, 285, 307, 356, 653, 710, 734, 796, 850, 862, 879, 891, 896, 902, 915, 969, 975, 1040, 1150, 1175, 1250, 1301, 1325, 1342, 1351, 1371, 1398], "exclud": [183, 187, 245, 356, 427, 442, 445, 454, 466, 534, 604, 756, 775, 846, 850, 891, 969, 975, 1071, 1083, 1156, 1371], "excluded_dtyp": [183, 184, 187], "exclus": [289, 356, 764, 770, 804, 805, 850], "execut": [10, 40, 49, 50, 51, 52, 57, 64, 65, 66, 97, 149, 154, 155, 262, 303, 356, 449, 560, 761, 829, 840, 850, 868, 872, 873, 878, 883, 901, 911, 913, 924, 927, 944, 969, 1185, 1360, 1371, 1381, 1382, 1383, 1385, 1399, 1401], "execute_glob": 1399, "execute_opt": [154, 155], "exist": [1, 39, 40, 41, 42, 58, 76, 108, 156, 164, 168, 172, 183, 225, 240, 280, 285, 320, 325, 330, 331, 356, 368, 410, 413, 416, 458, 481, 719, 720, 778, 850, 875, 879, 882, 915, 918, 935, 937, 938, 939, 969, 975, 1075, 1102, 1310, 1311, 1401], "existing_t": 1401, "existing_table_path": [40, 356], "exit": [57, 98, 207, 1386, 1399], "exp": [503, 504, 505, 506, 850, 1127, 1128, 1129, 1130, 1371, 1392], "exp_a": 1393, "expand": [149, 152, 164, 167, 172, 509, 602, 606, 651, 747, 850, 975, 1132, 1248, 1371], "expand_selector": 975, "expans": 744, "expect": [38, 40, 43, 47, 49, 50, 51, 52, 55, 74, 80, 113, 121, 129, 152, 154, 156, 162, 164, 167, 168, 170, 171, 172, 177, 179, 197, 213, 356, 588, 597, 810, 850, 899, 901, 969], "expens": [152, 153, 162, 164, 167, 171, 172, 186, 188, 257, 264, 289, 290, 291, 320, 321, 356, 597, 850, 875, 877, 882, 918, 932, 937, 969, 1133, 1221, 1371, 1402], "experiment": [47, 52, 165, 261, 318, 356, 808, 809, 897, 938, 969], "expiri": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 969], "explain": [132, 212, 262, 356, 872, 969, 1398], "explainformat": [883, 969], "explicit": [41, 107, 154, 167, 181, 303, 325, 356, 487, 824, 927, 935, 969, 1108], "explicitli": [76, 107, 155, 181, 183, 207, 240, 259, 356, 652, 832, 850, 861, 895, 969, 1399], "explod": [149, 356, 427, 515, 638, 654, 756, 850, 969, 1251, 1371, 1389], "explor": [223, 356, 877, 969], "expon": [643, 850, 1240, 1371, 1393], "exponenti": [503, 504, 505, 506, 508, 643, 850, 1127, 1128, 1129, 1130, 1131, 1371, 1393], "export": [41, 43, 44, 50, 210, 257, 258, 290, 291, 308, 310, 313, 356, 846, 969, 975, 978, 1345, 1371], "expos": 862, "expr": [1, 53, 54, 55, 58, 59, 60, 61, 62, 99, 147, 149, 232, 234, 235, 250, 259, 260, 261, 265, 276, 280, 289, 294, 295, 313, 318, 330, 331, 356, 361, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 845, 846, 850, 851, 852, 855, 856, 857, 858, 859, 884, 885, 886, 895, 896, 897, 902, 912, 919, 920, 938, 939, 969, 975, 1064, 1123, 1124, 1128, 1135, 1136, 1142, 1144, 1146, 1173, 1185, 1191, 1207, 1211, 1220, 1232, 1233, 1248, 1287, 1292, 1299, 1318, 1371, 1397], "expr1": [1391, 1399], "expr2": [1391, 1399], "expr_unique_subset": [276, 356], "express": [0, 8, 53, 54, 55, 64, 99, 147, 149, 180, 183, 187, 215, 232, 234, 236, 244, 250, 259, 260, 264, 265, 276, 280, 284, 289, 294, 295, 299, 302, 313, 318, 319, 330, 331, 333, 335, 342, 356, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 383, 387, 388, 389, 390, 391, 394, 405, 410, 411, 412, 413, 414, 415, 416, 427, 429, 431, 432, 433, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 507, 509, 510, 512, 513, 517, 519, 520, 522, 523, 524, 525, 531, 534, 535, 536, 537, 538, 539, 540, 548, 549, 553, 554, 556, 557, 560, 561, 567, 569, 587, 588, 594, 595, 596, 597, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 615, 617, 619, 621, 622, 624, 626, 628, 629, 632, 633, 635, 637, 638, 642, 643, 644, 645, 647, 651, 652, 653, 654, 656, 657, 680, 681, 682, 685, 687, 688, 690, 692, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 719, 720, 721, 723, 724, 725, 726, 734, 738, 748, 749, 752, 753, 756, 757, 758, 760, 761, 763, 764, 765, 766, 768, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 819, 822, 824, 825, 826, 827, 828, 830, 832, 834, 836, 837, 838, 840, 841, 846, 849, 862, 867, 872, 883, 884, 887, 890, 895, 896, 902, 911, 914, 919, 920, 923, 924, 926, 931, 938, 939, 940, 942, 945, 952, 969, 975, 1002, 1039, 1053, 1064, 1071, 1075, 1108, 1123, 1124, 1128, 1134, 1144, 1146, 1156, 1173, 1182, 1185, 1220, 1221, 1232, 1233, 1248, 1249, 1250, 1270, 1274, 1287, 1288, 1289, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1310, 1311, 1312, 1325, 1329, 1356, 1371, 1389, 1391, 1393, 1394, 1398], "exprmetanamespac": [601, 607], "ext": [53, 54, 55, 154], "extend": [0, 136, 328, 356, 510, 850, 862, 973, 984, 1134, 1371], "extend_const": [850, 1371], "extens": [315, 356, 1352, 1371], "extern": [204, 940, 969], "external_shallow_clon": 204, "extra": [40, 56, 149, 152, 153, 156, 158, 160, 164, 167, 168, 169, 172, 233, 245, 265, 356, 850, 891, 902, 969, 1133, 1371], "extra_column": [172, 265, 356, 902, 969], "extra_struct_field": [56, 265, 356, 902, 969], "extract": [140, 212, 303, 356, 457, 460, 462, 465, 468, 469, 470, 471, 472, 473, 476, 478, 479, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 642, 705, 706, 707, 712, 713, 723, 725, 850, 1074, 1077, 1078, 1079, 1082, 1085, 1089, 1090, 1091, 1093, 1094, 1097, 1099, 1100, 1104, 1106, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1117, 1118, 1120, 1296, 1297, 1298, 1303, 1304, 1314, 1392], "extract_mani": [709, 1300], "extract_numb": [642, 850], "extracted_nr": 705, "extrem": [510, 660, 850, 1134, 1256, 1371], "extrema": [684, 850, 1275, 1371], "f": [53, 59, 153, 154, 236, 243, 258, 308, 314, 320, 324, 356, 366, 406, 415, 588, 684, 703, 733, 736, 778, 850, 887, 969, 975, 1018, 1213, 1294, 1324, 1327, 1371, 1376, 1389], "f32": [1, 61, 216, 303, 312, 318, 356, 684, 829, 850, 869, 927, 969, 975, 1219, 1371, 1397], "f4": [314, 356], "f5ed2452": [41, 356], "f64": [7, 9, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 58, 60, 62, 66, 85, 97, 134, 136, 161, 173, 180, 183, 216, 217, 218, 221, 223, 224, 225, 227, 229, 234, 235, 238, 242, 243, 244, 245, 250, 251, 259, 260, 265, 267, 268, 269, 270, 274, 280, 281, 282, 301, 302, 304, 306, 318, 327, 330, 335, 338, 340, 343, 344, 345, 346, 348, 349, 356, 365, 368, 374, 375, 376, 377, 378, 379, 397, 403, 408, 415, 428, 434, 435, 437, 438, 439, 447, 448, 452, 453, 483, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 516, 517, 522, 524, 532, 533, 541, 542, 543, 544, 546, 548, 560, 571, 572, 584, 590, 591, 592, 593, 595, 598, 599, 600, 616, 619, 621, 630, 631, 632, 633, 639, 643, 645, 646, 647, 648, 652, 653, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 686, 687, 688, 689, 693, 694, 748, 752, 753, 757, 761, 762, 771, 772, 776, 778, 780, 782, 795, 796, 808, 809, 812, 815, 816, 817, 829, 831, 839, 846, 850, 869, 870, 877, 879, 880, 885, 886, 890, 891, 894, 895, 896, 902, 904, 905, 912, 926, 928, 936, 938, 940, 945, 948, 950, 953, 954, 955, 956, 958, 959, 969, 975, 986, 987, 988, 989, 990, 991, 1009, 1015, 1020, 1027, 1049, 1050, 1055, 1056, 1057, 1065, 1066, 1069, 1070, 1104, 1127, 1128, 1129, 1130, 1131, 1135, 1140, 1151, 1154, 1155, 1185, 1196, 1197, 1209, 1215, 1216, 1217, 1218, 1237, 1240, 1242, 1244, 1250, 1255, 1256, 1258, 1259, 1261, 1262, 1263, 1265, 1266, 1267, 1278, 1279, 1280, 1284, 1343, 1344, 1359, 1360, 1371, 1380, 1388, 1389, 1393, 1396, 1399, 1402], "f64_awai": [678, 850], "f64_to_even": [678, 850], "f_string": 799, "fa1e": [738, 1329], "face": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 197, 356, 969], "facil": 154, "facilit": [219, 356], "factor": [503, 505, 506, 754, 850, 1127, 1129, 1130, 1353, 1371], "fail": [38, 39, 40, 43, 47, 49, 50, 51, 52, 134, 156, 158, 162, 164, 167, 168, 170, 171, 172, 197, 211, 314, 321, 356, 383, 485, 588, 733, 735, 736, 740, 850, 932, 969, 1221, 1324, 1326, 1327, 1331, 1351, 1371, 1397], "fall": [172, 447, 645, 850, 872, 883, 911, 924, 944, 969, 1065, 1242, 1371, 1388], "fallback": [134, 157], "fals": [5, 7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 33, 38, 40, 41, 47, 49, 50, 51, 52, 53, 56, 58, 64, 65, 66, 134, 135, 136, 138, 139, 140, 147, 149, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 211, 215, 216, 217, 218, 223, 230, 236, 238, 242, 243, 244, 245, 249, 252, 253, 254, 257, 259, 260, 262, 268, 269, 275, 276, 278, 280, 281, 284, 289, 290, 291, 292, 294, 297, 300, 302, 303, 306, 309, 311, 314, 315, 319, 320, 321, 325, 326, 328, 330, 338, 340, 343, 344, 346, 349, 356, 369, 370, 371, 382, 385, 386, 389, 393, 394, 402, 407, 410, 413, 416, 427, 428, 429, 433, 441, 442, 443, 444, 445, 447, 454, 466, 467, 483, 500, 501, 502, 503, 505, 506, 524, 525, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 551, 552, 556, 560, 563, 565, 567, 576, 583, 588, 589, 595, 596, 597, 601, 603, 604, 605, 607, 609, 612, 613, 632, 633, 635, 637, 638, 640, 641, 645, 648, 659, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 680, 681, 682, 684, 689, 691, 692, 695, 696, 697, 698, 701, 707, 708, 709, 711, 712, 719, 720, 721, 724, 725, 727, 733, 735, 736, 738, 756, 758, 761, 764, 765, 766, 767, 768, 770, 773, 774, 775, 776, 779, 780, 782, 783, 784, 789, 790, 792, 793, 798, 804, 805, 808, 809, 810, 812, 816, 822, 825, 828, 829, 832, 834, 837, 838, 840, 841, 850, 867, 869, 870, 871, 872, 873, 877, 883, 887, 890, 891, 895, 896, 899, 901, 911, 914, 919, 922, 924, 926, 927, 931, 932, 935, 938, 944, 948, 950, 953, 954, 956, 959, 969, 974, 975, 982, 983, 994, 997, 998, 1001, 1005, 1006, 1014, 1019, 1022, 1023, 1025, 1028, 1039, 1040, 1041, 1043, 1046, 1048, 1051, 1052, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1071, 1083, 1084, 1104, 1124, 1125, 1127, 1129, 1130, 1137, 1139, 1145, 1147, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1176, 1177, 1181, 1185, 1188, 1190, 1192, 1201, 1208, 1214, 1227, 1233, 1235, 1238, 1239, 1242, 1244, 1245, 1246, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1268, 1270, 1272, 1276, 1281, 1283, 1286, 1287, 1288, 1289, 1292, 1298, 1299, 1300, 1302, 1303, 1310, 1311, 1312, 1315, 1316, 1318, 1324, 1326, 1327, 1329, 1346, 1351, 1352, 1356, 1357, 1360, 1362, 1371, 1381, 1383, 1389, 1394, 1399], "far": [41, 356], "fashion": [259, 356], "fast": [47, 50, 52, 149, 186, 188, 356, 510, 682, 850, 969, 973, 1134, 1272, 1371, 1402], "fast_executemani": [39, 356], "fast_project": 943, "faster": [49, 50, 51, 52, 64, 154, 157, 233, 314, 324, 356, 597, 759, 850, 872, 883, 911, 924, 969, 1133, 1221, 1371], "fastexcel": [157, 175], "favor": [39, 172, 356], "fay": 148, "feat1": [313, 318, 356], "feat2": [313, 318, 356], "feather": [43, 158, 170, 356, 862], "featur": [1, 47, 63, 74, 80, 169, 313, 318, 356], "feature_0": [940, 969], "feature_0_train": [940, 969], "feature_1": [940, 969], "feature_nam": [318, 356], "feb": [175, 1394], "februari": 1394, "fed": 729, "feel": [697, 721, 1288, 1312], "fetch": [142, 872, 969], "fetch_california_h": [318, 356], "few": [243, 356], "fewer": [710, 734, 969, 1301, 1325], "ff": 1388, "ff00": [738, 1329], "fff": 1, "ffff00": [411, 412, 699, 1023, 1024, 1290], "ffffff": [41, 356], "ffi": [231, 356, 1126, 1371], "fgg": 975, "fghi": 1394, "fh": 153, "fiction": 1380, "field": [37, 38, 40, 49, 52, 56, 89, 125, 128, 136, 143, 265, 322, 356, 406, 588, 596, 597, 623, 625, 627, 656, 705, 706, 712, 725, 726, 746, 747, 748, 754, 761, 784, 785, 811, 832, 840, 850, 902, 933, 969, 1018, 1213, 1221, 1253, 1297, 1316, 1317, 1338, 1340, 1353, 1371, 1395], "field_0": [406, 588, 1018, 1213], "field_1": [406, 588, 1018, 1213], "field_2": [1018, 1213], "field_id": 143, "field_n": [406, 588, 1018, 1213], "field_nam": [597, 850, 1221, 1371], "field_overwrit": [52, 143, 969], "fiftyf": [530, 850], "figsiz": [612, 911, 924, 969], "figur": [612, 679, 850, 924, 969, 1267, 1371], "file": [2, 3, 5, 6, 33, 36, 37, 38, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 224, 233, 296, 356, 449, 519, 611, 615, 850, 878, 921, 969, 973, 1133, 1371], "file_cache_ttl": [162, 167, 170, 171], "file_idx": [54, 144, 146], "file_path": [53, 54, 55, 144, 146], "filenam": 158, "filesourc": [157, 163, 164, 172], "filesystem": [40, 156, 168, 169, 356], "fill": [58, 66, 217, 234, 235, 299, 324, 356, 360, 409, 442, 445, 511, 512, 518, 532, 533, 661, 663, 665, 667, 669, 672, 674, 676, 683, 799, 822, 825, 841, 850, 885, 886, 923, 940, 969, 1021, 1135, 1136, 1141, 1155, 1234, 1257, 1258, 1260, 1263, 1264, 1265, 1274, 1371], "fill_char": [717, 718, 1308, 1309], "fill_nan": [235, 356, 512, 850, 886, 969, 1136, 1371], "fill_nul": [58, 234, 326, 356, 409, 442, 445, 511, 518, 683, 850, 885, 940, 969, 1021, 1135, 1141, 1371], "fill_valu": [299, 324, 356, 683, 850, 923, 969, 1274, 1371], "fillnullstrategi": [235, 356, 512, 850, 886, 969, 1136, 1371], "film": 1380, "filter": [1, 59, 64, 97, 147, 167, 168, 172, 173, 227, 228, 252, 253, 254, 280, 284, 342, 356, 429, 433, 608, 610, 701, 727, 763, 788, 791, 795, 798, 828, 829, 840, 850, 865, 872, 880, 881, 883, 893, 911, 914, 924, 927, 952, 969, 975, 1271, 1371, 1387], "final": [14, 41, 58, 149, 172, 260, 262, 356, 503, 505, 506, 850, 877, 896, 969, 1127, 1129, 1130, 1371, 1400], "find": [66, 241, 356, 530, 681, 696, 697, 709, 850, 1153, 1270, 1288, 1300, 1310, 1371], "find_pat": 708, "fine": [872, 883, 911, 924, 966, 969], "finish": [53, 54, 55, 233, 356, 1133, 1371], "finish_callback": [53, 54, 55], "finit": [536, 757, 780, 850, 1159, 1371], "first": [47, 58, 152, 153, 157, 158, 160, 163, 164, 167, 172, 176, 177, 178, 179, 212, 243, 245, 247, 259, 260, 263, 264, 275, 279, 280, 288, 307, 311, 312, 320, 321, 326, 333, 339, 356, 382, 384, 393, 446, 450, 475, 477, 482, 498, 517, 527, 530, 537, 550, 558, 560, 565, 566, 588, 596, 597, 609, 618, 642, 643, 658, 681, 692, 696, 703, 704, 708, 710, 712, 713, 719, 720, 734, 741, 776, 777, 784, 798, 802, 840, 846, 850, 891, 892, 895, 896, 900, 910, 917, 932, 940, 942, 949, 969, 975, 994, 1005, 1064, 1066, 1067, 1096, 1098, 1103, 1119, 1150, 1153, 1160, 1175, 1183, 1185, 1190, 1191, 1213, 1221, 1270, 1283, 1294, 1295, 1297, 1299, 1301, 1303, 1304, 1310, 1311, 1325, 1332, 1342, 1346, 1348, 1351, 1371, 1391, 1392, 1394, 1400, 1402], "first_column": [41, 356], "first_non_nul": [588, 1213], "first_part": [725, 726, 1316, 1317], "fisher": [546, 659, 689, 850, 1171, 1255, 1281, 1371], "fit": [148, 257, 300, 324, 356, 684, 825, 850, 1275, 1276, 1371], "five": [317, 356, 1402], "fix": [11, 67, 76, 181, 498, 794, 809, 1119], "flag": [63, 156, 168, 180, 297, 314, 356, 682, 696, 704, 705, 708, 719, 720, 850, 883, 901, 922, 969, 975, 1272, 1287, 1295, 1296, 1299, 1310, 1311, 1351, 1371, 1394], "flat": [148, 291, 356, 561, 654, 850, 1186, 1251, 1371], "flat_from_polar": 143, "flatten": 850, "flavour": [41, 154, 356], "flight": 154, "flight_sql": 154, "flightsql": 154, "float": [11, 12, 38, 41, 49, 56, 78, 79, 152, 153, 167, 173, 176, 177, 178, 179, 180, 183, 187, 211, 223, 227, 231, 234, 260, 265, 282, 292, 313, 314, 348, 356, 435, 447, 452, 453, 483, 500, 501, 502, 503, 505, 506, 511, 516, 517, 522, 524, 532, 536, 539, 541, 542, 543, 544, 548, 576, 591, 595, 598, 612, 616, 630, 631, 632, 633, 643, 645, 646, 660, 661, 663, 665, 667, 669, 670, 672, 674, 676, 678, 680, 686, 757, 823, 825, 850, 877, 880, 885, 896, 902, 912, 924, 958, 969, 975, 1040, 1050, 1065, 1066, 1068, 1069, 1070, 1104, 1122, 1126, 1127, 1129, 1130, 1135, 1140, 1151, 1171, 1201, 1216, 1230, 1231, 1240, 1241, 1242, 1243, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1268, 1271, 1278, 1281, 1285, 1341, 1351, 1361, 1371, 1399, 1402], "float16": [318, 356], "float32": [1, 11, 38, 49, 61, 216, 238, 265, 312, 313, 314, 318, 356, 504, 850, 869, 902, 969, 975, 1128, 1158, 1219, 1349, 1351, 1354, 1371], "float4": [303, 356, 829, 927, 969, 1397], "float64": [11, 38, 41, 49, 97, 136, 152, 161, 180, 183, 219, 229, 231, 238, 265, 293, 318, 330, 356, 374, 375, 376, 377, 378, 379, 415, 428, 437, 438, 439, 448, 483, 504, 507, 541, 542, 647, 687, 688, 752, 753, 796, 812, 822, 825, 841, 846, 850, 874, 882, 902, 918, 938, 969, 974, 975, 1104, 1128, 1352, 1359, 1371], "float_cast": [56, 265, 356, 902, 969], "float_list": 85, "float_precis": [9, 11, 28, 38, 41, 49, 356, 969], "float_scientif": [38, 49, 356, 969], "floatcastopt": 56, "floatfmt": 12, "floor": [60, 517, 850, 1371, 1392], "floor_a": 1393, "floordiv": [757, 850], "fmt": [12, 260, 356, 531, 799, 850, 893, 896, 969], "fmt_number": [356, 360], "fmt_str_length": [13, 789, 790, 792, 793], "fmt_table_cell_list_len": 14, "fmt_titl": [41, 356], "fn": [784, 785, 798, 824], "foggi": [719, 720, 1310, 1311], "fold": [356, 609, 776, 784, 785, 824, 840], "folder": 173, "follow": [41, 47, 63, 147, 152, 153, 154, 156, 157, 163, 167, 168, 169, 245, 260, 264, 279, 288, 314, 326, 356, 477, 482, 495, 504, 596, 642, 643, 648, 658, 662, 664, 666, 668, 670, 671, 673, 675, 677, 686, 746, 757, 772, 789, 790, 792, 793, 812, 837, 838, 840, 842, 843, 845, 850, 851, 852, 855, 857, 858, 859, 891, 896, 910, 917, 969, 975, 1098, 1103, 1116, 1128, 1240, 1244, 1269, 1271, 1278, 1351, 1363, 1365, 1367, 1371, 1372, 1377, 1378, 1379, 1397, 1402], "font": [41, 356], "font_color": [41, 356], "font_siz": [41, 356], "foo": [36, 38, 40, 43, 44, 45, 46, 47, 148, 161, 162, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 233, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 253, 259, 263, 264, 266, 267, 268, 269, 270, 273, 274, 277, 280, 282, 284, 285, 286, 289, 292, 293, 294, 296, 298, 301, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 320, 321, 322, 327, 328, 329, 334, 356, 430, 447, 449, 477, 521, 527, 531, 550, 601, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 645, 654, 695, 698, 700, 703, 705, 706, 711, 722, 724, 726, 728, 729, 730, 731, 732, 739, 742, 751, 769, 780, 781, 782, 797, 801, 802, 803, 806, 807, 813, 815, 817, 818, 820, 821, 823, 828, 831, 835, 839, 840, 846, 850, 869, 874, 875, 879, 880, 881, 882, 887, 893, 894, 895, 909, 914, 915, 918, 919, 932, 933, 937, 940, 969, 974, 975, 1042, 1065, 1098, 1192, 1240, 1242, 1251, 1289, 1291, 1294, 1296, 1297, 1313, 1317, 1322, 1323, 1330, 1333, 1371, 1385, 1387, 1388, 1389, 1391, 1394, 1397], "foo1": 1394, "foo11": [238, 356], "foo_": [606, 724, 799], "foo_1": [311, 356], "foo_2": [311, 356], "foo_3_4": 1394, "foo_a": [280, 356], "foo_a_bar_1": 799, "foo_at_1": 1389, "foo_b": [280, 356], "foo_b_bar_2": 799, "foo_bar": [601, 607, 724, 810, 1385], "foo_bar2": [601, 607], "foo_bar_baz": 724, "foo_c_bar_3": 799, "foo_low": [739, 1394], "foo_mean": 1389, "foo_q25": 1388, "foo_q50": 1388, "foo_q75": 1388, "foo_std": 1388, "foo_strip": 728, "foo_strip_end": 729, "foo_strip_start": 730, "foo_sum": [1388, 1389], "foo_uniqu": 1389, "foo_upp": [742, 1394], "foo_var": 1388, "foobar": [731, 732, 1322, 1323, 1394], "foobarbar": [732, 1323], "foofoobar": [731, 1322], "foral": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "forbid": [56, 265, 356, 902, 969], "forc": [152, 158, 162, 164, 260, 264, 314, 342, 356, 588, 895, 896, 952, 969, 1221, 1351, 1371], "force_parallel": [260, 356, 895, 896, 969], "foreign": 204, "form": [38, 49, 133, 135, 136, 137, 139, 161, 162, 171, 213, 257, 290, 324, 356, 487, 639, 716, 741, 850, 865, 969, 1108, 1237, 1307, 1332, 1371, 1394], "format": [7, 12, 16, 17, 21, 37, 38, 41, 43, 44, 47, 49, 103, 134, 150, 152, 153, 154, 157, 158, 160, 163, 167, 173, 210, 224, 232, 243, 257, 271, 280, 290, 291, 296, 310, 323, 354, 356, 360, 449, 482, 484, 487, 611, 612, 613, 733, 735, 736, 740, 794, 850, 878, 883, 884, 906, 921, 934, 969, 973, 978, 1105, 1108, 1324, 1326, 1327, 1331, 1370, 1394, 1395], "formul": [227, 356, 880, 881, 969], "formula": [41, 356, 500, 850, 1122, 1371], "fortran": [313, 314, 356], "forward": [235, 260, 299, 326, 356, 401, 442, 445, 454, 474, 512, 518, 581, 683, 850, 886, 896, 923, 969, 1013, 1071, 1095, 1136, 1141, 1206, 1274, 1371], "forward_fil": [409, 512, 850, 1021, 1136, 1371], "found": [21, 38, 41, 49, 104, 125, 128, 136, 140, 157, 164, 172, 229, 303, 356, 530, 681, 708, 713, 731, 732, 733, 736, 850, 927, 969, 1153, 1270, 1299, 1304, 1322, 1323, 1324, 1327, 1371, 1383, 1394, 1399], "four": [317, 356, 1399], "fourth": [546, 850, 1171, 1371], "frac": [503, 504, 505, 506, 689, 850, 1127, 1128, 1129, 1130, 1281, 1371], "fraction": [38, 49, 176, 177, 178, 179, 292, 356, 483, 576, 639, 680, 733, 736, 761, 850, 969, 1104, 1201, 1237, 1268, 1324, 1327, 1360, 1371], "fragment": 1399, "frame": [38, 39, 41, 49, 58, 65, 66, 136, 153, 157, 163, 176, 177, 216, 217, 223, 257, 258, 262, 264, 272, 276, 279, 289, 290, 291, 303, 318, 324, 325, 356, 487, 829, 869, 870, 877, 907, 910, 927, 935, 969, 975, 1052, 1108, 1371, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1398, 1402], "frame_data": [1382, 1385], "frameinittyp": [356, 969], "frametyp": [58, 1399], "framework": [280, 323, 356, 934, 969], "freedom": [304, 327, 356, 584, 590, 672, 673, 676, 677, 694, 762, 782, 826, 827, 831, 839, 850, 928, 936, 969, 1263, 1265, 1285, 1361, 1371], "freeli": [265, 356, 829, 902, 927, 969, 975], "freez": [41, 356], "freeze_pan": [41, 356], "frequenc": [326, 356, 761, 850, 1360, 1371], "frequent": [1269, 1271, 1371], "fri": [356, 359], "fridai": [245, 356, 454, 466, 484, 775, 891, 969, 1071, 1083, 1105, 1108], "friendship": 13, "from": [2, 3, 4, 5, 6, 11, 17, 29, 33, 37, 38, 40, 41, 43, 47, 49, 50, 51, 52, 56, 58, 66, 76, 89, 97, 103, 107, 123, 127, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 192, 197, 212, 216, 223, 224, 225, 231, 233, 236, 237, 243, 245, 257, 258, 259, 260, 261, 262, 265, 271, 280, 284, 285, 288, 289, 291, 292, 294, 295, 303, 311, 318, 320, 321, 323, 324, 325, 326, 332, 356, 359, 360, 406, 415, 447, 448, 449, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 504, 507, 517, 519, 532, 546, 564, 576, 588, 597, 605, 630, 631, 633, 638, 639, 642, 645, 647, 658, 660, 662, 664, 666, 668, 670, 673, 675, 677, 678, 680, 692, 704, 705, 710, 712, 713, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 759, 771, 772, 775, 776, 788, 789, 790, 791, 792, 793, 794, 808, 810, 825, 829, 836, 837, 838, 840, 846, 849, 850, 869, 877, 878, 879, 887, 891, 895, 896, 897, 902, 906, 914, 915, 917, 919, 920, 927, 932, 934, 935, 940, 941, 969, 973, 974, 975, 1018, 1027, 1065, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1124, 1126, 1128, 1133, 1171, 1189, 1201, 1213, 1230, 1231, 1233, 1234, 1237, 1242, 1256, 1268, 1295, 1296, 1301, 1303, 1314, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1331, 1346, 1362, 1371, 1380, 1381, 1382, 1383, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402], "from_arrai": 829, "from_arrow": 134, "from_json": 850, "from_panda": 134, "from_repr": [312, 356, 1348, 1371], "fromkei": [59, 61], "front": [245, 356, 891, 969], "fruit": [309, 356, 429, 433, 655, 701, 727, 734, 850, 1041, 1046, 1292, 1318, 1325], "fruits_revers": [655, 850], "fsspec": [152, 153, 158, 160, 168, 169, 175], "fsspecfileio": 169, "full": [12, 27, 47, 52, 58, 73, 103, 136, 139, 152, 153, 154, 156, 158, 161, 162, 164, 167, 168, 169, 171, 172, 173, 259, 325, 356, 710, 712, 719, 720, 733, 734, 735, 736, 740, 789, 790, 895, 901, 935, 969, 973, 975, 1301, 1303, 1310, 1311, 1324, 1325, 1326, 1327, 1331, 1371, 1387, 1402], "full_path": [144, 146], "full_sent": 779, "fulli": [185, 279, 292, 314, 356, 528, 850, 1151, 1371], "funcnam": [41, 356], "function": [0, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 74, 80, 97, 98, 99, 100, 130, 132, 134, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 203, 207, 209, 211, 215, 221, 224, 231, 238, 261, 264, 265, 271, 279, 280, 285, 303, 313, 314, 315, 318, 319, 320, 323, 325, 342, 356, 359, 360, 369, 406, 426, 427, 446, 447, 449, 454, 466, 503, 505, 506, 528, 588, 596, 597, 622, 623, 638, 642, 645, 657, 659, 660, 662, 664, 666, 668, 670, 671, 673, 675, 677, 686, 689, 709, 754, 755, 756, 765, 769, 775, 777, 781, 783, 784, 785, 797, 798, 800, 802, 803, 806, 808, 809, 811, 812, 815, 817, 820, 822, 824, 831, 835, 839, 841, 846, 850, 862, 867, 872, 873, 878, 883, 897, 901, 902, 906, 910, 911, 915, 927, 931, 934, 935, 942, 943, 952, 969, 973, 977, 1018, 1038, 1039, 1048, 1064, 1065, 1071, 1083, 1126, 1127, 1129, 1130, 1151, 1213, 1221, 1242, 1254, 1255, 1256, 1259, 1261, 1262, 1269, 1271, 1276, 1278, 1281, 1300, 1349, 1352, 1354, 1355, 1356, 1371, 1376, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1397, 1398, 1399, 1400, 1401, 1402], "function_nam": 149, "further": 846, "futur": [43, 44, 65, 211, 223, 259, 297, 308, 356, 873, 877, 895, 922, 969, 1345, 1371], "g": [34, 38, 49, 148, 152, 156, 158, 160, 168, 173, 185, 211, 224, 256, 314, 324, 356, 366, 449, 504, 507, 597, 684, 796, 840, 850, 878, 915, 969, 973, 1128, 1371, 1402], "g1": [513, 763, 850], "g2": [513, 763, 850], "g_1": [689, 850, 1281, 1371], "gag": 27, "gamma": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "gantt": [911, 969], "gather": [153, 239, 356, 382, 521, 564, 773, 850, 889, 969, 994, 1143, 1189, 1371], "gather_everi": [356, 850, 969, 1371], "gb": [231, 356, 415, 1126, 1371], "gbp": 1402, "gc": [40, 156, 168, 169, 356], "gca": 27, "gcaacgcatata": 27, "gcp": [35, 38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 169, 170, 171, 172, 197, 356, 969], "gdp": [260, 356, 896, 969], "gdp2": [260, 356, 896, 969], "gdp_date": [260, 356, 896, 969], "ge": [850, 1371], "gener": [1, 53, 54, 97, 147, 148, 154, 155, 174, 180, 181, 182, 183, 184, 185, 187, 211, 219, 221, 280, 292, 311, 314, 320, 356, 576, 680, 685, 770, 789, 792, 804, 805, 807, 808, 809, 825, 837, 838, 850, 969, 1040, 1201, 1268, 1277, 1346, 1371, 1402], "geq": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "germani": [260, 356, 896, 969], "get": [53, 54, 55, 58, 65, 76, 99, 149, 159, 165, 166, 173, 203, 212, 215, 219, 220, 229, 237, 240, 242, 245, 247, 248, 252, 254, 255, 263, 267, 274, 275, 280, 288, 289, 293, 298, 301, 307, 315, 319, 329, 339, 350, 356, 367, 380, 381, 382, 384, 392, 395, 407, 415, 427, 430, 442, 443, 444, 445, 454, 464, 466, 514, 520, 527, 530, 545, 547, 550, 562, 568, 589, 598, 599, 600, 608, 610, 616, 630, 631, 640, 641, 646, 657, 658, 690, 694, 703, 750, 751, 755, 756, 758, 762, 773, 775, 797, 802, 806, 812, 813, 814, 815, 817, 818, 819, 821, 831, 835, 839, 850, 867, 872, 873, 875, 882, 887, 888, 891, 892, 898, 900, 917, 918, 925, 930, 931, 937, 949, 960, 969, 974, 979, 992, 993, 994, 995, 996, 1004, 1007, 1019, 1027, 1042, 1051, 1060, 1061, 1062, 1063, 1071, 1081, 1083, 1121, 1138, 1139, 1145, 1150, 1153, 1156, 1157, 1169, 1172, 1175, 1187, 1193, 1214, 1222, 1224, 1225, 1227, 1229, 1230, 1231, 1238, 1239, 1243, 1254, 1282, 1285, 1294, 1342, 1346, 1352, 1357, 1361, 1371], "get_chunk": 1371, "get_column": [211, 316, 356], "get_column_index": 356, "get_polars_schema": 205, "get_table_info": 205, "get_token": 34, "get_worksheet_by_nam": [41, 356], "gevent": [65, 175, 873, 969], "gh": 720, "gh45": 720, "gh45ij67kl": 720, "ghi": [366, 705, 850, 975, 1296], "gil": [597, 850, 973], "git": 63, "github": [155, 356], "give": [162, 170, 171, 260, 271, 321, 323, 356, 464, 517, 546, 651, 757, 761, 840, 850, 862, 896, 906, 913, 932, 934, 969, 1081, 1171, 1248, 1360, 1371, 1398], "given": [41, 53, 54, 55, 58, 97, 109, 114, 131, 133, 135, 136, 137, 139, 147, 148, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 178, 179, 180, 181, 183, 185, 186, 187, 188, 209, 231, 232, 234, 236, 245, 250, 255, 264, 272, 278, 279, 284, 289, 290, 291, 299, 302, 318, 325, 356, 389, 401, 406, 415, 427, 436, 455, 459, 484, 486, 487, 500, 504, 528, 534, 556, 581, 588, 591, 597, 638, 642, 648, 651, 652, 654, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 683, 705, 706, 717, 718, 733, 736, 743, 746, 756, 774, 776, 780, 782, 796, 797, 806, 811, 812, 825, 826, 827, 840, 850, 884, 891, 901, 907, 910, 913, 914, 923, 926, 935, 952, 969, 974, 975, 977, 1001, 1013, 1018, 1027, 1053, 1072, 1076, 1105, 1107, 1108, 1122, 1126, 1128, 1151, 1156, 1170, 1181, 1206, 1213, 1216, 1219, 1221, 1234, 1240, 1244, 1248, 1251, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1270, 1274, 1296, 1297, 1308, 1309, 1324, 1327, 1334, 1359, 1362, 1371, 1380, 1382, 1387, 1389, 1390, 1393, 1394, 1399, 1401, 1402], "glimps": [223, 247, 356], "glob": [152, 153, 157, 158, 162, 164, 167, 170, 171, 172], "global": [57, 98, 100, 157, 174, 183, 191, 303, 356, 652, 653, 829, 850, 927, 969, 1043, 1047, 1249, 1250, 1371, 1381, 1383, 1398], "gmt": [459, 463, 481, 1076, 1080, 1102], "go": [13, 152, 153, 167, 429, 701, 1041, 1292], "godfath": 1380, "goe": 13, "gonfruit": 1325, "good": [47, 50, 52, 257, 356, 969, 1393], "goodby": 1, "googl": [35, 156, 168, 169], "gpu": [10, 50, 64, 65, 313, 356, 872, 873, 883, 911, 924, 944, 966, 969, 1349, 1371], "gpu_devic": [313, 356], "gpudevic": [313, 356], "gpuengin": [10, 872, 883, 911, 924, 969], "grade": [1171, 1371], "grain": [872, 883, 911, 924, 966, 969], "granular": [52, 969, 1399], "grape": 1394, "graph": [64, 154, 262, 356, 612, 872, 893, 940, 969], "graphviz": [262, 356, 612, 924, 969], "great": [356, 360], "great_tabl": [356, 360], "greater": [217, 260, 356, 522, 524, 534, 689, 717, 718, 726, 743, 840, 850, 896, 969, 1156, 1281, 1308, 1309, 1317, 1334, 1371], "greatest": [1388, 1392], "greatli": [158, 170], "green": [57, 98, 100, 342, 761, 850, 952, 1360, 1371], "greenlet": [65, 873, 969], "greet": 1, "grid": [532, 850], "grid_point": [532, 850], "gridlin": [41, 356], "gross": 1380, "group": [9, 28, 47, 52, 55, 149, 153, 172, 216, 244, 245, 258, 260, 276, 278, 280, 288, 291, 324, 326, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 367, 427, 509, 515, 520, 523, 560, 596, 597, 608, 610, 638, 648, 657, 658, 691, 692, 696, 704, 705, 706, 708, 719, 720, 756, 761, 812, 850, 869, 890, 891, 896, 917, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 969, 975, 1064, 1185, 1254, 1287, 1295, 1296, 1297, 1299, 1310, 1311, 1360, 1371, 1380, 1388, 1398, 1399], "group_bi": [245, 276, 280, 288, 326, 355, 356, 367, 417, 422, 425, 427, 513, 515, 520, 523, 596, 597, 638, 691, 692, 756, 761, 763, 789, 792, 812, 850, 872, 873, 883, 891, 911, 913, 917, 924, 967, 969, 975, 1360, 1371], "group_by_dynam": [288, 356, 917, 969], "group_by_partit": [911, 969], "group_col": [513, 763, 850], "group_df": [342, 952], "group_dtyp": [638, 850], "group_index": [704, 1295], "group_to_row": [638, 850], "groupbi": [244, 356, 597, 812, 850], "grouper": [417, 422, 425, 850], "grow": [328, 356], "grown": [249, 356], "gt": [356, 360, 850, 1371], "gte": [513, 763, 850], "guarante": [10, 47, 52, 152, 153, 215, 223, 246, 272, 319, 321, 356, 426, 427, 526, 754, 755, 756, 850, 867, 877, 907, 931, 932, 969, 1038, 1039, 1149, 1353, 1355, 1356, 1371], "guid": [147, 149, 850, 973, 1402], "gzip": [47, 52, 356, 969], "h": [324, 356, 366, 484, 487, 684, 719, 720, 733, 736, 740, 850, 1310, 1311, 1324, 1327, 1331, 1394, 1395], "ha": [40, 41, 49, 50, 51, 52, 56, 58, 65, 138, 154, 167, 190, 211, 326, 332, 337, 356, 426, 427, 519, 596, 609, 615, 710, 734, 744, 755, 756, 780, 797, 806, 846, 850, 873, 924, 941, 947, 952, 969, 1038, 1039, 1052, 1064, 1066, 1301, 1325, 1355, 1356, 1371], "half": [318, 356, 482, 503, 504, 505, 506, 678, 850, 1103, 1127, 1128, 1129, 1130, 1266, 1371], "half_away_from_zero": [678, 850, 1266, 1371], "half_lif": [503, 504, 505, 506, 850, 1127, 1128, 1129, 1130, 1371], "half_to_even": [678, 850, 1266, 1371], "ham": [36, 38, 40, 43, 44, 47, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 236, 241, 246, 247, 249, 259, 263, 266, 268, 270, 273, 277, 282, 284, 285, 286, 289, 292, 293, 294, 301, 304, 305, 307, 311, 312, 314, 315, 316, 321, 327, 328, 356, 430, 612, 613, 846, 869, 874, 875, 879, 880, 881, 882, 887, 895, 909, 914, 915, 918, 919, 932, 940, 969, 1042, 1387, 1388], "ham_a": [311, 356], "ham_b": [311, 356], "ham_right": [259, 356, 895, 969], "hamburg": 846, "hand": [41, 152, 153, 167, 356, 577, 578, 579, 580, 1202, 1203, 1204, 1205], "handi": [454, 466, 775, 1071, 1083], "handl": [40, 42, 106, 140, 149, 152, 153, 167, 173, 236, 240, 284, 356, 450, 558, 703, 743, 850, 872, 887, 914, 969, 1067, 1183, 1294, 1334, 1371], "handler": [150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 224, 356, 449, 850, 878, 969], "happen": [154, 459, 645, 850, 1076, 1242, 1371], "hard": [97, 147, 167, 901, 969], "harder": [245, 356, 891, 969], "hardwar": 1402, "has_head": [152, 153, 157, 163, 167], "has_nul": [850, 1148, 1371], "has_prefix": [433, 727], "has_suffix": [429, 701], "has_two": 1389, "has_valid": 1371, "hash": [246, 356, 850, 1371], "hash_row": 356, "hat": [719, 720, 1310, 1311], "have": [5, 15, 31, 34, 41, 54, 57, 58, 66, 73, 100, 149, 150, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 212, 224, 233, 257, 259, 260, 280, 283, 288, 290, 291, 310, 318, 333, 356, 446, 449, 503, 505, 506, 597, 609, 648, 652, 653, 658, 706, 721, 777, 850, 878, 895, 896, 906, 917, 941, 942, 969, 975, 1064, 1066, 1127, 1129, 1130, 1133, 1244, 1249, 1250, 1310, 1312, 1371, 1398, 1400, 1402], "haystack": [705, 1296], "he": 729, "head": [76, 167, 243, 263, 307, 356, 372, 550, 850, 900, 969, 1175, 1342, 1371], "header": [38, 41, 47, 49, 52, 140, 152, 153, 157, 163, 167, 229, 320, 356, 969], "header_format": [41, 356], "header_nam": [320, 356], "headerless": 167, "heap": [149, 231, 356, 850, 1126, 1371], "heatmap": [41, 356], "heavili": 172, "height": [41, 148, 183, 228, 356, 359, 1371, 1376], "hell": [728, 1319], "hello": [1, 21, 728, 729, 730, 975, 1192, 1319, 1320, 1321, 1382, 1385, 1394], "hello_": 799, "hello_data": 1385, "hello_world": 1385, "help": [41, 176, 177, 178, 179, 356, 969], "helper": [356, 360, 846], "henc": [719, 1311], "here": [38, 40, 41, 43, 47, 49, 50, 51, 52, 133, 135, 136, 137, 139, 154, 155, 156, 161, 162, 164, 167, 168, 169, 170, 171, 172, 181, 183, 187, 197, 212, 280, 356, 454, 466, 596, 597, 612, 706, 713, 775, 840, 850, 865, 924, 969, 975, 1071, 1083, 1304], "hex": [411, 412, 699, 700, 738, 1023, 1024, 1290, 1291, 1329], "hexadecim": [1023, 1024], "hf": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 197, 356, 969], "hf_token": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 197, 356, 969], "hi": [1, 1394], "hidden": [41, 356], "hidden_column": [41, 356], "hide": [22, 23, 24, 25], "hide_gridlin": [41, 356], "hide_password": 154, "high": [291, 356, 360, 645, 850, 862, 1242, 1371], "higher": [47, 52, 56, 223, 282, 348, 356, 646, 669, 670, 823, 850, 877, 912, 958, 969, 1066, 1243, 1261, 1371], "highest": [356, 360, 648, 760, 780, 850, 969, 1244, 1371], "highli": [149, 850], "hint": 147, "hippopotamu": [717, 718, 1308, 1309], "hist": [850, 1371, 1376], "histogram": [1371, 1376], "hit": [868, 969], "hive": [53, 164, 170, 172], "hive_custom": 200, "hive_dir": [53, 55], "hive_partit": [164, 170, 172], "hive_schema": [164, 170, 172], "hive_serd": 200, "hmm": [975, 1394], "hold": [300, 314, 356, 1351, 1371], "holidai": [454, 466, 775, 1071, 1083], "home": [741, 1332], "horizont": [21, 66, 108, 238, 249, 267, 269, 274, 306, 324, 356, 766, 768, 777, 778, 779, 784, 785, 787, 795, 798, 814, 816, 819, 824, 834, 940, 969], "host": [63, 152, 158, 160, 172], "hour": [162, 167, 170, 171, 245, 260, 288, 326, 356, 469, 471, 472, 476, 477, 480, 482, 483, 487, 489, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 791, 792, 793, 794, 808, 836, 837, 838, 850, 891, 896, 917, 969, 975, 1098, 1101, 1103, 1110, 1116, 1128, 1371, 1395], "hours_diff": 489, "hous": [318, 356], "how": [12, 38, 40, 41, 42, 43, 47, 49, 50, 51, 52, 58, 66, 108, 149, 155, 162, 164, 167, 170, 171, 172, 197, 228, 236, 259, 260, 280, 324, 325, 356, 390, 450, 480, 481, 532, 557, 558, 638, 651, 671, 733, 736, 775, 791, 850, 887, 895, 896, 935, 940, 969, 1002, 1067, 1101, 1102, 1182, 1183, 1248, 1262, 1324, 1327, 1371], "howev": [1, 10, 53, 136, 154, 164, 172, 207, 231, 264, 314, 356, 638, 850, 872, 883, 911, 924, 969, 1126, 1371], "hstack": [108, 356], "html": [33, 41, 43, 44, 134, 154, 158, 160, 209, 210, 211, 221, 356, 977, 978], "http": [21, 33, 41, 43, 44, 76, 134, 154, 155, 158, 160, 192, 209, 210, 211, 221, 356, 612, 704, 706, 716, 924, 969, 977, 978, 1295, 1297, 1307], "httpmethod": 76, "hug": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 197, 356, 969], "huge": [231, 356, 1126, 1371], "hut": [719, 720, 1310, 1311], "hvplot": [356, 359, 1371, 1376], "hyperbol": [375, 377, 379, 438, 688, 753, 850, 987, 989, 991, 1056, 1280, 1344, 1371], "hyperloglog": [214, 356, 373, 769, 850, 866, 969, 985, 1371], "hyphen": [695, 1286], "hypothesi": [181, 183, 186, 187, 1402], "i": [1, 10, 13, 15, 18, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 72, 73, 74, 75, 80, 90, 97, 99, 100, 104, 106, 107, 108, 109, 110, 111, 113, 114, 119, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 201, 203, 207, 212, 213, 214, 215, 216, 218, 219, 223, 224, 227, 228, 230, 231, 233, 234, 235, 236, 240, 244, 245, 246, 247, 250, 251, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 272, 276, 278, 279, 280, 284, 285, 286, 288, 289, 290, 291, 292, 295, 296, 297, 299, 301, 302, 303, 304, 307, 308, 313, 314, 315, 318, 319, 320, 321, 323, 325, 326, 327, 331, 333, 334, 342, 356, 359, 360, 361, 366, 369, 371, 372, 373, 383, 386, 393, 394, 401, 406, 409, 414, 426, 427, 428, 431, 432, 446, 447, 449, 452, 453, 454, 455, 458, 466, 467, 474, 475, 477, 482, 484, 487, 495, 503, 504, 505, 506, 509, 511, 512, 513, 517, 518, 526, 528, 531, 534, 546, 551, 552, 559, 560, 563, 565, 567, 576, 581, 582, 584, 585, 588, 590, 593, 596, 597, 601, 603, 604, 605, 607, 608, 609, 611, 620, 638, 643, 644, 645, 648, 650, 651, 652, 653, 654, 657, 658, 659, 660, 662, 664, 666, 668, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 689, 690, 691, 692, 694, 695, 696, 697, 698, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 723, 726, 728, 729, 730, 733, 734, 735, 736, 738, 740, 741, 743, 748, 750, 755, 756, 761, 762, 765, 766, 767, 768, 769, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 792, 793, 798, 802, 803, 804, 805, 807, 808, 809, 810, 812, 815, 817, 820, 822, 825, 826, 827, 828, 829, 831, 833, 835, 837, 838, 839, 840, 841, 846, 850, 865, 866, 867, 868, 871, 872, 873, 875, 877, 878, 880, 881, 882, 883, 885, 886, 887, 890, 891, 894, 895, 896, 897, 899, 901, 902, 906, 907, 911, 914, 915, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 931, 932, 934, 935, 936, 937, 939, 942, 943, 944, 952, 962, 969, 973, 975, 982, 983, 984, 985, 997, 998, 1005, 1006, 1013, 1016, 1018, 1021, 1026, 1038, 1039, 1043, 1044, 1045, 1048, 1053, 1054, 1064, 1065, 1066, 1069, 1070, 1071, 1072, 1075, 1083, 1084, 1098, 1103, 1105, 1108, 1116, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1135, 1136, 1137, 1138, 1141, 1149, 1150, 1151, 1153, 1156, 1158, 1161, 1168, 1170, 1171, 1172, 1175, 1176, 1177, 1184, 1185, 1188, 1190, 1192, 1201, 1206, 1207, 1210, 1213, 1221, 1240, 1241, 1242, 1244, 1246, 1248, 1249, 1250, 1251, 1254, 1255, 1256, 1259, 1261, 1262, 1263, 1265, 1266, 1268, 1269, 1270, 1271, 1272, 1274, 1277, 1278, 1281, 1282, 1285, 1286, 1287, 1288, 1289, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1314, 1317, 1319, 1320, 1321, 1324, 1325, 1326, 1327, 1329, 1331, 1332, 1334, 1341, 1342, 1345, 1349, 1351, 1352, 1354, 1355, 1356, 1360, 1361, 1371, 1376, 1380, 1381, 1386, 1390, 1391, 1394, 1397, 1399, 1400, 1402], "i0e0": 1402, "i16": [1, 61, 462, 478, 497, 684, 850, 975, 1099, 1348, 1371, 1402], "i32": [1, 61, 133, 136, 140, 180, 182, 183, 294, 303, 356, 392, 393, 395, 414, 428, 457, 465, 468, 469, 470, 471, 472, 476, 499, 684, 775, 840, 850, 919, 969, 974, 1004, 1005, 1007, 1026, 1074, 1085, 1089, 1090, 1091, 1097, 1120, 1219, 1371, 1391, 1395, 1402], "i64": [1, 10, 11, 14, 17, 18, 22, 28, 59, 60, 61, 62, 66, 67, 85, 107, 133, 134, 135, 136, 137, 138, 139, 140, 148, 152, 154, 161, 162, 167, 178, 212, 213, 215, 216, 217, 218, 220, 224, 225, 228, 229, 232, 233, 235, 236, 239, 240, 242, 243, 244, 245, 247, 249, 250, 252, 254, 256, 259, 260, 261, 263, 264, 265, 266, 272, 273, 278, 279, 280, 281, 284, 285, 286, 287, 288, 292, 294, 296, 299, 301, 302, 303, 305, 307, 309, 316, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 346, 349, 350, 356, 361, 366, 368, 372, 382, 387, 388, 390, 391, 396, 398, 399, 400, 401, 402, 404, 407, 417, 422, 425, 426, 427, 436, 442, 443, 444, 445, 446, 447, 450, 451, 464, 480, 486, 488, 489, 490, 491, 492, 493, 494, 504, 507, 509, 510, 512, 513, 514, 515, 517, 520, 521, 523, 527, 529, 531, 532, 533, 534, 537, 538, 540, 541, 542, 543, 544, 547, 550, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 594, 596, 597, 617, 618, 619, 621, 622, 624, 626, 628, 629, 634, 638, 639, 642, 643, 644, 645, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 680, 682, 683, 684, 685, 690, 691, 692, 710, 719, 720, 734, 738, 743, 744, 746, 747, 748, 749, 750, 751, 755, 756, 757, 758, 760, 763, 770, 773, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 791, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 821, 824, 828, 829, 830, 833, 834, 835, 836, 840, 846, 850, 865, 867, 869, 870, 872, 873, 878, 879, 881, 884, 886, 887, 888, 889, 890, 891, 892, 895, 896, 897, 898, 900, 901, 902, 903, 907, 908, 910, 911, 913, 914, 915, 916, 917, 919, 921, 923, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 938, 941, 942, 945, 946, 948, 949, 950, 952, 953, 956, 959, 960, 969, 975, 979, 980, 981, 984, 1003, 1008, 1010, 1012, 1013, 1014, 1016, 1019, 1038, 1039, 1053, 1054, 1060, 1061, 1062, 1063, 1064, 1065, 1081, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1132, 1133, 1134, 1136, 1137, 1142, 1143, 1145, 1150, 1152, 1161, 1175, 1183, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1195, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1213, 1214, 1221, 1226, 1234, 1240, 1242, 1245, 1246, 1247, 1249, 1250, 1251, 1253, 1257, 1260, 1264, 1268, 1269, 1271, 1274, 1275, 1277, 1282, 1283, 1329, 1335, 1340, 1342, 1347, 1355, 1356, 1357, 1362, 1371, 1380, 1381, 1383, 1387, 1388, 1389, 1390, 1391, 1393, 1396, 1397, 1399, 1400, 1402], "i8": [405, 406, 462, 465, 469, 471, 472, 473, 476, 478, 479, 483, 496, 497, 587, 684, 822, 825, 841, 850, 1017, 1018, 1067, 1079, 1082, 1093, 1094, 1100, 1104, 1117, 1118, 1212, 1252, 1275, 1359, 1371, 1395], "i_bitand_j": 1390, "i_bitand_op_j": 1390, "i_bitcount": 1390, "i_bitor_j": 1390, "i_bitor_op_j": 1390, "i_bitxor_j": 1390, "i_bitxor_op_j": 1390, "iceberg": [42, 169, 356, 862], "icon": [41, 356], "id": [27, 34, 41, 66, 148, 152, 157, 169, 261, 313, 320, 333, 342, 356, 657, 719, 720, 759, 850, 897, 942, 952, 969, 975, 1254, 1358, 1371, 1399, 1400, 1402], "id_char": 1402, "id_var": [271, 323, 356, 906, 934, 969], "ideal": [142, 147], "ident": [34, 140, 217, 218, 356, 484, 656, 657, 850, 870, 871, 969, 1052, 1054, 1105, 1253, 1254, 1371], "identif": [157, 163], "identifi": [140, 154, 271, 278, 321, 323, 334, 356, 906, 932, 934, 969], "idiograph": 975, "idiom": 840, "idiomat": [846, 875, 882, 918, 937, 952, 969], "idx": [167, 245, 258, 333, 356, 393, 406, 588, 891, 942, 969, 1018, 1213, 1299], "idx_lit": 1299, "idx_rx": 1299, "ieee": [757, 850], "if_set": [5, 31], "if_table_exist": [39, 356], "ifnul": 1392, "ignor": [40, 56, 154, 172, 182, 183, 187, 265, 269, 306, 325, 356, 369, 371, 394, 414, 450, 481, 503, 505, 506, 558, 567, 630, 631, 695, 711, 765, 767, 779, 816, 834, 850, 902, 935, 969, 975, 982, 983, 1006, 1026, 1067, 1102, 1127, 1129, 1130, 1183, 1192, 1230, 1231, 1286, 1302, 1371], "ignore_error": [152, 153, 162, 167, 171], "ignore_nul": [269, 306, 356, 369, 371, 394, 503, 505, 506, 567, 695, 711, 765, 767, 779, 816, 834, 850, 982, 983, 1006, 1127, 1129, 1130, 1192, 1286, 1302, 1371], "ignore_spac": 975, "ij": 720, "ij67": 720, "ijkl": 1394, "ilmsuxu": [696, 704, 705, 708, 719, 720, 1287, 1295, 1296, 1299, 1310, 1311], "imbal": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "imdb_scor": 1380, "immedi": [207, 648, 770, 774, 776, 780, 782, 789, 790, 792, 793, 804, 805, 808, 809, 822, 825, 828, 832, 837, 838, 841, 850, 1244, 1371, 1381], "immut": [314, 356, 1351, 1371], "impact": [245, 356, 891, 969, 1380, 1399], "impl": 169, "implement": [47, 97, 147, 154, 211, 246, 264, 342, 356, 359, 360, 526, 597, 621, 622, 624, 626, 628, 629, 744, 754, 812, 850, 952, 1149, 1221, 1269, 1271, 1353, 1371, 1376], "implic": [449, 850, 878, 969], "implicit": [325, 356, 840, 935, 969], "implicitli": [236, 284, 356, 513, 840, 850, 887, 914, 969, 1399], "implod": [850, 1371, 1389], "import": [11, 17, 29, 36, 38, 40, 41, 43, 44, 47, 58, 73, 76, 97, 133, 134, 137, 138, 148, 152, 154, 155, 161, 162, 167, 173, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 213, 216, 223, 224, 225, 228, 243, 245, 258, 260, 278, 280, 296, 303, 311, 313, 318, 323, 324, 326, 356, 359, 360, 415, 448, 449, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 604, 605, 611, 638, 660, 662, 664, 666, 668, 670, 673, 675, 677, 775, 788, 789, 790, 791, 792, 793, 794, 795, 808, 829, 837, 838, 846, 850, 862, 869, 873, 877, 878, 879, 881, 891, 896, 901, 921, 934, 969, 973, 1027, 1055, 1057, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1128, 1159, 1162, 1164, 1165, 1256, 1279, 1343, 1371, 1376, 1381, 1396, 1399, 1402], "improv": [39, 52, 158, 169, 170, 259, 356, 596, 850, 895, 969], "in_part_idx": [53, 55, 146], "in_plac": [249, 300, 328, 356, 1245, 1276, 1283, 1371], "in_progress": [913, 969], "includ": [7, 21, 31, 38, 40, 41, 49, 53, 55, 63, 138, 154, 156, 157, 162, 163, 164, 167, 168, 169, 170, 171, 172, 183, 184, 207, 219, 223, 231, 261, 278, 280, 284, 291, 302, 318, 320, 324, 325, 356, 447, 483, 513, 517, 528, 534, 604, 645, 659, 661, 663, 665, 667, 669, 671, 672, 674, 676, 719, 720, 724, 725, 728, 729, 775, 784, 826, 827, 850, 877, 887, 897, 914, 926, 935, 969, 975, 1065, 1066, 1104, 1126, 1137, 1151, 1156, 1242, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1310, 1311, 1315, 1316, 1319, 1371, 1399], "include_bom": [38, 49, 356, 969], "include_boundari": [245, 356, 891, 969], "include_break": [447, 645, 850, 1065, 1242, 1371], "include_breakpoint": [528, 850, 1151, 1371], "include_categor": 975, "include_categori": [528, 850, 1151, 1371], "include_col": 183, "include_file_path": [157, 162, 163, 164, 167, 170, 171, 172], "include_head": [38, 41, 49, 153, 320, 356, 969], "include_index": 138, "include_init": 784, "include_kei": [53, 55, 278, 291, 356], "include_nul": [325, 356, 935, 969], "inclus": [212, 245, 288, 356, 487, 534, 658, 662, 664, 666, 668, 670, 673, 675, 677, 724, 725, 770, 789, 790, 792, 793, 804, 805, 808, 809, 837, 838, 850, 891, 917, 969, 1108, 1156, 1315, 1316, 1371], "incom": 154, "incompat": 126, "incomplet": [653, 850, 1250, 1371], "incorpor": 1399, "incorrect": [297, 356, 498, 596, 597, 682, 850, 922, 952, 969, 1119, 1272, 1371], "incorrectli": [152, 588], "increas": [41, 53, 54, 55, 58, 152, 157, 163, 164, 172, 356, 446, 657, 850, 1064, 1254, 1371], "independ": [64, 180, 183, 187, 318, 356, 685, 850, 872, 883, 911, 924, 969], "index": [41, 114, 134, 138, 141, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 175, 211, 213, 239, 241, 245, 250, 255, 257, 280, 286, 288, 289, 290, 299, 301, 313, 314, 316, 323, 325, 326, 332, 333, 356, 367, 380, 381, 382, 384, 387, 388, 393, 401, 406, 504, 520, 521, 523, 530, 553, 554, 563, 564, 565, 581, 582, 588, 658, 662, 664, 666, 668, 670, 673, 675, 677, 681, 683, 690, 696, 704, 708, 710, 723, 734, 744, 773, 804, 807, 850, 889, 891, 917, 923, 925, 934, 935, 941, 942, 969, 975, 992, 993, 994, 995, 996, 999, 1000, 1005, 1013, 1018, 1128, 1142, 1143, 1153, 1170, 1178, 1179, 1188, 1189, 1190, 1206, 1207, 1213, 1234, 1269, 1270, 1274, 1282, 1295, 1299, 1301, 1314, 1325, 1371, 1376, 1389, 1394], "index_column": [245, 288, 356, 658, 850, 891, 917, 969], "index_of": [850, 1371], "indexord": [313, 314, 356], "indic": [38, 41, 43, 47, 49, 50, 51, 52, 72, 73, 75, 90, 107, 117, 149, 150, 152, 153, 154, 157, 158, 160, 162, 163, 164, 167, 170, 171, 172, 180, 181, 187, 197, 245, 288, 291, 299, 311, 356, 383, 401, 520, 528, 535, 536, 537, 539, 540, 541, 542, 543, 544, 563, 581, 601, 602, 603, 604, 605, 606, 607, 638, 658, 662, 664, 666, 668, 670, 673, 675, 677, 681, 683, 773, 774, 821, 850, 891, 917, 923, 969, 975, 1013, 1048, 1142, 1151, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1188, 1206, 1269, 1270, 1274, 1346, 1371, 1394, 1402], "indistinguish": [38, 49, 356, 969], "individu": [41, 52, 143, 207, 288, 313, 314, 318, 356, 597, 705, 747, 850, 872, 917, 969, 975, 1051, 1296, 1371], "inequ": [632, 850], "inexact": [176, 177, 178, 179], "inf": [180, 183, 187, 379, 447, 536, 539, 645, 757, 850, 991, 1057, 1065, 1159, 1162, 1219, 1237, 1242, 1359, 1371, 1396], "infer": [38, 43, 47, 49, 50, 51, 52, 74, 89, 107, 133, 135, 136, 137, 138, 139, 152, 153, 154, 157, 161, 162, 163, 164, 167, 170, 171, 172, 197, 264, 356, 596, 597, 654, 712, 733, 735, 736, 737, 740, 794, 798, 810, 825, 850, 969, 1221, 1251, 1303, 1324, 1326, 1327, 1328, 1331, 1371], "infer_schema": [152, 167], "infer_schema_length": [136, 139, 148, 152, 153, 154, 157, 161, 162, 163, 167, 171, 356, 712, 969, 1303], "inference_length": [737, 1328], "inference_s": [264, 356], "infin": [741, 757, 850, 1332], "infinit": [539, 757, 850, 1162, 1371], "influenc": [157, 901, 969], "influxdb": 154, "info": [156, 168, 169, 175], "inform": [20, 24, 38, 39, 43, 47, 49, 50, 51, 52, 53, 54, 55, 63, 147, 149, 156, 162, 164, 167, 168, 169, 170, 171, 172, 176, 178, 197, 198, 199, 201, 202, 209, 221, 223, 356, 360, 546, 597, 689, 696, 704, 705, 708, 719, 720, 850, 872, 877, 883, 911, 924, 969, 973, 977, 1047, 1171, 1281, 1287, 1295, 1296, 1299, 1310, 1311, 1371], "inherit": [289, 356, 449, 850, 878, 969], "init": [207, 1380], "initcap": 1392, "initi": [33, 34, 35, 41, 89, 147, 192, 207, 356, 784, 798, 840, 1399], "initialis": [76, 154, 207, 969], "inject": [41, 58, 356], "inlin": [25, 291, 356, 696, 704, 705, 708, 719, 720, 1287, 1295, 1296, 1299, 1310, 1311, 1389], "inner": [67, 85, 182, 259, 261, 325, 356, 394, 405, 451, 567, 587, 597, 651, 754, 829, 850, 895, 897, 935, 969, 1006, 1017, 1068, 1192, 1212, 1221, 1248, 1353, 1371, 1387, 1399], "inner_dtyp": [182, 185], "innermost": [182, 185], "innter": 1005, "inprocessqueri": [872, 969], "input": [0, 55, 58, 64, 107, 136, 138, 149, 152, 153, 215, 225, 244, 261, 264, 265, 269, 278, 280, 285, 294, 295, 299, 302, 306, 319, 325, 330, 331, 335, 356, 366, 427, 429, 433, 436, 504, 507, 519, 534, 592, 596, 597, 609, 638, 652, 653, 686, 692, 710, 721, 723, 729, 730, 731, 732, 734, 736, 748, 756, 764, 766, 768, 770, 773, 776, 777, 778, 779, 787, 794, 796, 804, 805, 810, 811, 812, 814, 816, 819, 828, 832, 834, 840, 846, 850, 862, 867, 879, 890, 897, 902, 915, 919, 920, 923, 926, 931, 935, 938, 939, 945, 969, 1039, 1053, 1128, 1156, 1217, 1218, 1221, 1240, 1249, 1250, 1274, 1278, 1301, 1314, 1325, 1327, 1356, 1371, 1393, 1394, 1396], "input_wildcard_expans": [149, 850], "insensit": [697, 705, 707, 709, 719, 720, 721, 975, 1287, 1288, 1296, 1298, 1299, 1300, 1310, 1311, 1312], "insensitive_match": [696, 708], "insert": [39, 56, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 250, 265, 320, 322, 356, 681, 695, 711, 743, 850, 902, 933, 969, 1270, 1286, 1302, 1334, 1371], "insert_aft": [41, 356], "insert_befor": [41, 356], "insert_chart": [41, 356], "insert_column": 356, "insid": [65, 596, 840, 850, 873, 969], "inspect": [850, 969], "instal": [33, 34, 35, 111, 138, 152, 153, 155, 158, 160, 221, 315, 356, 454, 466, 612, 775, 924, 969, 1071, 1083, 1352, 1371], "instanc": [38, 43, 47, 49, 50, 51, 52, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 183, 187, 197, 233, 238, 356, 609, 784, 798, 846, 862, 869, 901, 913, 941, 942, 969, 1133, 1371], "instanti": [34, 39, 41, 154, 185, 294, 312, 313, 330, 356, 361, 919, 938, 969, 974, 1348, 1349, 1371], "instantli": [65, 873, 969], "instead": [38, 40, 45, 46, 58, 65, 67, 134, 135, 136, 139, 152, 153, 154, 157, 163, 164, 167, 172, 173, 180, 181, 182, 183, 187, 214, 215, 243, 256, 257, 260, 264, 271, 276, 278, 289, 290, 291, 294, 295, 296, 299, 313, 314, 315, 319, 331, 332, 356, 359, 360, 382, 401, 427, 428, 431, 432, 447, 461, 487, 504, 507, 517, 581, 611, 644, 645, 652, 683, 695, 703, 714, 715, 728, 729, 730, 731, 732, 743, 750, 756, 763, 770, 772, 774, 776, 780, 781, 782, 789, 790, 792, 793, 794, 804, 805, 808, 809, 822, 825, 828, 829, 832, 833, 837, 838, 841, 850, 865, 866, 867, 873, 883, 896, 906, 919, 920, 921, 923, 931, 939, 940, 941, 944, 969, 975, 994, 1013, 1023, 1039, 1040, 1044, 1045, 1065, 1078, 1087, 1088, 1108, 1128, 1148, 1206, 1241, 1242, 1249, 1269, 1271, 1274, 1283, 1286, 1294, 1305, 1306, 1319, 1320, 1321, 1334, 1341, 1351, 1352, 1356, 1371, 1376, 1380, 1381, 1385, 1399, 1400], "int": [11, 13, 14, 15, 18, 26, 27, 38, 39, 41, 43, 47, 49, 50, 51, 52, 54, 60, 67, 74, 136, 139, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 197, 199, 213, 215, 217, 223, 231, 234, 235, 239, 241, 243, 246, 247, 248, 250, 255, 257, 258, 260, 263, 264, 275, 276, 286, 288, 289, 292, 298, 299, 301, 304, 307, 312, 316, 319, 324, 327, 329, 332, 333, 339, 350, 356, 366, 393, 401, 403, 406, 408, 409, 426, 427, 446, 450, 454, 480, 503, 505, 506, 510, 511, 512, 518, 520, 521, 523, 526, 527, 528, 550, 558, 563, 564, 565, 566, 576, 581, 582, 584, 586, 587, 588, 590, 637, 639, 642, 643, 645, 648, 651, 654, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 685, 690, 694, 704, 710, 712, 717, 718, 719, 723, 725, 726, 734, 737, 738, 743, 751, 755, 756, 762, 764, 770, 780, 782, 788, 791, 794, 800, 802, 804, 805, 808, 809, 821, 822, 825, 826, 827, 831, 832, 835, 836, 839, 841, 850, 867, 870, 877, 885, 886, 889, 892, 896, 900, 911, 923, 925, 928, 930, 931, 936, 937, 941, 942, 944, 949, 960, 969, 974, 975, 992, 993, 1005, 1013, 1015, 1018, 1020, 1021, 1038, 1039, 1040, 1051, 1052, 1058, 1064, 1067, 1068, 1071, 1101, 1126, 1127, 1129, 1130, 1134, 1135, 1136, 1141, 1142, 1143, 1149, 1150, 1151, 1153, 1170, 1174, 1175, 1183, 1188, 1189, 1190, 1191, 1201, 1206, 1207, 1209, 1211, 1212, 1213, 1215, 1227, 1228, 1230, 1231, 1234, 1236, 1237, 1240, 1241, 1242, 1244, 1248, 1251, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1277, 1282, 1285, 1295, 1301, 1303, 1308, 1309, 1310, 1314, 1316, 1317, 1325, 1328, 1329, 1334, 1341, 1342, 1348, 1355, 1356, 1361, 1371, 1383, 1386, 1399, 1402], "int16": [1, 48, 61, 318, 356, 444, 445, 478, 750, 850, 975, 1062, 1063, 1099, 1341, 1348, 1371], "int32": [1, 41, 61, 66, 133, 136, 180, 182, 183, 245, 258, 265, 288, 313, 356, 392, 393, 395, 414, 428, 457, 468, 469, 470, 471, 476, 499, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 754, 825, 850, 891, 902, 917, 969, 974, 975, 1001, 1004, 1005, 1007, 1026, 1074, 1085, 1089, 1090, 1091, 1097, 1120, 1128, 1219, 1353, 1354, 1371], "int64": [1, 40, 41, 60, 61, 66, 67, 89, 109, 152, 161, 219, 229, 238, 245, 265, 279, 288, 293, 294, 308, 315, 356, 387, 388, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 444, 445, 488, 489, 490, 491, 492, 493, 494, 498, 504, 507, 596, 597, 623, 625, 627, 642, 650, 658, 662, 664, 666, 668, 670, 673, 675, 677, 712, 738, 750, 754, 770, 777, 796, 804, 805, 810, 825, 832, 846, 850, 874, 882, 891, 902, 910, 917, 918, 919, 969, 975, 999, 1000, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1062, 1063, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1119, 1121, 1128, 1221, 1246, 1329, 1341, 1351, 1352, 1353, 1354, 1371], "int64arrai": [1345, 1371], "int8": [1, 61, 89, 238, 356, 405, 406, 444, 445, 462, 465, 472, 473, 479, 483, 496, 497, 587, 750, 822, 825, 841, 850, 974, 1017, 1018, 1062, 1063, 1067, 1079, 1082, 1093, 1094, 1100, 1104, 1117, 1118, 1212, 1252, 1341, 1351, 1359, 1371], "int_rang": [245, 324, 333, 342, 356, 770, 807, 828, 891, 901, 942, 952, 969], "integ": [38, 41, 49, 56, 72, 73, 75, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 174, 181, 183, 186, 188, 213, 228, 245, 265, 288, 311, 314, 356, 370, 435, 483, 516, 517, 637, 643, 645, 650, 657, 658, 659, 671, 710, 734, 738, 764, 770, 800, 804, 805, 825, 850, 881, 891, 902, 917, 969, 975, 1050, 1104, 1140, 1240, 1242, 1246, 1254, 1255, 1262, 1269, 1301, 1325, 1329, 1351, 1371, 1393, 1399, 1402], "integer_cast": [56, 265, 356, 902, 969], "integer_list": 85, "integr": [41, 318, 356, 662, 664, 666, 668, 670, 673, 675, 677, 850, 1402], "intend": [1, 176, 177, 178, 179, 743, 1334], "intens": [264, 342, 356, 638, 850, 1221, 1371], "interact": [183, 187, 223, 356, 359, 877, 969, 1371, 1376], "interchang": [134, 211], "interest": [153, 484, 487, 1105, 1108], "interfac": [0, 122, 123, 133, 134, 205, 206, 210, 862, 978, 1399], "interfer": 973, "interleav": 1394, "intermedi": [251, 356, 532, 850, 894, 969, 1154, 1155, 1371, 1402], "intern": [43, 44, 50, 154, 174, 257, 308, 356, 517, 850, 969, 1345, 1371, 1381], "interoper": [209, 977], "interpol": [223, 282, 348, 356, 512, 533, 600, 646, 669, 670, 823, 850, 877, 912, 958, 969, 1066, 1155, 1243, 1261, 1371, 1388], "interpolate_bi": [850, 1371], "interpolationmethod": [532, 850, 1154, 1371], "interpret": [137, 139, 152, 153, 167, 356, 414, 969, 1026], "intersect": [41, 356, 578, 975, 1203, 1398], "interv": [245, 288, 326, 356, 447, 482, 528, 534, 645, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 808, 809, 837, 838, 850, 891, 917, 969, 1065, 1079, 1081, 1082, 1089, 1091, 1093, 1094, 1097, 1099, 1100, 1103, 1107, 1117, 1151, 1156, 1242, 1371, 1388], "intoexpr": [149, 215, 244, 245, 288, 294, 295, 299, 302, 319, 330, 331, 335, 356, 372, 389, 390, 410, 413, 416, 427, 450, 454, 480, 504, 510, 520, 528, 530, 533, 534, 556, 557, 577, 578, 579, 580, 638, 652, 653, 662, 664, 666, 668, 670, 673, 675, 677, 681, 683, 692, 697, 707, 709, 721, 724, 725, 726, 728, 729, 730, 731, 732, 748, 756, 766, 768, 773, 776, 777, 778, 779, 780, 782, 784, 787, 791, 798, 808, 814, 816, 819, 825, 828, 832, 834, 850, 867, 890, 891, 917, 919, 920, 923, 926, 931, 938, 939, 945, 969, 1001, 1002, 1022, 1025, 1028, 1039, 1071, 1128, 1134, 1153, 1155, 1156, 1181, 1182, 1249, 1250, 1270, 1274, 1300, 1315, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1356, 1371], "intoexprcolumn": [236, 250, 284, 356, 393, 394, 401, 426, 427, 436, 482, 510, 513, 564, 567, 576, 581, 639, 643, 680, 683, 704, 710, 713, 723, 734, 738, 743, 755, 756, 770, 775, 789, 790, 792, 793, 804, 805, 809, 837, 838, 840, 850, 887, 914, 923, 969, 1005, 1006, 1013, 1053, 1098, 1103, 1116, 1134, 1189, 1192, 1201, 1206, 1237, 1248, 1295, 1301, 1304, 1314, 1325, 1329, 1334, 1371], "introduc": [57, 100, 733, 735, 736, 1324, 1326, 1327], "introduct": 1398, "intuit": [517, 850, 975], "invalid": [38, 49, 123, 152, 153, 167, 216, 356, 428, 712, 713, 738, 757, 850, 969, 1023, 1040, 1303, 1304, 1329, 1371], "invalid_valu": 1023, "invalidoperationerror": [653, 850, 1250, 1371, 1397], "invari": [901, 969], "invers": [374, 375, 376, 377, 378, 379, 850, 986, 987, 988, 989, 990, 991, 1351, 1371, 1396], "invert": 975, "invok": [207, 596, 850], "involv": [236, 284, 356, 887, 914, 969], "io": [36, 38, 41, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 150, 152, 158, 159, 160, 161, 162, 165, 166, 167, 169, 170, 171, 224, 296, 356, 449, 519, 611, 850, 878, 921, 969], "io_sourc": 147, "iobas": [45, 161, 162, 224, 296, 356, 449, 611, 615, 850, 878, 921, 969], "ipc": [43, 44, 50, 158, 159, 160, 170, 173, 356, 862, 969], "ipccompress": [43, 44, 50, 356, 969], "ir": [924, 969], "is_between": [850, 1371], "is_dupl": [356, 850, 1371], "is_elementwis": [149, 596, 850], "is_empti": [356, 1371], "is_finit": [850, 1371], "is_first_distinct": [850, 1371], "is_in": [109, 236, 356, 850, 1371], "is_infinit": [850, 1371], "is_last_distinct": [850, 1371], "is_nan": [227, 356, 850, 880, 969, 1371], "is_not_nan": [850, 1371], "is_not_nul": [284, 356, 850, 914, 969, 1371], "is_nul": [228, 356, 850, 881, 969, 1371], "is_numer": 1402, "is_odd": [294, 356, 919, 969, 975], "is_selector": 975, "is_sort": 1371, "is_uniqu": [356, 850, 1371], "isn": [97, 147, 840], "iso": [468, 487, 496, 497, 1085, 1108, 1117, 1118, 1394], "iso8601": [152, 153, 167, 487, 1108], "iso_lang": 1394, "iso_year": 499, "isodow": 1395, "isoweek": 1395, "isoyear": 1395, "issu": [102, 103, 106, 107, 110, 117, 119, 130, 152, 153, 154, 167, 356, 444, 445, 750, 850, 1062, 1063, 1341, 1371, 1399], "ital": [41, 356], "item": [14, 66, 153, 243, 289, 292, 356, 389, 393, 394, 450, 509, 556, 558, 565, 567, 576, 680, 726, 850, 865, 1001, 1005, 1006, 1067, 1132, 1181, 1183, 1190, 1192, 1201, 1268, 1317, 1371], "iter": [53, 54, 55, 58, 64, 65, 66, 76, 132, 133, 136, 147, 149, 154, 186, 188, 215, 225, 236, 244, 245, 256, 257, 258, 261, 284, 288, 289, 290, 291, 294, 295, 302, 319, 320, 330, 331, 334, 335, 356, 427, 446, 454, 466, 513, 638, 692, 748, 756, 766, 768, 773, 775, 776, 777, 778, 779, 787, 814, 816, 819, 828, 832, 834, 840, 846, 850, 867, 879, 887, 890, 891, 897, 914, 917, 919, 920, 926, 931, 938, 939, 945, 969, 974, 975, 1039, 1064, 1071, 1083, 1137, 1269, 1356, 1371, 1402], "iter_batch": 154, "iter_column": 356, "iter_row": [258, 289, 290, 291, 356], "iter_slic": 356, "its": [77, 140, 175, 231, 314, 356, 458, 482, 495, 504, 596, 656, 692, 747, 761, 840, 850, 865, 875, 882, 937, 969, 973, 1047, 1075, 1103, 1116, 1126, 1128, 1253, 1351, 1371, 1401], "itself": [181, 356, 359, 360, 597, 659, 661, 663, 665, 667, 669, 671, 672, 674, 676, 774, 826, 827, 850, 899, 969, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1371, 1376, 1380, 1381, 1399], "ix": [280, 356], "j": [320, 356, 1390], "jax": [313, 356, 1349, 1371], "jax_enable_x64": [313, 356], "jaxexporttyp": [313, 356], "jjk": 975, "jkl": [705, 1296], "jklmn": 1394, "job": [868, 969], "join": [57, 58, 64, 66, 100, 236, 260, 261, 284, 325, 356, 513, 532, 638, 695, 829, 850, 872, 883, 887, 896, 897, 911, 914, 924, 935, 940, 969, 1286, 1381, 1383, 1389, 1398, 1399], "join_asof": [259, 356, 895, 969], "join_nul": [259, 356, 895, 969], "join_wher": [356, 969], "joinstrategi": [58, 259, 356, 895, 969], "joinvalid": [259, 356, 895, 969], "jpy": 1402, "json": [2, 3, 5, 6, 45, 46, 148, 149, 161, 162, 169, 171, 200, 224, 296, 356, 449, 519, 611, 615, 712, 713, 745, 850, 862, 878, 921, 969, 1303, 1304, 1337], "json_path": [713, 1304], "json_path_match": [712, 1303], "json_stat": 5, "json_str": [161, 162], "json_val": [713, 1304], "jsonencod": 148, "jsonpath": [712, 713, 1303, 1304], "jst": [140, 975], "jul": [733, 1324, 1394], "juli": [1108, 1394, 1395], "just": [41, 138, 154, 167, 271, 323, 356, 906, 934, 969, 975], "k": [215, 291, 319, 320, 356, 426, 427, 441, 546, 755, 756, 850, 867, 931, 969, 1038, 1039, 1059, 1171, 1355, 1356, 1371], "k_2": [689, 850, 1281, 1371], "k_3": [689, 850, 1281, 1371], "kadokawa": [716, 1307], "kanji": 975, "karen": [280, 356], "kathmandu": [1077, 1078, 1106], "kb": [231, 356, 415, 1027, 1126, 1371], "kde": [1371, 1376], "keep": [58, 152, 153, 162, 167, 170, 171, 236, 321, 325, 326, 356, 519, 596, 614, 622, 652, 776, 840, 850, 932, 935, 969, 1249, 1371], "kei": [38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 55, 58, 63, 66, 145, 146, 156, 162, 164, 167, 168, 169, 170, 171, 172, 197, 212, 213, 245, 257, 259, 260, 272, 278, 285, 287, 290, 291, 325, 356, 513, 597, 652, 653, 721, 789, 792, 832, 850, 891, 895, 896, 907, 913, 915, 916, 935, 969, 975, 979, 1249, 1250, 1312, 1371, 1387], "kept": [321, 356, 932, 969], "keyedpartit": 146, "keyedpartitioncontext": [53, 55, 145], "keyerror": 17, "keystrok": 846, "keyword": [40, 156, 164, 168, 183, 187, 197, 221, 244, 279, 289, 294, 295, 315, 330, 331, 335, 356, 454, 513, 642, 737, 748, 775, 828, 832, 840, 850, 890, 910, 919, 920, 938, 939, 945, 969, 1071, 1328, 1352, 1371, 1384], "kl": 720, "kleen": [369, 371, 765, 766, 767, 768, 850, 982, 983, 1371], "klmnoopqrstuvwxyz": [258, 356], "knight": 1380, "know": [58, 154, 280, 323, 356, 588, 596, 850, 865, 934, 969], "known": [158, 201, 406, 588, 678, 850, 952, 1018, 1213, 1266, 1371], "kurtosi": [659, 850, 1255, 1371], "kuzu_db_conn": 154, "kwarg": [32, 33, 37, 57, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 149, 151, 154, 155, 183, 185, 187, 200, 204, 221, 236, 279, 284, 315, 356, 359, 642, 850, 887, 910, 914, 944, 969, 1352, 1371, 1376, 1384, 1399], "k\u00f9zudb": 154, "l": [808, 809], "l1": 66, "l2": 66, "label": [245, 313, 318, 356, 359, 360, 447, 645, 659, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 850, 891, 911, 969, 1065, 1242, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1371, 1376], "label_column": [318, 356], "labelangl": [356, 359, 1371, 1376], "lag": [299, 356, 401, 581, 683, 778, 850, 923, 969, 1013, 1206, 1274, 1371], "lake": [40, 156, 168, 356, 862], "lambda": [53, 97, 167, 238, 264, 279, 280, 285, 342, 356, 361, 406, 505, 506, 588, 596, 597, 622, 623, 784, 785, 798, 811, 812, 824, 850, 901, 910, 915, 952, 969, 1018, 1129, 1130, 1213, 1221, 1371], "land": [454, 466, 1071, 1083], "languag": [167, 245, 260, 288, 326, 356, 477, 482, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1098, 1103, 1116, 1128, 1371], "larg": [11, 12, 15, 58, 154, 157, 163, 172], "large_str": [258, 308, 315, 356], "larger": [11, 49, 50, 51, 52, 517, 780, 850, 969], "largest": [215, 319, 356, 427, 755, 756, 850, 867, 931, 969, 1039, 1355, 1356, 1371], "last": [40, 162, 167, 170, 171, 176, 177, 178, 179, 247, 260, 263, 280, 291, 302, 307, 314, 321, 350, 356, 382, 393, 402, 446, 462, 474, 478, 496, 518, 540, 565, 583, 586, 588, 621, 622, 624, 626, 628, 629, 638, 653, 691, 692, 710, 726, 734, 751, 773, 835, 846, 850, 896, 926, 930, 932, 960, 969, 975, 994, 1005, 1014, 1064, 1079, 1095, 1099, 1117, 1141, 1150, 1163, 1175, 1190, 1208, 1211, 1250, 1283, 1301, 1317, 1325, 1342, 1351, 1371, 1392, 1394], "last_column": [41, 356], "later": [260, 296, 356, 611, 896, 921, 969], "latest": [33, 134, 156, 168, 211, 480, 481, 609, 733, 736, 791, 1101, 1102, 1324, 1327], "latt": 975, "latter": [41, 134, 233, 356, 1133, 1371], "lazi": [1, 49, 50, 51, 52, 53, 66, 152, 158, 162, 164, 167, 183, 260, 279, 280, 303, 356, 361, 597, 800, 822, 825, 841, 850, 877, 895, 896, 940, 945, 946, 948, 950, 952, 953, 954, 955, 956, 957, 958, 959, 969, 975, 1380, 1381, 1382, 1383, 1384, 1386, 1399, 1402], "lazili": [99, 152, 153, 158, 162, 164, 167, 168, 169, 170, 171, 172, 361, 873, 969], "lazy_fram": [64, 65, 132], "lazyfram": [0, 1, 10, 58, 59, 60, 61, 62, 64, 65, 66, 97, 132, 143, 147, 152, 158, 162, 164, 167, 168, 169, 170, 171, 172, 173, 176, 177, 183, 197, 219, 224, 262, 265, 279, 280, 296, 303, 356, 361, 449, 513, 588, 611, 828, 829, 840, 850, 862, 966, 967, 968, 974, 975, 1380, 1381, 1384, 1386, 1399, 1400, 1402], "lazyframeext": [913, 969], "lazygroupbi": [890, 891, 917, 969], "lbl": [313, 318, 356], "ldf": [1, 945, 946, 948, 950, 953, 954, 955, 956, 957, 958, 959], "ldot": [504, 850, 1128, 1371], "le": [701, 850, 1371], "lead": [15, 47, 97, 140, 147, 152, 173, 269, 297, 299, 306, 356, 401, 520, 523, 581, 588, 596, 597, 682, 683, 728, 730, 780, 816, 834, 850, 901, 922, 923, 952, 969, 1013, 1206, 1221, 1272, 1274, 1319, 1321, 1371], "leap": [467, 477, 1084, 1098], "leap_year": 467, "learn": [318, 356], "least": [66, 113, 280, 356, 423, 424, 639, 704, 706, 776, 780, 782, 850, 1035, 1036, 1237, 1295, 1297, 1371, 1392], "leav": [6, 271, 323, 356, 588, 906, 934, 969], "left": [16, 17, 41, 58, 176, 177, 178, 179, 245, 259, 260, 288, 325, 356, 447, 503, 504, 505, 506, 532, 534, 645, 658, 662, 664, 666, 668, 670, 673, 675, 677, 681, 754, 776, 784, 785, 789, 790, 792, 793, 798, 808, 809, 824, 837, 838, 840, 850, 891, 895, 896, 917, 935, 969, 1065, 1127, 1128, 1129, 1130, 1156, 1242, 1270, 1353, 1371, 1383, 1387, 1392], "left_clos": [447, 645, 850, 1065, 1242, 1371], "left_on": [259, 260, 325, 356, 895, 896, 935, 969], "left_right": [259, 325, 356, 895, 935, 969], "leftmost": [681, 850, 1270, 1371, 1394], "len": [13, 183, 187, 219, 258, 280, 333, 337, 342, 356, 440, 597, 608, 610, 648, 656, 781, 804, 808, 850, 874, 937, 942, 947, 952, 969, 974, 1058, 1253, 1371], "len_byt": [13, 432, 715, 716, 1045, 1306], "len_char": [431, 714, 1044, 1305], "length": [66, 67, 85, 149, 157, 163, 167, 181, 185, 243, 245, 288, 301, 356, 359, 431, 446, 482, 582, 588, 609, 648, 652, 653, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 690, 710, 714, 715, 717, 718, 721, 723, 734, 743, 777, 808, 809, 822, 825, 826, 827, 841, 850, 865, 891, 911, 917, 925, 969, 1044, 1051, 1064, 1075, 1103, 1207, 1213, 1234, 1249, 1250, 1253, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1282, 1301, 1305, 1306, 1308, 1309, 1312, 1314, 1325, 1334, 1371, 1388, 1389, 1392], "leq": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "less": [55, 167, 260, 356, 517, 548, 595, 596, 726, 840, 850, 896, 969, 1317, 1402], "letter": [232, 339, 350, 356, 507, 697, 705, 707, 709, 721, 741, 796, 850, 884, 949, 960, 969, 975, 1288, 1296, 1298, 1300, 1312, 1332, 1394], "level": [11, 41, 43, 44, 47, 50, 52, 148, 165, 167, 170, 171, 172, 238, 264, 276, 303, 308, 356, 360, 513, 850, 862, 927, 969, 1345, 1371, 1399], "lexic": [70, 975, 1048], "lf": [10, 49, 50, 51, 52, 61, 97, 143, 361, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 921, 923, 924, 925, 926, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 942, 947, 951, 969, 1388, 1399, 1402], "lf1": [829, 927, 969, 1384, 1386, 1400], "lf2": [829, 927, 969, 1384, 1386, 1400], "lf3": [969, 1384], "lf4": [969, 1384], "lf5": 969, "lf6": 969, "lf_other": [940, 969], "lib": [850, 1345, 1371], "librari": [1, 115, 149, 154, 157, 596, 850, 973, 1402], "life": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "lifetim": [207, 861, 1386], "light": [41, 356], "like": [36, 38, 40, 43, 44, 45, 46, 47, 65, 134, 149, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 213, 224, 245, 252, 254, 259, 291, 296, 313, 314, 356, 359, 449, 455, 519, 560, 596, 614, 648, 704, 729, 730, 761, 846, 850, 868, 873, 878, 891, 969, 1072, 1185, 1244, 1295, 1360, 1371, 1376], "limit": [11, 12, 52, 53, 154, 155, 189, 235, 356, 409, 512, 518, 850, 886, 969, 1021, 1136, 1141, 1371, 1389, 1398], "line": [11, 21, 41, 152, 153, 157, 167, 243, 252, 254, 356, 359, 704, 1295, 1371, 1376], "line_termin": [38, 49, 356, 969], "linear": [223, 251, 282, 348, 356, 532, 533, 555, 600, 646, 669, 670, 778, 779, 823, 850, 877, 894, 912, 958, 969, 1066, 1154, 1155, 1180, 1243, 1261, 1371], "linearli": 809, "lineitem": [142, 153, 155], "link": 973, "list": [1, 14, 34, 40, 41, 58, 59, 61, 64, 65, 67, 73, 89, 107, 132, 133, 135, 136, 137, 139, 140, 142, 143, 146, 147, 150, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 181, 182, 183, 187, 194, 195, 196, 202, 213, 220, 225, 229, 231, 232, 236, 242, 244, 245, 249, 257, 275, 278, 284, 288, 289, 290, 291, 294, 302, 309, 310, 318, 320, 321, 322, 324, 330, 335, 336, 356, 367, 394, 405, 406, 407, 447, 454, 466, 509, 515, 520, 529, 538, 596, 597, 609, 610, 638, 645, 651, 654, 660, 661, 663, 665, 667, 669, 672, 674, 676, 691, 692, 703, 705, 707, 709, 724, 744, 746, 747, 754, 773, 775, 778, 789, 790, 792, 793, 795, 803, 805, 809, 810, 812, 830, 832, 838, 846, 850, 875, 882, 884, 887, 890, 891, 914, 919, 926, 932, 933, 938, 940, 945, 946, 969, 974, 975, 1006, 1017, 1018, 1019, 1051, 1065, 1071, 1083, 1126, 1132, 1142, 1145, 1151, 1152, 1161, 1221, 1242, 1248, 1251, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1288, 1294, 1296, 1298, 1300, 1312, 1315, 1350, 1353, 1371, 1380, 1385, 1389, 1391, 1394, 1401, 1402], "list_catalog": 205, "list_namespac": 205, "list_of_seri": 812, "list_tabl": 205, "listitem": 143, "listtostructwidthstrategi": [588, 1213], "lit": [1, 368, 410, 534, 605, 621, 708, 777, 778, 784, 798, 822, 825, 840, 841, 850, 1136, 1371], "liter": [10, 16, 17, 21, 38, 40, 42, 43, 47, 49, 50, 51, 52, 56, 154, 156, 162, 164, 167, 168, 169, 170, 171, 172, 186, 187, 188, 197, 200, 204, 265, 275, 294, 295, 299, 325, 330, 331, 356, 368, 410, 429, 433, 436, 458, 480, 501, 502, 510, 517, 522, 524, 534, 548, 595, 605, 617, 619, 632, 633, 643, 652, 653, 696, 697, 698, 707, 708, 709, 719, 720, 721, 748, 749, 757, 766, 768, 770, 776, 777, 778, 779, 787, 788, 791, 804, 808, 810, 814, 816, 819, 828, 832, 834, 836, 840, 850, 886, 902, 919, 920, 923, 935, 938, 939, 969, 975, 1022, 1053, 1075, 1101, 1124, 1134, 1156, 1233, 1249, 1250, 1269, 1271, 1274, 1287, 1288, 1289, 1298, 1299, 1300, 1310, 1311, 1312, 1371, 1394], "littl": [290, 356, 414, 1026], "lmn": 975, "ln": [503, 504, 505, 506, 850, 1127, 1128, 1129, 1130, 1371, 1392], "ln_a": 1393, "load": [3, 5, 6, 136, 138, 149, 154, 156, 157, 163, 168, 169, 186, 188, 356, 850, 862, 969, 1402], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 157, "load_tabl": 157, "load_workbook": 157, "loader": [318, 356], "lobster": [708, 1299], "loc": [356, 360], "local": [4, 40, 154, 156, 168, 169, 172, 356, 495, 640, 641, 850, 1043, 1047, 1077, 1078, 1103, 1106, 1116, 1238, 1239, 1371, 1381], "localhost": 154, "localis": [482, 495, 1116], "locat": [41, 164, 167, 170, 172, 213, 233, 286, 316, 322, 356, 681, 850, 933, 969, 1133, 1142, 1269, 1270, 1371], "lock": 189, "log": [30, 60, 427, 500, 593, 619, 643, 756, 850, 1039, 1122, 1356, 1371, 1392], "log10": [850, 1371, 1392], "log10_a": 1393, "log16_a": 1393, "log1p": [850, 1371, 1392], "log1p_a": 1393, "log2": 1392, "logarithm": [591, 592, 593, 850, 1216, 1217, 1218, 1371, 1393], "logic": [66, 264, 342, 356, 359, 360, 369, 371, 449, 597, 754, 765, 766, 767, 768, 812, 840, 850, 878, 883, 895, 913, 921, 952, 969, 982, 983, 1221, 1351, 1353, 1371, 1376], "london": [459, 463, 481, 1076, 1080, 1102], "london_timezon": [481, 1102], "london_to_amsterdam": [481, 1102], "long": [232, 271, 280, 323, 324, 356, 414, 884, 906, 934, 969, 1026], "longer": [152, 153, 167], "longest": 588, "look": [11, 245, 356, 410, 588, 891, 969, 1022], "lookup": 846, "loop": [154, 597, 850], "lose": [456, 1073], "lossi": [152, 153, 167], "lossless": 56, "lot": 55, "love": [697, 721, 1288, 1312], "low": [18, 154, 436, 645, 850, 1242, 1371], "low_memori": [152, 153, 162, 164, 167, 171, 172], "lower": [56, 167, 223, 245, 282, 348, 356, 436, 534, 594, 622, 646, 650, 669, 670, 770, 789, 790, 792, 793, 808, 809, 823, 837, 838, 850, 877, 891, 912, 958, 969, 1053, 1066, 1156, 1219, 1243, 1246, 1261, 1359, 1371, 1389, 1392], "lower_bound": [245, 356, 436, 534, 850, 891, 969, 1053, 1156, 1359, 1371], "lowercas": [628, 739, 741, 1330, 1332, 1394], "lowest": [594, 850], "lru_cach": [264, 356, 597, 850, 1221, 1371], "lst": 182, "lt": [175, 513, 763, 850, 1371], "ltrim": 1392, "lyric": [697, 721, 1288, 1312], "lz4": [43, 44, 47, 50, 52, 356, 969], "lzo": [47, 52, 356, 969], "m": [73, 75, 259, 356, 455, 456, 458, 463, 464, 484, 486, 487, 498, 704, 733, 735, 736, 740, 791, 792, 793, 794, 800, 808, 895, 969, 975, 1072, 1073, 1075, 1080, 1081, 1105, 1107, 1108, 1119, 1295, 1324, 1326, 1327, 1331, 1384, 1394, 1395], "m_2": [689, 850, 1281, 1371], "m_3": [689, 850, 1281, 1371], "m_i": [689, 850, 1281, 1371], "machin": 1402, "maco": 175, "made": [41, 154, 356, 361, 487, 1108], "mai": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 66, 74, 80, 99, 132, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 207, 223, 224, 231, 233, 245, 259, 260, 261, 264, 265, 288, 296, 303, 313, 315, 318, 325, 326, 356, 359, 360, 361, 431, 446, 447, 449, 454, 455, 456, 466, 468, 477, 482, 484, 495, 507, 528, 563, 588, 596, 597, 608, 611, 645, 658, 659, 660, 662, 664, 666, 668, 670, 671, 673, 675, 677, 707, 709, 712, 714, 720, 775, 777, 784, 785, 789, 790, 792, 793, 798, 808, 809, 824, 837, 838, 850, 865, 872, 873, 877, 878, 883, 891, 895, 896, 897, 901, 902, 911, 917, 921, 927, 935, 941, 942, 943, 952, 969, 1044, 1047, 1048, 1064, 1065, 1066, 1071, 1072, 1073, 1083, 1085, 1098, 1103, 1105, 1116, 1126, 1133, 1151, 1188, 1221, 1242, 1255, 1256, 1259, 1261, 1262, 1298, 1300, 1303, 1305, 1349, 1352, 1354, 1371, 1376, 1402], "main": [175, 873, 969], "maintain": [49, 50, 51, 52, 302, 356, 407, 589, 681, 692, 758, 773, 850, 877, 926, 969, 1019, 1214, 1270, 1357, 1371], "maintain_ord": [49, 50, 51, 52, 244, 259, 278, 280, 302, 321, 325, 326, 336, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 367, 407, 417, 422, 425, 427, 520, 523, 589, 597, 692, 756, 758, 773, 850, 873, 883, 890, 895, 911, 924, 926, 932, 935, 946, 948, 950, 953, 954, 955, 956, 957, 958, 959, 969, 1019, 1214, 1357, 1371], "maintainorderjoin": [259, 325, 356, 895, 935, 969], "major": [157, 313, 356], "make": [41, 66, 89, 133, 134, 138, 149, 152, 153, 156, 157, 158, 160, 164, 168, 272, 276, 283, 314, 326, 356, 359, 505, 506, 628, 629, 638, 651, 725, 850, 907, 969, 1129, 1130, 1248, 1316, 1351, 1371], "malform": 152, "man": [722, 1313], "manag": [57, 98, 100, 204, 861, 862, 1386, 1399], "managed_shallow_clon": 204, "mandatori": [41, 356], "mango": [429, 433, 701, 727, 1041, 1046, 1292, 1318], "mani": [154, 155, 172, 233, 259, 356, 707, 709, 721, 895, 969, 1133, 1298, 1312, 1371, 1375], "manner": 154, "map": [52, 53, 55, 89, 135, 136, 143, 152, 153, 154, 155, 158, 159, 164, 166, 167, 170, 183, 216, 219, 237, 257, 264, 265, 285, 289, 290, 291, 293, 309, 356, 368, 482, 495, 596, 597, 621, 623, 624, 626, 628, 629, 652, 653, 721, 761, 811, 850, 869, 902, 915, 918, 969, 974, 975, 1066, 1103, 1116, 1221, 1249, 1250, 1312, 1360, 1371, 1381, 1383, 1384, 1399], "map_": 119, "map_batch": [361, 850, 969], "map_el": [110, 264, 356, 596, 764, 850, 1371], "map_field": [625, 627], "map_row": 356, "mapelementsstrategi": [597, 850], "mapping_strategi": [638, 850], "march": [484, 1105], "mariadb": 155, "mark": [41, 148, 356, 428, 850, 1040, 1371], "mark_area": [1371, 1376], "mark_attr": [356, 359, 1371, 1376], "mark_bar": [356, 359, 1371, 1376], "mark_lin": [356, 359], "mark_point": [356, 359], "markdown": [7, 21, 207], "marker": [41, 356], "mask": [172, 183, 187, 252, 254, 356, 411, 535, 537, 540, 545, 640, 641, 696, 699, 708, 850, 1023, 1137, 1156, 1157, 1160, 1163, 1169, 1238, 1239, 1271, 1287, 1290, 1299, 1362, 1371], "mass": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "massag": [271, 323, 356, 906, 934, 969], "match": [40, 41, 56, 66, 73, 97, 121, 133, 135, 136, 137, 139, 147, 152, 154, 161, 162, 164, 167, 171, 172, 176, 177, 178, 179, 213, 216, 235, 236, 259, 260, 265, 284, 289, 325, 356, 429, 433, 604, 605, 606, 652, 653, 671, 696, 697, 698, 701, 704, 705, 707, 708, 709, 712, 713, 719, 720, 721, 727, 733, 735, 736, 840, 846, 850, 869, 886, 895, 896, 902, 914, 935, 969, 975, 1041, 1046, 1125, 1249, 1250, 1262, 1287, 1288, 1289, 1292, 1295, 1296, 1298, 1299, 1300, 1303, 1304, 1310, 1311, 1312, 1318, 1324, 1326, 1327, 1371, 1394], "match_to_schema": [356, 969], "matches_overlap": [707, 709, 1300], "matches_supertyp": [235, 356, 886, 969], "materi": [147, 152, 158, 162, 164, 264, 291, 342, 356, 361, 872, 911, 952, 962, 969, 975, 1221, 1371], "materialis": [257, 258, 289, 290, 356], "materialized_view": 204, "math": [1, 11, 62, 280, 356, 448, 850, 1055, 1057, 1279, 1343, 1371, 1392, 1396, 1398], "mathemat": [757, 795, 850, 1392], "mathshortcut": [1, 62], "matplotlib": [175, 612, 911, 924, 969], "matter": [245, 257, 288, 290, 291, 310, 356, 658, 729, 730, 850, 891, 917, 969], "max": [10, 26, 41, 47, 52, 148, 223, 235, 244, 267, 280, 288, 356, 360, 442, 512, 588, 596, 638, 648, 652, 653, 658, 661, 662, 682, 726, 777, 789, 792, 814, 830, 850, 877, 886, 890, 917, 969, 1060, 1066, 1136, 1213, 1244, 1257, 1272, 1317, 1371, 1380, 1389, 1392], "max_a": [288, 356, 658, 850, 917, 969], "max_binary_s": 154, "max_col": [181, 183], "max_colname_length": [243, 356], "max_color": [41, 356], "max_data_s": 187, "max_elem": 1389, "max_horizont": [356, 813], "max_items_per_column": [243, 356], "max_level": 148, "max_siz": [54, 182, 183, 185, 187, 1402], "max_text_s": 154, "max_valu": 1402, "max_width": [588, 1213], "maxim": [343, 380, 850, 953, 992, 1371], "maximum": [11, 27, 38, 47, 49, 52, 54, 74, 136, 139, 152, 153, 154, 157, 161, 162, 163, 167, 171, 173, 181, 182, 183, 185, 187, 243, 245, 266, 267, 356, 387, 432, 553, 598, 630, 640, 648, 710, 712, 715, 723, 734, 813, 814, 850, 891, 903, 969, 999, 1045, 1086, 1178, 1222, 1230, 1238, 1244, 1301, 1303, 1306, 1314, 1325, 1371, 1388], "mb": [231, 356, 415, 1126, 1371], "md": 143, "md2": 143, "me": [697, 721, 741, 1288, 1312, 1332], "mean": [47, 52, 64, 132, 152, 153, 158, 164, 167, 170, 207, 223, 235, 244, 245, 260, 269, 280, 288, 326, 335, 356, 477, 482, 495, 509, 512, 517, 658, 662, 663, 664, 666, 668, 670, 673, 675, 677, 689, 695, 704, 711, 789, 790, 792, 793, 794, 816, 837, 838, 840, 850, 877, 886, 890, 891, 896, 901, 917, 945, 969, 1066, 1098, 1103, 1116, 1132, 1136, 1258, 1281, 1286, 1295, 1302, 1371, 1388, 1389], "mean_horizont": [356, 815], "measur": [271, 323, 356, 360, 906, 934, 969], "measure_a": [356, 360], "measure_b": [356, 360], "median": [223, 280, 356, 512, 665, 666, 850, 877, 940, 969, 1066, 1259, 1371, 1392], "mediat": 1399, "medium": [41, 356], "megan": [272, 356, 907, 969], "melt": [323, 356, 934, 969], "member": [245, 356, 891, 969, 1161, 1371], "membership": [389, 556, 1001, 1181], "memori": [10, 15, 47, 52, 53, 54, 55, 64, 65, 66, 133, 134, 137, 138, 139, 152, 153, 154, 156, 157, 158, 162, 164, 167, 168, 170, 171, 172, 211, 233, 264, 290, 291, 300, 314, 342, 356, 638, 649, 684, 850, 872, 873, 883, 911, 924, 944, 969, 1133, 1221, 1245, 1275, 1276, 1351, 1371], "memory_map": [158, 164, 170], "memory_resourc": 944, "merg": [40, 259, 260, 272, 356, 895, 896, 907, 969], "merge_sort": [356, 969], "messi": [704, 706, 1295, 1297], "met": 840, "meta": [101, 449, 702, 850, 1293], "metadata": [0, 47, 49, 50, 51, 52, 143, 165, 169, 193, 197, 356, 862, 969], "metastor": 198, "method": [4, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 131, 134, 143, 144, 145, 146, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 173, 180, 183, 187, 192, 198, 199, 201, 202, 207, 209, 214, 219, 223, 224, 227, 228, 233, 240, 244, 251, 257, 264, 271, 276, 282, 289, 290, 291, 299, 321, 330, 332, 337, 342, 348, 356, 361, 366, 369, 370, 401, 436, 449, 461, 484, 487, 501, 502, 510, 517, 519, 522, 524, 532, 548, 581, 595, 597, 615, 617, 619, 621, 622, 624, 626, 628, 629, 632, 633, 634, 637, 643, 646, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 683, 697, 703, 707, 709, 721, 729, 730, 731, 732, 737, 743, 749, 757, 759, 763, 764, 780, 812, 823, 842, 843, 845, 846, 850, 851, 852, 855, 856, 857, 858, 859, 862, 865, 873, 877, 878, 880, 881, 894, 906, 912, 923, 932, 938, 941, 943, 944, 947, 952, 958, 969, 974, 977, 984, 1013, 1053, 1066, 1087, 1088, 1105, 1108, 1123, 1124, 1133, 1134, 1144, 1146, 1148, 1154, 1173, 1206, 1220, 1221, 1232, 1233, 1243, 1244, 1261, 1274, 1288, 1294, 1298, 1300, 1312, 1328, 1334, 1353, 1363, 1365, 1367, 1371, 1372, 1375, 1377, 1378, 1379, 1381, 1385], "metric": [53, 54, 55, 154], "micro": [483, 1104], "microsecond": [73, 75, 245, 257, 260, 288, 290, 291, 310, 326, 356, 477, 480, 482, 487, 490, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 791, 792, 793, 794, 836, 837, 838, 850, 891, 896, 911, 917, 969, 975, 1098, 1101, 1103, 1111, 1116, 1128, 1371, 1395], "microsoft": [34, 41, 356], "mid_color": [41, 356], "midnight": 90, "midpoint": [223, 282, 348, 356, 646, 669, 670, 823, 850, 877, 912, 958, 969, 1066, 1243, 1261, 1371], "might": [53, 54, 55, 152, 153, 167, 189, 259, 280, 314, 323, 356, 597, 759, 850, 895, 926, 934, 969], "millennia": 1395, "millennium": 1395, "milli": [483, 1104], "millisecond": [245, 260, 288, 326, 356, 465, 472, 477, 482, 491, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 792, 793, 794, 808, 837, 838, 850, 891, 896, 917, 969, 975, 1098, 1103, 1112, 1116, 1128, 1371, 1395], "milliseconds_diff": [490, 491, 493], "mimic": 778, "min": [41, 47, 52, 149, 223, 235, 274, 280, 288, 356, 443, 512, 597, 638, 648, 658, 667, 668, 789, 792, 819, 828, 850, 877, 886, 917, 969, 1061, 1066, 1136, 1244, 1260, 1371, 1389, 1392, 1395, 1402], "min_a": [288, 356, 658, 850, 917, 969], "min_col": [181, 183], "min_color": [41, 356], "min_elem": 1389, "min_horizont": [356, 818, 828], "min_period": [446, 503, 505, 506, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 826, 827, 850, 1064, 1127, 1129, 1130, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1371], "min_sampl": [446, 503, 505, 506, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 826, 827, 850, 1064, 1127, 1129, 1130, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1371], "min_siz": [182, 183, 185, 187, 1402], "min_valu": 1402, "mincol": 181, "minim": [346, 381, 388, 554, 684, 692, 850, 956, 993, 1000, 1179, 1225, 1275, 1371], "minimum": [47, 52, 181, 182, 183, 185, 187, 238, 273, 274, 356, 503, 505, 506, 616, 631, 641, 648, 818, 819, 850, 908, 969, 1092, 1127, 1129, 1130, 1231, 1239, 1244, 1371, 1388, 1402], "minu": [477, 634, 850, 1098], "minut": [245, 260, 288, 326, 356, 465, 469, 471, 476, 477, 480, 482, 483, 492, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 791, 792, 793, 794, 836, 837, 838, 850, 891, 896, 917, 969, 975, 1098, 1101, 1103, 1113, 1116, 1128, 1371, 1395], "minutes_diff": 492, "misc": 1386, "miscellan": 862, "mismatch": [66, 124, 162, 171, 176, 178], "miss": [56, 66, 152, 153, 164, 167, 172, 240, 265, 356, 409, 503, 505, 506, 518, 541, 542, 588, 850, 902, 969, 1021, 1127, 1129, 1130, 1141, 1371], "missing_column": [164, 172, 265, 356, 902, 969], "missing_struct_field": [56, 265, 356, 902, 969], "missing_utf8_is_empty_str": [152, 153, 167], "mix": [12, 260, 314, 356, 777, 829, 896, 927, 969, 975, 1066, 1371], "mixin": 1, "mkdir": [49, 50, 51, 52, 53, 55, 969], "mlnm": 470, "mm": [41, 356], "mn": 1394, "mno": [17, 21], "mnop": 1394, "mo": 794, "mocha": 975, "mod": [850, 1392], "mode": [39, 40, 41, 42, 49, 50, 51, 52, 176, 178, 280, 303, 356, 678, 705, 822, 825, 841, 850, 872, 883, 911, 924, 969, 1266, 1296, 1371, 1380, 1381, 1399], "model": [318, 356], "modifi": [53, 54, 55, 152, 153, 167, 189, 207, 213, 233, 249, 256, 257, 328, 356, 383, 481, 498, 696, 704, 705, 708, 719, 720, 739, 741, 742, 850, 984, 1102, 1119, 1133, 1287, 1295, 1296, 1299, 1310, 1311, 1330, 1332, 1333, 1371], "modul": [103, 111, 157, 849, 973, 975, 1402], "modulu": [617, 850], "moment": [47, 49, 50, 51, 52, 64, 65, 221, 356, 546, 689, 850, 872, 873, 883, 911, 924, 969, 1171, 1281, 1371], "mon": [356, 359, 1395], "mondai": [245, 356, 454, 466, 495, 497, 775, 891, 969, 1071, 1083, 1116, 1118], "monkei": [717, 718, 1308, 1309], "month": [245, 260, 288, 326, 356, 462, 474, 475, 477, 480, 482, 484, 487, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 788, 789, 790, 791, 792, 793, 794, 837, 838, 850, 891, 896, 917, 969, 1079, 1095, 1096, 1098, 1101, 1103, 1105, 1108, 1116, 1128, 1371, 1395], "month_nam": [484, 487], "monthbegin": [475, 1096], "monthend": [474, 1095], "moos": 975, "more": [21, 41, 47, 52, 58, 66, 98, 100, 129, 133, 134, 135, 136, 137, 138, 139, 147, 149, 154, 155, 156, 157, 161, 162, 163, 164, 168, 169, 171, 176, 178, 183, 207, 209, 221, 223, 227, 228, 236, 256, 257, 264, 271, 276, 284, 289, 290, 292, 303, 313, 314, 318, 321, 323, 342, 356, 360, 370, 407, 431, 513, 517, 525, 546, 576, 589, 593, 596, 597, 637, 638, 680, 689, 705, 714, 733, 735, 736, 758, 769, 781, 797, 803, 806, 815, 817, 820, 821, 830, 840, 846, 850, 877, 880, 881, 887, 906, 913, 914, 927, 932, 934, 944, 969, 973, 975, 977, 1019, 1044, 1047, 1066, 1147, 1148, 1171, 1201, 1214, 1221, 1268, 1281, 1296, 1305, 1324, 1326, 1327, 1349, 1351, 1357, 1371, 1386, 1387, 1397, 1400, 1401, 1402], "more_bi": [278, 302, 356, 692, 850, 926, 969], "more_column": [232, 322, 356, 507, 796, 850, 884, 933, 969, 975], "more_expr": [638, 773, 776, 777, 778, 779, 850], "more_nam": [744, 846], "most": [41, 133, 152, 153, 155, 167, 176, 177, 178, 179, 314, 356, 420, 421, 609, 618, 639, 653, 726, 850, 1032, 1033, 1226, 1237, 1250, 1317, 1351, 1371, 1383, 1399], "mostli": [308, 356, 513, 850], "move": [280, 291, 356, 454, 503, 504, 505, 506, 661, 663, 667, 674, 840, 850, 1071, 1127, 1128, 1129, 1130, 1257, 1258, 1260, 1264, 1371], "mr": 944, "mssql": [39, 356], "much": [264, 324, 342, 356, 431, 432, 563, 597, 714, 715, 812, 850, 952, 1044, 1045, 1064, 1188, 1221, 1305, 1306, 1371], "mul": 850, "multi": [8, 41, 152, 153, 318, 356, 507, 704, 850, 1295], "multi_fram": [41, 356], "multicolselector": 212, "multiindexselector": [212, 979], "multipl": [41, 55, 64, 65, 66, 116, 132, 152, 153, 157, 158, 162, 163, 164, 167, 170, 171, 172, 181, 183, 187, 213, 225, 231, 233, 236, 244, 245, 249, 258, 261, 278, 280, 284, 291, 294, 302, 325, 330, 335, 356, 427, 563, 596, 602, 609, 618, 619, 638, 652, 654, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 692, 744, 756, 773, 781, 798, 811, 813, 818, 824, 830, 833, 840, 846, 850, 862, 872, 873, 879, 883, 887, 890, 891, 897, 911, 914, 919, 924, 926, 935, 938, 945, 952, 969, 984, 1014, 1126, 1133, 1188, 1208, 1226, 1249, 1251, 1283, 1371, 1384, 1389], "multipli": [596, 660, 661, 663, 665, 667, 669, 672, 674, 676, 748, 850, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1371], "multithread": [302, 356, 692, 773, 850, 926, 969, 1014, 1208, 1283, 1371], "must": [34, 41, 76, 97, 135, 147, 149, 152, 156, 164, 167, 168, 169, 172, 173, 213, 223, 232, 245, 260, 261, 272, 280, 288, 289, 356, 447, 588, 597, 612, 645, 652, 653, 658, 721, 777, 789, 790, 798, 809, 840, 850, 877, 884, 891, 896, 897, 901, 907, 917, 924, 944, 969, 1065, 1066, 1242, 1249, 1250, 1312, 1371], "mutual": [289, 356], "my": [169, 173, 356, 359, 1371, 1376], "my_bucket": [913, 969], "my_column": 952, "my_column_": [320, 356], "my_column_0": [320, 356], "my_column_1": [320, 356], "my_column_2": [320, 356], "my_custom_aggreg": 812, "my_fil": 158, "my_holidai": [454, 466, 775, 1071, 1083], "my_larger_than_ram_fil": [49, 50, 51, 52, 969], "my_long_fil": 167, "my_struct": 832, "mydf": 167, "myrol": 155, "mysql": 155, "n": [1, 13, 14, 18, 26, 27, 38, 46, 49, 59, 60, 61, 62, 73, 75, 142, 147, 152, 153, 157, 162, 167, 183, 217, 233, 239, 245, 247, 257, 258, 263, 264, 290, 291, 292, 299, 304, 307, 310, 312, 327, 339, 341, 350, 356, 373, 401, 406, 415, 417, 422, 425, 426, 427, 431, 432, 446, 450, 454, 456, 458, 464, 486, 498, 504, 510, 513, 521, 527, 550, 558, 564, 566, 576, 577, 581, 584, 586, 588, 590, 639, 642, 651, 672, 673, 676, 677, 680, 683, 689, 694, 710, 714, 715, 719, 720, 725, 726, 728, 729, 734, 736, 751, 755, 756, 757, 762, 764, 782, 791, 792, 793, 794, 800, 802, 822, 825, 826, 827, 828, 831, 835, 839, 841, 850, 870, 889, 891, 892, 900, 923, 928, 930, 936, 949, 951, 960, 969, 975, 1013, 1018, 1027, 1038, 1039, 1044, 1045, 1052, 1064, 1067, 1071, 1073, 1075, 1081, 1107, 1119, 1128, 1133, 1134, 1143, 1150, 1175, 1183, 1189, 1191, 1201, 1202, 1206, 1211, 1213, 1237, 1263, 1265, 1268, 1274, 1281, 1285, 1301, 1305, 1306, 1310, 1311, 1316, 1317, 1325, 1327, 1342, 1348, 1355, 1356, 1360, 1361, 1371, 1383, 1384, 1391, 1394, 1395, 1397, 1399, 1402], "n0": [406, 588], "n00": [1018, 1213], "n01": [1018, 1213], "n02": [1018, 1213], "n1": [406, 588], "n2": [1, 406], "n3": 1, "n_1": [513, 850], "n_2": [513, 850], "n_3": [513, 850], "n_bar": 1388, "n_bit": 1394, "n_byte": [415, 431, 432, 714, 715, 1394], "n_char": [431, 432, 714, 715, 1394], "n_chunk": [356, 984, 1133, 1245, 1371], "n_column": 213, "n_elem": 1389, "n_even": 975, "n_field_strategi": [588, 1213], "n_film": 1380, "n_foo_uniqu": 1388, "n_kilobyt": 415, "n_row": [147, 150, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 213, 258, 356, 969], "n_thread": [152, 153], "n_uniqu": [356, 373, 850, 1371], "na": [315, 356, 727, 1352, 1371], "naiv": [458, 459, 736, 1075, 1076, 1327], "name": [1, 19, 23, 25, 33, 36, 38, 39, 41, 42, 49, 59, 60, 61, 62, 77, 89, 108, 133, 135, 136, 137, 138, 139, 143, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 178, 179, 180, 181, 183, 186, 187, 188, 193, 195, 196, 197, 198, 199, 201, 202, 213, 215, 216, 219, 220, 225, 226, 227, 228, 232, 236, 237, 240, 241, 243, 244, 255, 256, 257, 259, 260, 261, 264, 267, 269, 271, 272, 274, 278, 280, 284, 285, 289, 290, 291, 293, 294, 295, 302, 303, 306, 309, 311, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 335, 341, 356, 360, 368, 406, 410, 411, 413, 416, 427, 436, 447, 484, 487, 507, 513, 534, 541, 542, 543, 544, 588, 597, 602, 606, 608, 610, 614, 638, 645, 655, 678, 692, 705, 706, 719, 720, 721, 744, 746, 748, 756, 761, 765, 766, 767, 768, 769, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 796, 797, 802, 803, 806, 813, 814, 815, 816, 817, 818, 819, 820, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 839, 840, 846, 850, 867, 869, 874, 875, 879, 880, 881, 884, 887, 890, 895, 896, 897, 906, 907, 914, 915, 918, 919, 920, 926, 927, 931, 932, 933, 934, 935, 938, 939, 940, 941, 942, 945, 951, 969, 974, 975, 981, 1018, 1039, 1052, 1065, 1105, 1108, 1125, 1213, 1242, 1247, 1295, 1296, 1297, 1310, 1311, 1335, 1338, 1346, 1347, 1352, 1356, 1360, 1371, 1376, 1381, 1382, 1383, 1384, 1385, 1386, 1398, 1399, 1402], "name_gener": [320, 356], "named_agg": [335, 945], "named_bi": [244, 356, 890, 969], "named_expr": [294, 295, 330, 331, 356, 748, 828, 832, 919, 920, 938, 939, 969], "named_fram": [1384, 1399], "nameless": 138, "namespac": [1, 154, 193, 195, 196, 197, 201, 355, 356, 359, 744, 829, 849, 862, 967, 968, 973, 1371, 1376, 1402], "namespaceinfo": [195, 205], "nan": [138, 183, 211, 227, 228, 234, 235, 314, 315, 356, 452, 453, 501, 502, 511, 512, 522, 524, 532, 541, 542, 543, 544, 548, 595, 598, 616, 630, 631, 632, 633, 660, 686, 757, 780, 850, 880, 881, 885, 886, 969, 987, 991, 1069, 1070, 1135, 1136, 1164, 1165, 1230, 1231, 1256, 1278, 1351, 1352, 1371, 1402], "nan_as_nul": 211, "nan_max": [850, 1371], "nan_min": [850, 1371], "nan_to_nul": [138, 356, 969, 1371], "nana": 1394, "nanmax": [630, 631, 850, 1230, 1231, 1371], "nanosecond": [56, 90, 245, 260, 288, 326, 356, 477, 482, 483, 493, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 792, 793, 794, 837, 838, 850, 891, 896, 917, 969, 1098, 1103, 1104, 1114, 1116, 1128, 1371, 1395], "nansum": [660, 850, 1256, 1371], "nativ": [11, 39, 152, 154, 157, 158, 160, 164, 169, 203, 257, 264, 290, 291, 310, 314, 342, 356, 597, 812, 829, 850, 856, 927, 952, 969, 973, 1221, 1351, 1371, 1375, 1399, 1402], "natur": [593, 850, 1218, 1371, 1387, 1393], "ndarrai": [137, 209, 236, 284, 314, 356, 520, 681, 850, 887, 914, 969, 977, 1142, 1269, 1270, 1351, 1371], "ndjson": [51, 162, 969], "ne": [633, 850, 1233, 1371], "ne_miss": [236, 284, 356, 850, 887, 914, 969, 1124, 1371], "nearest": [60, 223, 260, 282, 348, 356, 435, 516, 532, 646, 669, 670, 678, 823, 850, 877, 896, 912, 958, 969, 1050, 1066, 1140, 1154, 1243, 1261, 1371, 1393], "nearest_pow2": 60, "necessari": [38, 39, 49, 57, 100, 157, 169, 314, 356, 969, 1351, 1371], "need": [53, 54, 55, 66, 102, 111, 140, 152, 153, 155, 164, 167, 170, 172, 207, 245, 288, 291, 300, 356, 359, 588, 658, 684, 719, 720, 721, 737, 794, 822, 825, 841, 850, 891, 917, 969, 1275, 1310, 1311, 1312, 1328, 1371, 1376, 1402], "neg": [14, 72, 73, 74, 75, 152, 153, 158, 160, 164, 174, 247, 263, 288, 299, 301, 307, 333, 356, 401, 581, 582, 642, 643, 658, 683, 690, 710, 723, 734, 850, 865, 917, 923, 925, 941, 942, 969, 975, 1013, 1150, 1175, 1206, 1207, 1240, 1274, 1282, 1301, 1314, 1325, 1342, 1371], "negat": [635, 850, 1235, 1371], "neither": [140, 157, 163, 292, 356, 406, 588, 1018, 1213], "nest": [57, 140, 148, 184, 185, 231, 356, 862, 1126, 1371, 1399, 1402], "nesting_level": 184, "net": [705, 1296], "netherland": [260, 356, 896, 969], "netsuite_format": 200, "never": [38, 49, 154, 259, 260, 289, 356, 895, 896, 969], "new": [39, 40, 41, 42, 54, 55, 167, 207, 212, 213, 239, 249, 250, 264, 276, 277, 280, 285, 320, 322, 324, 325, 330, 331, 356, 368, 458, 509, 519, 521, 532, 622, 623, 638, 652, 653, 657, 716, 719, 720, 725, 726, 744, 746, 846, 850, 862, 865, 889, 915, 933, 935, 938, 939, 952, 969, 979, 981, 1075, 1132, 1143, 1234, 1247, 1249, 1250, 1254, 1310, 1311, 1316, 1317, 1335, 1338, 1347, 1371, 1399, 1401], "new_column": [152, 153, 157, 167], "new_dai": 480, "new_dat": 477, "new_df": [325, 356, 935, 969], "new_fil": [36, 38, 43, 44, 47, 356], "new_from_index": 1371, "new_id": [320, 356], "new_lf": [935, 969], "new_tabl": 1401, "new_valu": [784, 785, 798, 824], "new_york": 792, "newli": 58, "newlin": [46, 152, 162, 167, 171, 356], "next": [19, 60, 245, 260, 288, 326, 356, 409, 454, 477, 482, 495, 648, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1021, 1071, 1098, 1103, 1116, 1244, 1371], "next_batch": 153, "next_pow2": 60, "nfc": [716, 1307, 1394], "nfd": [716, 1307, 1394], "nfkc": [716, 1307, 1394], "nfkd": [716, 1307, 1394], "nfruit": 734, "nl": [454, 466, 775, 1071, 1083], "nnel_id": 140, "no1": 975, "no_default": [240, 356, 652, 653, 721, 850, 1249, 1250, 1312, 1371], "no_optim": [64, 872, 901, 911, 969], "nodataerror": [152, 153, 157, 163, 167], "nodd": [704, 1295], "node": [868, 872, 893, 901, 906, 911, 915, 969], "nodefault": [240, 356, 652, 653, 721, 850, 1249, 1250, 1312, 1371], "non": [4, 5, 38, 40, 41, 49, 58, 73, 74, 138, 149, 174, 215, 222, 258, 271, 288, 294, 295, 299, 319, 320, 323, 325, 330, 331, 356, 369, 371, 409, 426, 427, 431, 436, 440, 441, 454, 481, 518, 534, 551, 552, 585, 588, 596, 597, 603, 638, 639, 644, 648, 652, 653, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 698, 705, 714, 719, 720, 721, 741, 743, 748, 750, 755, 756, 761, 765, 766, 767, 768, 776, 777, 778, 779, 781, 783, 787, 794, 814, 816, 819, 826, 827, 828, 832, 833, 834, 850, 867, 876, 906, 917, 919, 920, 923, 931, 934, 935, 938, 939, 969, 975, 982, 983, 997, 998, 1016, 1021, 1038, 1039, 1044, 1053, 1058, 1059, 1066, 1071, 1102, 1141, 1156, 1176, 1177, 1210, 1213, 1221, 1237, 1241, 1249, 1250, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1274, 1289, 1296, 1305, 1310, 1311, 1332, 1334, 1341, 1351, 1355, 1356, 1360, 1371, 1391, 1399], "non_exist": [481, 1102], "non_numer": [38, 49, 356, 969], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 67, 70, 73, 74, 75, 76, 77, 85, 89, 100, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 197, 198, 199, 201, 202, 203, 207, 209, 210, 213, 217, 222, 223, 227, 228, 234, 235, 236, 238, 240, 243, 245, 246, 251, 255, 259, 260, 262, 264, 268, 271, 276, 277, 280, 284, 288, 289, 292, 296, 299, 301, 302, 308, 309, 311, 313, 314, 315, 318, 320, 321, 322, 323, 324, 325, 326, 337, 341, 356, 369, 371, 372, 384, 385, 386, 393, 394, 406, 409, 429, 431, 432, 433, 436, 440, 441, 442, 445, 447, 452, 453, 461, 477, 480, 481, 487, 502, 503, 504, 505, 506, 507, 510, 511, 512, 518, 525, 526, 528, 530, 532, 533, 534, 541, 542, 543, 544, 549, 551, 552, 559, 565, 567, 569, 576, 577, 578, 579, 580, 582, 588, 596, 597, 608, 609, 611, 612, 613, 615, 620, 633, 634, 635, 636, 638, 639, 644, 645, 648, 649, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 686, 690, 691, 695, 696, 698, 700, 701, 702, 705, 708, 710, 711, 712, 713, 714, 715, 717, 718, 723, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 738, 740, 743, 744, 745, 746, 747, 750, 754, 761, 766, 767, 768, 770, 776, 777, 778, 779, 780, 781, 783, 787, 789, 790, 791, 792, 793, 794, 796, 797, 798, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 819, 825, 826, 827, 832, 833, 834, 836, 837, 838, 840, 850, 870, 871, 873, 876, 877, 880, 881, 883, 885, 886, 887, 891, 894, 895, 896, 899, 901, 906, 909, 913, 914, 917, 921, 923, 924, 925, 926, 932, 933, 934, 935, 940, 943, 944, 947, 951, 952, 961, 962, 969, 974, 975, 977, 978, 982, 983, 985, 992, 993, 997, 998, 1005, 1006, 1018, 1021, 1029, 1034, 1037, 1041, 1044, 1045, 1046, 1052, 1053, 1058, 1059, 1065, 1066, 1068, 1069, 1070, 1078, 1086, 1087, 1088, 1092, 1101, 1102, 1108, 1122, 1124, 1127, 1128, 1129, 1130, 1134, 1135, 1136, 1138, 1141, 1147, 1149, 1151, 1153, 1154, 1155, 1156, 1161, 1166, 1167, 1170, 1171, 1172, 1174, 1176, 1177, 1180, 1184, 1190, 1192, 1194, 1201, 1202, 1203, 1204, 1205, 1207, 1213, 1221, 1222, 1223, 1224, 1225, 1233, 1236, 1241, 1242, 1243, 1244, 1249, 1250, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1268, 1269, 1270, 1271, 1274, 1277, 1278, 1281, 1282, 1285, 1286, 1287, 1289, 1291, 1292, 1293, 1296, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1314, 1316, 1317, 1318, 1319, 1320, 1321, 1324, 1325, 1326, 1327, 1329, 1331, 1334, 1337, 1341, 1345, 1347, 1348, 1349, 1351, 1352, 1353, 1360, 1361, 1371, 1380, 1382, 1383, 1384, 1386, 1389, 1391, 1394, 1395, 1399], "nonexist": [481, 1102], "nor": [157, 163, 292, 356], "normal": [40, 148, 245, 356, 500, 546, 659, 689, 761, 850, 891, 969, 1122, 1171, 1255, 1281, 1360, 1371, 1392], "normalised_scor": 154, "norowsreturnederror": [289, 356], "north": 76, "not_": [330, 356, 840, 850, 938, 969, 975, 1371], "not_c": [330, 356, 938, 969], "notabl": 154, "notat": [12, 41, 356], "note": [4, 11, 21, 40, 41, 47, 53, 54, 55, 57, 58, 65, 66, 72, 73, 75, 90, 98, 100, 133, 134, 135, 137, 139, 140, 148, 152, 154, 155, 156, 157, 161, 162, 163, 167, 168, 169, 171, 173, 176, 178, 181, 183, 187, 189, 207, 211, 219, 221, 223, 224, 227, 228, 231, 234, 235, 236, 245, 246, 255, 256, 257, 259, 260, 264, 272, 276, 279, 280, 284, 285, 288, 289, 290, 291, 296, 299, 303, 310, 313, 315, 318, 320, 321, 323, 325, 326, 330, 332, 333, 356, 401, 414, 429, 431, 432, 433, 436, 444, 445, 449, 452, 453, 459, 474, 475, 477, 482, 487, 495, 504, 511, 512, 517, 519, 526, 534, 541, 542, 551, 552, 560, 563, 581, 585, 588, 597, 611, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 644, 652, 653, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 685, 689, 695, 696, 697, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 719, 720, 721, 723, 728, 729, 730, 733, 734, 741, 743, 744, 750, 757, 766, 768, 775, 784, 789, 790, 792, 793, 794, 798, 808, 810, 822, 824, 825, 829, 833, 837, 838, 840, 841, 846, 850, 861, 865, 873, 877, 878, 880, 881, 885, 886, 887, 891, 896, 907, 914, 915, 917, 921, 923, 924, 926, 927, 932, 934, 935, 938, 941, 942, 969, 973, 975, 997, 998, 1013, 1016, 1026, 1044, 1045, 1053, 1062, 1063, 1066, 1069, 1070, 1076, 1095, 1096, 1098, 1103, 1108, 1116, 1126, 1128, 1135, 1136, 1149, 1156, 1176, 1177, 1185, 1188, 1206, 1210, 1221, 1241, 1249, 1250, 1254, 1262, 1269, 1271, 1274, 1276, 1281, 1286, 1287, 1288, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1305, 1306, 1310, 1311, 1312, 1314, 1319, 1320, 1321, 1324, 1325, 1332, 1334, 1341, 1352, 1354, 1371, 1380, 1381, 1385, 1386, 1394, 1397, 1399], "noth": [21, 704, 713, 1295, 1304], "notic": [154, 236, 356, 887, 969, 1371], "notimplementederror": [10, 211], "now": [58, 152, 157, 288, 314, 356, 454, 605, 737, 775, 917, 969, 1071, 1328, 1351, 1371], "np": [97, 137, 209, 213, 236, 284, 314, 356, 520, 596, 681, 850, 887, 914, 969, 977, 1142, 1159, 1162, 1164, 1165, 1269, 1270, 1371], "npt": [209, 977], "nr": [339, 350, 949, 960], "nth": [239, 356, 521, 726, 846, 850, 889, 969, 1143, 1317, 1371], "nthe": [704, 1295], "nthose": [704, 1295], "nu": 701, "null": [17, 38, 40, 47, 49, 52, 58, 66, 73, 135, 136, 139, 148, 152, 153, 162, 164, 167, 171, 172, 173, 180, 183, 187, 211, 215, 216, 217, 222, 223, 227, 228, 230, 234, 235, 236, 238, 251, 259, 265, 268, 269, 270, 277, 280, 282, 284, 299, 302, 304, 305, 306, 309, 314, 315, 319, 322, 325, 327, 330, 337, 356, 369, 371, 372, 382, 385, 386, 389, 393, 394, 401, 402, 409, 411, 414, 426, 427, 428, 429, 431, 432, 433, 436, 440, 441, 442, 445, 450, 452, 453, 477, 480, 481, 488, 489, 490, 491, 492, 493, 494, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 518, 525, 530, 532, 533, 538, 541, 542, 543, 544, 549, 551, 552, 556, 558, 559, 562, 563, 565, 567, 568, 569, 577, 578, 579, 580, 581, 583, 585, 588, 596, 597, 620, 633, 634, 635, 636, 638, 639, 644, 648, 649, 653, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 684, 686, 691, 692, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 717, 718, 723, 725, 726, 727, 733, 734, 736, 738, 743, 744, 745, 746, 747, 750, 754, 755, 756, 765, 766, 767, 768, 773, 776, 777, 778, 779, 781, 783, 787, 791, 796, 807, 810, 814, 816, 819, 826, 827, 832, 833, 834, 840, 850, 867, 870, 876, 877, 880, 881, 885, 886, 887, 894, 895, 902, 909, 914, 923, 926, 931, 933, 935, 938, 940, 947, 969, 975, 982, 983, 994, 997, 998, 1001, 1005, 1006, 1013, 1014, 1016, 1021, 1023, 1026, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1052, 1053, 1058, 1059, 1067, 1069, 1070, 1101, 1102, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1124, 1125, 1127, 1128, 1129, 1130, 1134, 1135, 1136, 1137, 1141, 1147, 1148, 1153, 1154, 1155, 1161, 1166, 1167, 1168, 1174, 1176, 1177, 1180, 1181, 1183, 1184, 1187, 1188, 1190, 1192, 1193, 1194, 1203, 1205, 1206, 1208, 1210, 1213, 1221, 1233, 1236, 1237, 1241, 1250, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1274, 1278, 1283, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1314, 1316, 1317, 1318, 1324, 1325, 1327, 1329, 1334, 1337, 1341, 1348, 1351, 1352, 1353, 1355, 1356, 1371, 1383, 1387, 1389, 1391, 1394, 1395, 1397, 1399, 1400, 1402], "null_behavior": [450, 558, 850, 1067, 1183, 1371], "null_count": [47, 52, 223, 228, 356, 446, 850, 877, 969, 1064, 1066, 1371], "null_equ": [230, 356, 1125, 1371], "null_on_oob": [393, 563, 565, 1005, 1188, 1190], "null_prob": [180, 183, 187], "null_valu": [38, 49, 152, 153, 167, 356, 969], "nullabl": [40, 356], "nullbehavior": [450, 558, 850, 1067, 1183, 1371], "nullif": 1392, "nulls_equ": [259, 356, 389, 538, 556, 850, 895, 969, 1001, 1161, 1181, 1371], "nulls_last": [302, 356, 382, 402, 583, 638, 691, 692, 773, 850, 926, 969, 994, 1014, 1168, 1208, 1283, 1371], "num": [14, 41, 317, 356, 534, 850, 1156, 1371], "num_row": 211, "num_sampl": [808, 809], "number": [11, 12, 13, 14, 15, 18, 26, 38, 39, 41, 43, 47, 49, 50, 51, 52, 57, 58, 72, 73, 74, 90, 100, 121, 133, 135, 136, 137, 139, 142, 148, 152, 153, 154, 155, 157, 161, 162, 163, 164, 167, 170, 171, 172, 174, 181, 183, 186, 188, 189, 190, 197, 213, 215, 217, 222, 231, 232, 235, 243, 247, 248, 257, 258, 263, 275, 276, 288, 292, 299, 304, 307, 319, 324, 327, 329, 337, 339, 341, 350, 356, 383, 399, 401, 406, 409, 418, 419, 420, 421, 423, 424, 426, 427, 432, 440, 446, 447, 450, 454, 457, 465, 468, 470, 472, 473, 483, 496, 497, 499, 503, 504, 505, 506, 510, 512, 518, 527, 541, 542, 549, 550, 558, 566, 569, 574, 576, 581, 584, 586, 588, 590, 638, 642, 645, 648, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 685, 694, 710, 712, 714, 715, 719, 723, 725, 726, 734, 737, 751, 755, 756, 762, 775, 780, 781, 782, 794, 802, 807, 808, 809, 826, 827, 831, 835, 839, 850, 867, 870, 876, 884, 886, 892, 900, 911, 923, 928, 930, 931, 936, 937, 947, 949, 951, 960, 969, 974, 1011, 1013, 1018, 1021, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1045, 1052, 1058, 1064, 1065, 1067, 1071, 1074, 1082, 1085, 1090, 1093, 1094, 1104, 1117, 1118, 1120, 1126, 1127, 1128, 1129, 1130, 1134, 1136, 1141, 1150, 1174, 1175, 1183, 1191, 1194, 1199, 1201, 1206, 1211, 1213, 1227, 1228, 1242, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1274, 1277, 1285, 1301, 1303, 1305, 1306, 1310, 1314, 1316, 1317, 1325, 1328, 1342, 1355, 1356, 1361, 1371, 1387, 1390, 1393, 1402], "number_of_two": [390, 557], "numbers_decim": 737, "numer": [11, 17, 38, 41, 49, 156, 168, 216, 225, 260, 314, 315, 323, 324, 356, 366, 414, 428, 436, 517, 534, 593, 617, 619, 643, 651, 684, 686, 706, 743, 749, 757, 808, 850, 862, 869, 879, 896, 934, 969, 975, 1026, 1040, 1053, 1066, 1156, 1248, 1275, 1278, 1297, 1334, 1351, 1371, 1393, 1402], "numeric_dtyp": 1402, "numericliter": [436, 808, 809, 850, 1053, 1371], "numpi": [97, 106, 137, 175, 209, 213, 221, 257, 290, 291, 310, 314, 315, 356, 596, 630, 631, 660, 850, 969, 977, 1159, 1162, 1164, 1165, 1230, 1231, 1256, 1351, 1352, 1371], "nworld": 728, "o": [158, 170, 415, 426, 427, 446, 703, 755, 756, 850, 1027, 1038, 1039, 1064, 1294, 1319, 1355, 1356, 1371, 1384], "oauth": 169, "obj": 975, "object": [10, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 66, 89, 109, 133, 134, 135, 140, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 181, 183, 184, 210, 211, 213, 219, 224, 231, 244, 245, 260, 262, 278, 288, 291, 296, 303, 313, 314, 315, 356, 449, 611, 789, 790, 792, 793, 810, 829, 837, 838, 850, 862, 872, 878, 883, 891, 896, 899, 911, 917, 924, 927, 966, 969, 975, 978, 1126, 1345, 1371, 1381, 1383, 1386, 1399, 1401], "observ": [259, 356, 447, 503, 504, 505, 506, 645, 850, 895, 969, 1065, 1127, 1128, 1129, 1130, 1242, 1371], "obtain": 588, "obvious": 746, "occur": [41, 64, 107, 116, 122, 261, 356, 390, 557, 618, 648, 850, 872, 883, 897, 911, 924, 969, 1002, 1182, 1226, 1244, 1351, 1371], "occurr": [528, 530, 537, 540, 761, 850, 1151, 1153, 1160, 1163, 1360, 1371], "oct": 1394, "octet_length": 1392, "octob": [487, 1108, 1394], "od": [163, 862], "odbc": [39, 154, 356], "odd": 704, "odi": [707, 709, 1300], "off": [64, 65, 152, 153, 167, 259, 260, 356, 454, 466, 775, 872, 873, 883, 895, 896, 901, 911, 924, 969, 1071, 1083], "offer": [279, 356, 642, 850, 910, 969, 1395, 1399], "offic": [41, 356], "offset": [75, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 239, 245, 288, 301, 332, 333, 356, 454, 455, 463, 474, 475, 477, 482, 495, 521, 564, 582, 658, 690, 708, 709, 723, 736, 850, 889, 891, 917, 925, 941, 942, 969, 1071, 1072, 1080, 1095, 1096, 1098, 1103, 1116, 1143, 1189, 1207, 1282, 1299, 1300, 1314, 1327, 1371, 1398], "offset_bi": 794, "often": [155, 207, 245, 288, 356, 390, 557, 651, 658, 850, 891, 917, 969, 1002, 1182, 1248, 1371, 1386, 1399], "ok": 588, "old": [40, 285, 356, 652, 653, 850, 915, 969, 1249, 1250, 1371], "old_tabl": 1401, "older": [47, 52, 356, 969], "oldw": 729, "omit": [28, 136, 140, 157, 163, 181, 207, 276, 291, 313, 318, 356, 789, 792, 804, 805, 837, 838, 975, 1400, 1401], "onc": [64, 132, 152, 153, 189, 213, 264, 290, 292, 335, 356, 576, 596, 597, 680, 731, 732, 850, 868, 945, 969, 1201, 1221, 1268, 1322, 1323, 1371, 1384], "one": [21, 38, 39, 41, 49, 58, 66, 113, 133, 135, 136, 137, 138, 139, 152, 153, 157, 161, 162, 163, 164, 167, 171, 172, 186, 188, 207, 216, 224, 227, 228, 235, 243, 244, 245, 257, 259, 261, 262, 271, 280, 288, 289, 290, 296, 299, 314, 317, 323, 336, 356, 367, 401, 447, 449, 512, 513, 517, 520, 523, 525, 581, 588, 593, 611, 621, 622, 624, 626, 628, 629, 638, 657, 658, 683, 691, 704, 705, 706, 721, 744, 776, 780, 782, 789, 792, 812, 830, 840, 846, 850, 869, 878, 880, 881, 886, 887, 890, 891, 895, 897, 906, 913, 917, 921, 923, 934, 940, 946, 969, 984, 1013, 1018, 1065, 1136, 1147, 1148, 1206, 1213, 1218, 1242, 1254, 1274, 1295, 1296, 1297, 1312, 1335, 1351, 1371, 1386, 1387, 1389, 1393, 1394, 1401], "oneormoredatatyp": [41, 181, 356], "ones": [662, 664, 666, 668, 670, 673, 675, 677, 850, 975], "onf": [723, 1314], "onli": [1, 5, 11, 14, 21, 31, 38, 39, 41, 49, 57, 58, 63, 64, 66, 100, 132, 134, 147, 149, 152, 153, 154, 157, 158, 160, 162, 164, 167, 170, 171, 172, 173, 176, 177, 178, 179, 183, 187, 197, 207, 227, 228, 231, 233, 236, 245, 246, 257, 260, 261, 264, 280, 288, 290, 291, 310, 312, 313, 314, 325, 326, 342, 356, 367, 369, 371, 383, 435, 436, 449, 454, 466, 477, 485, 487, 507, 516, 526, 596, 597, 604, 605, 621, 622, 623, 624, 625, 626, 627, 628, 629, 638, 650, 697, 707, 709, 721, 759, 775, 812, 850, 875, 878, 880, 881, 882, 891, 896, 897, 917, 918, 924, 935, 937, 952, 969, 975, 982, 983, 984, 1050, 1053, 1071, 1083, 1098, 1108, 1126, 1133, 1140, 1149, 1221, 1246, 1288, 1298, 1300, 1312, 1345, 1348, 1351, 1371, 1380, 1383, 1399, 1400, 1402], "onlin": [233, 356, 1133, 1371], "ont": [707, 709, 1298, 1300], "onto": 183, "oof": [722, 1313, 1389, 1394], "op": [21, 152, 153, 187, 285, 356, 604, 651, 850, 899, 915, 969, 1248, 1371], "opac": [356, 359, 1371, 1376], "opaqu": 952, "open": [41, 54, 150, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 224, 356, 449, 850, 878, 969], "openoffic": 163, "openpyxl": [157, 175], "oper": [4, 41, 57, 66, 100, 109, 112, 119, 126, 133, 135, 136, 137, 138, 139, 149, 154, 218, 233, 236, 238, 244, 250, 262, 264, 272, 276, 278, 279, 280, 283, 284, 286, 288, 291, 292, 297, 299, 308, 314, 315, 320, 323, 324, 334, 335, 356, 366, 367, 370, 401, 441, 442, 443, 444, 445, 446, 501, 502, 517, 519, 522, 524, 548, 576, 577, 578, 579, 580, 581, 588, 595, 614, 617, 619, 620, 621, 622, 624, 626, 628, 629, 632, 633, 634, 637, 638, 643, 650, 680, 683, 749, 757, 764, 765, 767, 778, 779, 783, 795, 829, 850, 862, 871, 875, 877, 882, 887, 890, 895, 906, 907, 914, 918, 922, 923, 927, 934, 937, 945, 969, 1013, 1054, 1059, 1060, 1061, 1062, 1063, 1064, 1123, 1124, 1133, 1144, 1146, 1173, 1201, 1202, 1203, 1204, 1205, 1206, 1220, 1232, 1233, 1246, 1268, 1274, 1310, 1345, 1350, 1351, 1352, 1371, 1390, 1398, 1399], "operand": [757, 850], "opp": 975, "oppos": 775, "opposit": [299, 356, 401, 581, 683, 850, 923, 969, 1013, 1206, 1274, 1371], "opt": [318, 356], "optim": [49, 50, 51, 52, 64, 65, 132, 152, 158, 162, 164, 167, 169, 170, 171, 172, 257, 262, 279, 283, 290, 321, 356, 868, 872, 873, 883, 901, 911, 924, 932, 941, 942, 943, 952, 969, 1049, 1269, 1371], "optimis": [154, 264, 291, 342, 356, 969, 973, 1221, 1271, 1371, 1402], "optimist": 15, "option": [2, 3, 4, 5, 6, 7, 31, 34, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 53, 55, 56, 58, 64, 65, 74, 76, 143, 152, 154, 155, 156, 157, 158, 160, 162, 164, 167, 168, 169, 170, 171, 172, 173, 175, 180, 181, 182, 183, 186, 187, 188, 197, 198, 224, 240, 245, 255, 260, 265, 271, 296, 303, 309, 320, 323, 325, 356, 414, 449, 454, 546, 604, 605, 611, 638, 659, 660, 661, 663, 665, 667, 669, 672, 674, 676, 689, 697, 707, 709, 721, 723, 761, 832, 840, 850, 862, 872, 873, 878, 883, 891, 895, 896, 902, 906, 911, 921, 924, 927, 934, 935, 944, 969, 975, 1026, 1071, 1171, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1281, 1288, 1298, 1300, 1312, 1314, 1347, 1360, 1371, 1389, 1394, 1401], "optional_memb": [538, 850, 1161, 1371], "or_": 850, "oracl": 155, "orang": [220, 337, 338, 340, 341, 343, 344, 346, 348, 349, 356, 427, 756, 850, 947, 948, 950, 951, 953, 954, 956, 958, 959, 1394], "orc": 200, "order": [11, 41, 49, 50, 51, 52, 55, 58, 64, 70, 136, 152, 154, 167, 174, 176, 177, 178, 179, 215, 219, 220, 227, 228, 229, 236, 244, 245, 259, 261, 272, 278, 279, 280, 284, 288, 290, 292, 293, 297, 302, 313, 314, 319, 321, 325, 326, 356, 382, 402, 407, 426, 427, 452, 453, 513, 559, 576, 583, 589, 638, 643, 648, 658, 680, 681, 682, 691, 692, 722, 729, 730, 731, 732, 746, 755, 756, 758, 759, 761, 773, 829, 840, 850, 861, 867, 875, 880, 881, 882, 887, 890, 891, 895, 897, 906, 907, 914, 917, 918, 922, 926, 927, 931, 932, 935, 969, 973, 974, 975, 994, 1014, 1019, 1038, 1039, 1048, 1069, 1070, 1137, 1168, 1184, 1201, 1208, 1214, 1240, 1244, 1252, 1268, 1270, 1272, 1283, 1313, 1338, 1355, 1356, 1357, 1358, 1360, 1371, 1380, 1383, 1389, 1398, 1399, 1402], "order_bi": [638, 850], "ordin": [478, 648, 850, 1099, 1244, 1371, 1400], "ordinal_dai": [462, 497], "org": [21, 43, 44, 134, 154, 155, 158, 160, 209, 210, 211, 221, 356, 612, 716, 924, 969, 977, 978, 1307], "orient": [59, 61, 107, 137, 139, 276, 356, 969, 1380], "origin": [58, 152, 153, 167, 227, 228, 236, 284, 321, 356, 452, 453, 481, 482, 495, 513, 559, 597, 621, 638, 650, 651, 652, 653, 654, 656, 698, 704, 713, 771, 772, 850, 880, 881, 887, 914, 932, 969, 1069, 1070, 1102, 1103, 1116, 1137, 1184, 1248, 1249, 1250, 1251, 1253, 1289, 1295, 1304, 1371], "orjson": 148, "orld": 1320, "orson": 148, "other": [1, 21, 37, 41, 47, 65, 66, 133, 151, 152, 153, 154, 157, 167, 172, 176, 177, 178, 179, 228, 230, 233, 236, 259, 260, 261, 271, 272, 280, 284, 289, 291, 294, 295, 318, 323, 325, 328, 330, 331, 354, 356, 359, 366, 370, 372, 382, 383, 436, 451, 487, 495, 501, 502, 513, 517, 522, 524, 534, 538, 548, 555, 577, 578, 579, 580, 595, 601, 607, 617, 619, 632, 633, 637, 652, 653, 685, 692, 721, 748, 749, 754, 757, 764, 766, 768, 773, 776, 777, 778, 779, 787, 794, 814, 816, 819, 828, 832, 834, 850, 862, 865, 873, 887, 895, 896, 897, 906, 907, 913, 914, 919, 920, 924, 934, 935, 938, 939, 940, 969, 975, 984, 1053, 1068, 1108, 1116, 1123, 1124, 1125, 1133, 1144, 1146, 1161, 1173, 1180, 1202, 1203, 1204, 1205, 1220, 1232, 1233, 1249, 1250, 1353, 1362, 1370, 1371, 1376, 1386, 1399], "other_df": [259, 356], "other_lf": [895, 969], "otherwis": [39, 152, 154, 157, 164, 170, 182, 185, 189, 240, 264, 272, 291, 294, 313, 318, 342, 356, 406, 411, 432, 436, 447, 503, 504, 505, 506, 588, 597, 608, 638, 642, 643, 645, 650, 686, 696, 699, 703, 708, 710, 715, 719, 720, 723, 734, 761, 765, 794, 797, 806, 812, 840, 850, 907, 919, 952, 969, 974, 1018, 1023, 1045, 1053, 1065, 1127, 1128, 1129, 1130, 1213, 1221, 1240, 1242, 1246, 1269, 1271, 1278, 1287, 1290, 1294, 1299, 1301, 1306, 1310, 1311, 1314, 1325, 1360, 1371, 1391], "our": 212, "out": [8, 15, 39, 49, 50, 51, 52, 53, 54, 55, 114, 140, 143, 172, 175, 183, 187, 236, 288, 291, 356, 393, 411, 563, 565, 696, 699, 708, 840, 887, 917, 969, 1005, 1023, 1188, 1190, 1287, 1290, 1299, 1397], "outcom": [638, 850], "outer": [58, 325, 356, 935, 969], "outermost": 57, "outlin": 7, "output": [0, 8, 31, 38, 41, 43, 44, 45, 46, 47, 49, 53, 54, 55, 215, 223, 257, 264, 269, 272, 278, 280, 290, 294, 296, 306, 319, 326, 330, 356, 369, 371, 394, 426, 427, 432, 447, 487, 551, 552, 567, 585, 588, 596, 597, 608, 611, 622, 644, 645, 652, 695, 711, 715, 750, 755, 756, 761, 765, 766, 767, 768, 778, 779, 780, 798, 808, 809, 811, 812, 816, 833, 834, 840, 850, 862, 867, 877, 883, 901, 906, 907, 919, 921, 931, 938, 952, 969, 982, 983, 997, 998, 1006, 1016, 1038, 1039, 1045, 1065, 1108, 1176, 1177, 1192, 1210, 1221, 1241, 1242, 1286, 1302, 1306, 1341, 1355, 1356, 1360, 1371], "output_path": [612, 924, 969], "outsid": [56, 169, 172, 436, 850, 1053, 1371], "over": [52, 53, 54, 55, 66, 142, 152, 153, 154, 157, 163, 167, 172, 183, 184, 215, 233, 256, 257, 258, 264, 272, 289, 290, 291, 303, 319, 320, 334, 342, 356, 360, 426, 427, 446, 449, 504, 512, 596, 597, 608, 610, 611, 612, 613, 614, 622, 623, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 755, 756, 784, 785, 798, 811, 812, 824, 829, 850, 867, 872, 883, 907, 911, 924, 927, 931, 944, 952, 966, 969, 975, 1038, 1039, 1064, 1128, 1133, 1221, 1257, 1258, 1260, 1264, 1355, 1356, 1371, 1399], "overflow": [428, 444, 445, 738, 750, 850, 869, 969, 1040, 1062, 1063, 1329, 1341, 1371], "overhead": [55, 57, 100, 167, 170, 171, 172], "overlap": [698, 705, 707, 709, 1289, 1296, 1298, 1300], "overrid": [1, 41, 133, 135, 136, 137, 138, 139, 152, 154, 155, 157, 161, 162, 163, 169, 171, 180, 181, 187, 189, 356, 969], "overridden": [41, 133, 135, 137, 139, 161, 162, 171, 189, 356, 969], "overview": [356, 850, 862, 969, 1371, 1398, 1402], "overwrit": [15, 39, 40, 42, 52, 55, 133, 135, 136, 137, 139, 143, 148, 152, 153, 161, 162, 167, 171, 211, 325, 356, 368, 748, 850, 935, 969], "overwrite_schema": [40, 356], "ow": 728, "own": [840, 865, 1351, 1371, 1402], "p": [60, 279, 356, 642, 832, 850, 910, 969, 975, 1299, 1301, 1384], "p13dt14h0": 487, "p1dt42": 487, "pa": [40, 133, 173, 356, 829], "pa_tabl": 829, "pacif": [455, 1072], "pack": [276, 356], "packag": [33, 34, 35, 149, 154, 356, 360, 454, 466, 775, 1071, 1083], "pad": [717, 718, 743, 1308, 1309, 1334], "pad_end": [718, 1309], "pad_start": [717, 743, 1308, 1334], "page": [47, 52, 158, 164, 170, 172, 356, 850, 862, 969, 1371, 1398], "pair": [133, 135, 136, 137, 139, 145, 161, 162, 171, 285, 356, 915, 969, 1402], "pairwis": [221, 356], "panda": [39, 134, 138, 148, 175, 236, 245, 284, 315, 321, 323, 356, 474, 475, 754, 829, 850, 887, 891, 914, 932, 934, 969, 1095, 1096, 1352, 1353, 1371, 1381, 1383, 1399], "pandas_df": 1399, "pane": [41, 356], "panic": 115, "pap": 1301, "papa": 710, "papai": [710, 1301], "papaya": [710, 723, 734, 1301, 1314, 1325], "parallel": [64, 66, 142, 155, 164, 172, 245, 260, 262, 279, 295, 331, 356, 560, 761, 840, 850, 891, 895, 896, 920, 939, 952, 969, 1064, 1185, 1360, 1371], "parallelis": [264, 342, 356, 1221, 1371], "parallelstrategi": [164, 172], "param": [41, 133, 135, 136, 137, 139, 152, 153, 161, 162, 167, 171, 182, 183, 187, 289, 356, 969], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 85, 89, 97, 101, 107, 116, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 195, 196, 197, 211, 212, 213, 215, 216, 217, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 255, 257, 258, 259, 260, 261, 263, 264, 265, 269, 271, 272, 275, 276, 278, 279, 280, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 339, 341, 342, 348, 350, 356, 366, 368, 369, 370, 371, 372, 382, 389, 390, 393, 394, 401, 402, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 426, 427, 428, 429, 433, 436, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 454, 456, 458, 459, 464, 466, 477, 480, 481, 482, 483, 484, 486, 487, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 532, 533, 534, 538, 546, 548, 550, 555, 556, 557, 558, 560, 563, 564, 565, 566, 567, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 595, 596, 597, 604, 605, 611, 612, 613, 617, 619, 622, 623, 624, 625, 626, 627, 632, 633, 637, 638, 639, 642, 643, 645, 646, 648, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 743, 744, 746, 748, 749, 751, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 846, 850, 867, 869, 870, 872, 873, 877, 878, 879, 880, 883, 884, 885, 886, 887, 889, 890, 891, 892, 895, 896, 897, 900, 901, 902, 906, 907, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 944, 945, 949, 951, 952, 958, 960, 969, 974, 975, 979, 981, 982, 983, 984, 994, 1001, 1002, 1005, 1006, 1013, 1014, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1038, 1039, 1040, 1041, 1046, 1052, 1053, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1073, 1075, 1076, 1081, 1083, 1098, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1116, 1119, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1141, 1142, 1143, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1161, 1168, 1171, 1175, 1180, 1181, 1182, 1183, 1185, 1188, 1189, 1190, 1191, 1192, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1211, 1212, 1213, 1214, 1221, 1233, 1237, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1277, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1331, 1334, 1335, 1338, 1342, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1355, 1356, 1357, 1360, 1361, 1362, 1371, 1380, 1381, 1382, 1383, 1384, 1386, 1391, 1394, 1399], "parameteris": 154, "parametr": 862, "paramount": [901, 969], "parent": [41, 77, 238, 356], "parenthes": 19, "parquet": [47, 52, 53, 54, 55, 164, 165, 166, 172, 200, 356, 862, 969], "parquetcompress": [47, 356], "parquetfieldoverwrit": [52, 969], "parquetmetadata": [47, 52, 356, 969], "pars": [38, 49, 151, 152, 153, 155, 157, 162, 163, 164, 167, 170, 171, 172, 215, 244, 294, 295, 299, 302, 319, 330, 331, 335, 356, 427, 436, 534, 638, 652, 653, 692, 712, 721, 737, 738, 748, 756, 766, 768, 773, 776, 777, 778, 779, 787, 800, 814, 816, 819, 828, 830, 832, 834, 840, 850, 867, 890, 919, 920, 923, 926, 931, 938, 939, 945, 969, 1039, 1053, 1156, 1249, 1250, 1274, 1303, 1328, 1329, 1356, 1371, 1380], "parseerror": [738, 1329], "parser": [152, 157], "part": [55, 133, 157, 207, 212, 313, 318, 356, 638, 705, 725, 726, 850, 940, 969, 979, 1296, 1316, 1317, 1394, 1395], "part_idx": 146, "parti": [596, 850], "partial": [136, 152, 167, 356, 969], "particip": [41, 356], "particular": [40, 152, 157, 158, 160, 215, 231, 319, 356, 426, 427, 755, 756, 850, 867, 931, 969, 1038, 1039, 1126, 1355, 1356, 1371], "partit": [47, 53, 54, 55, 155, 164, 168, 170, 172, 173, 258, 278, 356, 638, 850, 862], "partition_bi": [47, 153, 258, 356, 638, 850], "partition_chunk_size_byt": [47, 356], "partition_col": [47, 155, 356], "partition_df": 153, "partition_index": 199, "partition_num": 155, "partition_on": 155, "partition_rang": 155, "partitionbykei": [54, 55, 145, 146], "partitioned_object": [47, 356], "partitioningschem": [49, 50, 51, 52, 969], "partitionmax": 54, "partitionmaxs": [53, 55, 144], "partitionpart": [53, 54, 145, 146], "pass": [33, 34, 35, 37, 39, 40, 41, 47, 49, 50, 51, 52, 58, 64, 65, 107, 132, 135, 148, 149, 151, 154, 155, 157, 164, 167, 170, 172, 173, 176, 178, 181, 183, 185, 187, 215, 221, 225, 244, 245, 247, 260, 263, 278, 279, 280, 285, 288, 294, 299, 302, 307, 315, 318, 319, 326, 330, 335, 356, 401, 427, 454, 464, 466, 477, 481, 487, 510, 531, 581, 596, 597, 612, 638, 642, 652, 653, 658, 683, 692, 721, 728, 729, 730, 737, 756, 765, 773, 775, 800, 832, 840, 846, 850, 867, 872, 873, 879, 883, 890, 891, 893, 896, 901, 910, 911, 915, 917, 919, 923, 924, 926, 931, 938, 944, 945, 952, 969, 974, 1013, 1039, 1071, 1081, 1083, 1102, 1108, 1134, 1150, 1175, 1206, 1221, 1249, 1250, 1274, 1312, 1319, 1320, 1321, 1328, 1342, 1352, 1356, 1371, 1384, 1399], "pass_nam": [597, 850], "pass_name_to_appli": [149, 850], "password": [152, 155, 158, 160], "past": [37, 356, 901, 969], "pat": [708, 1299], "patch": 76, "path": [3, 6, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 144, 146, 149, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 224, 296, 356, 449, 611, 612, 615, 682, 850, 878, 921, 924, 969, 973, 1272, 1304, 1371, 1402], "pathlib": [36, 38, 43, 44, 47, 167, 356], "pattern": [103, 152, 153, 157, 158, 162, 164, 167, 170, 171, 172, 257, 356, 429, 433, 606, 696, 697, 698, 701, 704, 705, 706, 707, 708, 709, 719, 720, 721, 727, 865, 952, 975, 1041, 1046, 1269, 1271, 1287, 1288, 1289, 1292, 1295, 1296, 1297, 1298, 1299, 1300, 1310, 1311, 1312, 1318, 1371, 1394], "paya": 734, "pc": [913, 969], "pct": [183, 648, 850], "pct_chang": [850, 1371], "pct_valid": [648, 850], "pd": [134, 138, 754, 829, 850, 1352, 1353, 1371, 1381, 1399], "pd_df": 138, "pd_frame": 829, "pd_seri": 138, "pdsh": [142, 153], "pea": 710, "peak": [290, 356, 640, 641, 850, 1238, 1239, 1371], "peak_max": [850, 1371], "peak_min": [850, 1371], "pear": [710, 723, 734, 1301, 1314, 1325], "pearson": [221, 356, 546, 659, 689, 780, 850, 1171, 1255, 1281, 1371, 1388], "penalti": [733, 735, 736, 1324, 1326, 1327], "per": [15, 38, 41, 49, 149, 157, 181, 183, 215, 243, 265, 276, 277, 280, 295, 302, 319, 331, 345, 347, 348, 356, 393, 427, 560, 563, 565, 596, 597, 621, 622, 624, 626, 628, 629, 692, 756, 761, 773, 850, 867, 902, 920, 926, 931, 939, 955, 957, 958, 969, 1005, 1039, 1185, 1188, 1190, 1356, 1360, 1371], "per_partition_sort_bi": [53, 54, 55], "percent": [639, 850, 1237, 1371], "percentag": [180, 183, 187, 639, 850, 1237, 1371], "percentil": [223, 356, 648, 850, 877, 969, 1066, 1371], "perform": [39, 47, 50, 52, 58, 105, 110, 112, 117, 119, 126, 134, 152, 153, 154, 158, 162, 164, 167, 169, 170, 171, 172, 211, 236, 244, 245, 259, 260, 261, 264, 283, 284, 288, 290, 291, 314, 342, 356, 417, 422, 425, 431, 432, 517, 588, 596, 597, 638, 658, 697, 707, 709, 714, 715, 721, 733, 735, 736, 850, 887, 891, 895, 896, 897, 914, 917, 926, 941, 942, 969, 1029, 1034, 1037, 1044, 1045, 1221, 1288, 1298, 1300, 1305, 1306, 1312, 1324, 1326, 1327, 1351, 1371], "perhap": [320, 356], "period": [152, 153, 167, 245, 288, 356, 482, 503, 505, 506, 639, 658, 789, 790, 792, 793, 837, 838, 850, 891, 917, 969, 1103, 1127, 1129, 1130, 1237, 1371], "persist": 1386, "phase": [39, 324, 356], "philadelphia": [719, 720], "phone": [741, 1332], "physic": [57, 70, 100, 152, 153, 260, 280, 356, 754, 850, 868, 895, 896, 924, 969, 1047, 1353, 1371], "pi": [11, 448, 850, 1055, 1057, 1279, 1343, 1371, 1392, 1396], "pick": [184, 840], "pickl": [449, 850, 878, 969], "pip": [454, 466, 775, 1071, 1083], "pipe": [356, 850, 969], "pipelin": [157, 318, 356], "pitfal": 117, "pivot": [324, 356, 975], "pivot_long": [323, 356, 934, 969], "pivot_wid": [280, 356], "pivotagg": [280, 356], "pixel": [41, 356], "pk": [500, 850, 1122, 1371], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 66, 67, 76, 85, 89, 97, 98, 100, 104, 107, 108, 109, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 189, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 846, 850, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 969, 974, 975, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1142, 1143, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1337, 1338, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1371, 1376, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1399, 1400, 1402], "pl_frame": 829, "place": [11, 12, 38, 49, 207, 213, 226, 233, 249, 250, 280, 286, 291, 302, 328, 356, 360, 382, 394, 402, 567, 583, 691, 692, 773, 850, 926, 969, 984, 994, 1006, 1014, 1133, 1192, 1208, 1245, 1283, 1371], "placehold": 799, "plai": [13, 779], "plain": [883, 913, 969], "plan": [64, 132, 260, 262, 356, 449, 850, 868, 872, 878, 883, 895, 896, 913, 921, 924, 969, 1401], "plan_stag": [924, 969], "plan_typ": [913, 969], "plane": [771, 772], "planstag": [924, 969], "plantypeprefer": [913, 969], "platform": 175, "ple": 1394, "pleas": [138, 154, 155, 236, 245, 284, 356, 360, 504, 781, 794, 850, 887, 891, 914, 969, 1128, 1371], "plenti": 975, "plot": [356, 911, 924, 969, 1371], "plu": [447, 593, 850, 1065, 1218, 1242, 1371, 1393], "plugin": [0, 850, 862], "plugin_path": 149, "point": [11, 12, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 78, 79, 80, 99, 132, 143, 144, 145, 146, 147, 148, 156, 162, 164, 165, 167, 168, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 227, 234, 245, 261, 262, 265, 303, 313, 318, 325, 356, 359, 360, 361, 435, 446, 447, 452, 454, 466, 482, 483, 511, 516, 517, 528, 541, 542, 576, 597, 645, 659, 660, 662, 664, 666, 668, 670, 671, 673, 675, 677, 678, 680, 775, 777, 808, 809, 850, 872, 873, 880, 883, 885, 891, 897, 901, 902, 911, 915, 927, 935, 943, 969, 1048, 1050, 1064, 1065, 1069, 1071, 1083, 1103, 1104, 1135, 1140, 1151, 1201, 1242, 1255, 1256, 1259, 1261, 1262, 1266, 1268, 1349, 1354, 1371, 1376, 1399], "pointer": [231, 356, 1126, 1371], "poison": [630, 631, 850, 1230, 1231, 1371], "pola": 356, "polar": [1, 205, 356, 359, 360, 361, 849, 850, 856, 862, 969, 973, 974, 975, 1371, 1375, 1376, 1398, 1399, 1401], "polars_df": 1399, "polars_engine_affin": [49, 50, 51, 52, 64, 65, 872, 873, 883, 911, 924, 969], "polars_file_cache_ttl": [162, 167, 170, 171], "polars_hypothesis_profil": [186, 188], "polars_max_thread": 189, "polars_seri": 1399, "polars_verbos": [872, 883, 911, 924, 969], "polarsdatafram": 211, "polarsdataset": [318, 356], "polarsdatatyp": [67, 77, 85, 152, 153, 167, 180, 181, 182, 183, 184, 187, 216, 264, 313, 318, 356, 414, 428, 507, 596, 597, 652, 653, 712, 796, 798, 810, 811, 812, 822, 825, 841, 846, 850, 869, 969, 975, 1026, 1040, 1221, 1249, 1250, 1303, 1371], "polarsintegertyp": [770, 804, 805], "polarstemporaltyp": [733, 1324], "polarstyp": 66, "pool": [15, 65, 189, 190, 873, 969], "poor": 154, "pop2": [260, 356, 896, 969], "popul": [260, 356, 896, 969], "port": [39, 152, 154, 155, 158, 160, 356], "pos_a": 1394, "posit": [41, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 199, 212, 225, 232, 244, 278, 294, 295, 299, 302, 322, 330, 331, 335, 356, 401, 503, 505, 506, 507, 581, 638, 643, 645, 683, 692, 706, 719, 720, 738, 748, 771, 772, 773, 776, 777, 778, 779, 796, 828, 832, 846, 850, 879, 884, 890, 919, 920, 923, 926, 933, 938, 939, 945, 969, 975, 1013, 1127, 1129, 1130, 1206, 1240, 1242, 1274, 1297, 1329, 1371, 1400], "position": 1371, "possibl": [41, 47, 52, 107, 109, 135, 136, 139, 152, 157, 180, 183, 187, 244, 257, 264, 290, 321, 342, 356, 594, 597, 608, 660, 726, 760, 850, 872, 883, 890, 911, 924, 926, 932, 969, 1221, 1256, 1317, 1371], "post": [58, 76, 913, 969], "postgresql": [39, 154, 155, 356, 638, 850, 1397], "potenti": [117, 119, 149, 167, 170, 171, 257, 289, 291, 356, 621, 719, 720, 875, 877, 882, 918, 937, 969, 1310, 1311], "pow": [850, 1371, 1392], "pow_n": 60, "power": [830, 1240, 1371, 1393], "powersofn": 60, "pre": [55, 588, 597, 645, 822, 825, 841, 850, 1242, 1371], "preced": [183, 975], "precis": [11, 12, 38, 41, 49, 56, 74, 154, 257, 290, 291, 310, 313, 318, 356, 456, 737, 808, 969, 975, 1073, 1328], "pred1": 840, "pred2": 840, "predefin": [280, 356], "predic": [40, 64, 147, 167, 170, 171, 172, 173, 216, 236, 255, 260, 261, 284, 289, 356, 428, 513, 763, 798, 840, 850, 872, 883, 887, 896, 897, 901, 911, 914, 915, 924, 941, 942, 969, 1137, 1269, 1271, 1371], "predicate_pushdown": [64, 872, 883, 901, 911, 924, 943, 969], "predict": [283, 326, 356], "prefer": [152, 153, 157, 158, 162, 164, 167, 188, 215, 233, 257, 264, 289, 290, 319, 342, 356, 426, 427, 507, 597, 644, 750, 755, 756, 833, 840, 850, 867, 931, 969, 973, 1038, 1039, 1133, 1221, 1241, 1341, 1355, 1356, 1371, 1381, 1402], "prefilt": 172, "prefix": [40, 152, 153, 167, 207, 356, 368, 416, 433, 487, 606, 622, 625, 626, 628, 629, 727, 730, 731, 743, 850, 975, 1028, 1046, 1318, 1322, 1334], "prefix_": 625, "prefix_a": 625, "prefix_b": 625, "prefix_field": [623, 627], "presenc": [797, 806, 975], "present": [136, 183, 240, 356, 538, 612, 729, 730, 840, 850, 924, 969], "preserv": [227, 228, 236, 244, 259, 261, 264, 284, 314, 315, 325, 356, 452, 453, 454, 474, 475, 513, 559, 638, 652, 686, 703, 850, 880, 881, 887, 895, 897, 914, 935, 969, 1069, 1070, 1071, 1137, 1184, 1249, 1278, 1294, 1352, 1371], "pressur": [52, 152, 153, 162, 164, 167, 171, 172, 684, 850, 969, 1275, 1371], "presum": [596, 850], "prev_pow2": 60, "prevent": [314, 356, 368, 444, 445, 621, 750, 850, 969, 1062, 1063, 1341, 1371], "preview": [243, 356], "previou": [55, 60, 207, 356, 359, 454, 621, 622, 624, 626, 628, 629, 639, 746, 850, 1071, 1237, 1371, 1376], "previous": [2, 3], "price": [356, 359, 1402], "primari": [157, 973, 1399, 1402], "primarili": [1, 865], "primit": [40, 356, 538, 850], "print": [9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 153, 175, 176, 178, 229, 243, 244, 258, 262, 312, 334, 356, 531, 613, 789, 792, 850, 872, 893, 969, 975, 1161, 1348, 1371, 1402], "prior": [138, 356, 359, 1371, 1376], "prioriti": 184, "probabl": [500, 645, 850, 1122, 1242, 1371], "process": [15, 38, 49, 50, 51, 52, 64, 65, 152, 153, 154, 167, 189, 290, 356, 872, 873, 883, 911, 924, 969], "process_index": [313, 356], "produc": [2, 3, 97, 147, 183, 187, 216, 259, 356, 390, 428, 557, 608, 808, 811, 850, 895, 901, 969, 1002, 1182], "product": [58, 221, 259, 356, 444, 451, 850, 895, 969, 1062, 1068, 1371], "profil": [33, 186, 188, 872, 969], "profile_nam": 33, "programmat": [223, 356, 877, 969], "progress": [74, 80], "project": [64, 147, 167, 169, 170, 171, 172, 691, 692, 850, 872, 883, 901, 911, 915, 924, 969], "projection_pushdown": [64, 872, 883, 901, 911, 924, 943, 969], "prompt": 140, "propag": [389, 394, 502, 538, 556, 567, 630, 631, 633, 695, 711, 778, 779, 850, 1001, 1006, 1124, 1161, 1181, 1192, 1230, 1231, 1233, 1286, 1302, 1371], "propagate_nan": 780, "proper": [261, 356, 897, 969], "properti": [40, 41, 52, 198, 201, 202, 211, 219, 220, 229, 237, 248, 293, 298, 329, 333, 356, 359, 360, 874, 875, 882, 918, 937, 942, 969, 974, 975, 1121, 1139, 1229, 1273, 1371, 1376, 1402], "proport": [761, 850, 1360, 1371], "protocol": [40, 134, 154, 155, 211, 356], "prototyp": 846, "provid": [32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 53, 54, 55, 152, 153, 155, 156, 157, 162, 164, 167, 168, 169, 170, 171, 172, 183, 187, 197, 213, 236, 240, 255, 260, 284, 303, 313, 356, 359, 411, 412, 487, 507, 528, 588, 596, 597, 699, 700, 704, 712, 713, 729, 730, 731, 732, 800, 832, 850, 862, 872, 883, 887, 896, 911, 914, 924, 927, 944, 966, 969, 1023, 1024, 1108, 1151, 1170, 1221, 1290, 1291, 1295, 1303, 1304, 1349, 1371, 1384, 1391, 1394, 1399, 1402], "provis": 863, "prune": [164, 170, 172, 901, 969], "pt0": 487, "public": [155, 356, 850, 862, 969, 1371, 1398], "pulp": 1380, "pure": [41, 356], "purpos": [620, 850, 969], "push": [152, 158, 162, 164, 167, 170, 171, 172, 173, 216, 356, 428, 850], "pushdown": [64, 147, 872, 883, 901, 911, 915, 924, 941, 942, 969, 1269, 1271, 1371], "put": [38, 49, 76, 356, 360, 969], "pwd": 154, "py": 169, "pyarrow": [40, 47, 56, 133, 138, 152, 155, 156, 158, 160, 164, 168, 173, 175, 308, 314, 315, 356, 829, 862, 1345, 1351, 1352, 1371, 1381, 1383, 1399], "pyarrow_opt": [47, 156, 164, 168, 356], "pyarrow_t": 1399, "pycapsul": [133, 134, 210, 978], "pycapsuleinterfac": [134, 210, 978], "pydant": 175, "pyiceberg": [42, 169, 175, 356], "pyodbc": [39, 356], "pyodbc_uri": [39, 356], "pyspark": 189, "pytest": [176, 178], "python": [0, 33, 34, 35, 43, 44, 76, 87, 103, 134, 152, 153, 158, 160, 175, 176, 178, 211, 257, 264, 290, 291, 310, 342, 356, 449, 454, 458, 466, 517, 596, 597, 706, 775, 789, 790, 792, 793, 837, 838, 850, 856, 878, 952, 969, 973, 974, 1071, 1075, 1083, 1086, 1087, 1088, 1092, 1221, 1297, 1350, 1371, 1375, 1398], "pythondatatyp": [67, 85, 216, 356, 846, 869, 969, 975], "pythonliter": [985, 1029, 1034, 1037, 1138, 1172, 1222, 1223, 1224, 1225, 1269, 1371], "pytorch": [318, 356, 1354, 1371], "q": [291, 356, 832, 1371, 1376, 1384], "q1": [41, 356], "q2": [41, 356], "q3": [41, 356], "q4": [41, 356], "qcut": [447, 850, 1065, 1371], "qhoo": 1402, "qmark": 154, "qqr": 975, "quad": [504, 850, 1128, 1371], "qualifi": [39, 356], "quantifi": [705, 1296], "quantil": [356, 645, 669, 670, 850, 969, 1242, 1261, 1371, 1388], "quantile_cont": 1392, "quantile_disc": 1392, "quantilemethod": [223, 282, 348, 356, 646, 669, 670, 823, 850, 877, 912, 958, 969, 1066, 1243, 1261, 1371], "quarter": [245, 260, 288, 326, 356, 477, 482, 495, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1098, 1103, 1116, 1395], "queri": [10, 49, 50, 51, 52, 53, 54, 55, 64, 65, 97, 132, 154, 155, 158, 167, 170, 171, 172, 233, 262, 279, 303, 356, 588, 596, 597, 713, 829, 850, 862, 872, 873, 883, 911, 913, 924, 927, 941, 942, 943, 944, 952, 961, 969, 1133, 1221, 1304, 1371, 1380, 1381, 1383, 1387, 1398, 1400, 1401], "queryoptflag": [49, 50, 51, 52, 64, 65, 132, 872, 873, 883, 911, 924, 969], "quick": [846, 1066, 1371, 1402], "quit": [260, 356, 896, 969], "quot": [38, 39, 49, 152, 153, 155, 167, 356, 741, 969, 1332], "quota_project_id": 35, "quote_char": [38, 49, 152, 153, 167, 356, 969], "quote_plu": 155, "quote_styl": [38, 49, 356, 969], "quotes_titl": 741, "quotient": 1393, "r": [152, 153, 167, 356, 603, 642, 698, 703, 704, 705, 706, 719, 720, 850, 975, 1289, 1294, 1295, 1296, 1297, 1310, 1311, 1325, 1384, 1394], "r1": 66, "r2": 66, "r3": 66, "rab": [696, 722, 1287, 1313, 1389], "rad": 1396, "radian": [448, 771, 850, 1392], "radix": [738, 1329], "rai": [771, 772], "raini": [719, 720, 1310, 1311], "rais": [1, 10, 16, 17, 21, 40, 56, 66, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 152, 153, 157, 163, 164, 167, 172, 176, 178, 211, 213, 216, 240, 265, 280, 289, 314, 356, 393, 411, 428, 454, 480, 481, 563, 565, 608, 643, 645, 653, 696, 699, 708, 733, 735, 736, 738, 740, 791, 810, 850, 902, 944, 969, 1005, 1023, 1071, 1101, 1102, 1188, 1190, 1240, 1242, 1250, 1287, 1290, 1299, 1324, 1326, 1327, 1329, 1331, 1351, 1371], "raise_if_empti": [152, 153, 157, 163, 167], "raise_if_undetermin": 608, "raise_on_fail": 944, "raker": 148, "ram": [49, 50, 51, 52, 969], "ran": [149, 850], "randn": 97, "random": [41, 43, 97, 158, 174, 181, 246, 292, 356, 526, 576, 648, 680, 685, 850, 862, 1149, 1201, 1244, 1268, 1277, 1371], "randomli": 182, "rang": [18, 41, 154, 155, 223, 231, 245, 258, 356, 373, 448, 454, 462, 466, 473, 478, 479, 480, 482, 495, 496, 532, 770, 775, 778, 788, 789, 790, 791, 792, 793, 804, 805, 808, 809, 836, 837, 838, 850, 877, 891, 969, 975, 1066, 1071, 1079, 1083, 1094, 1099, 1100, 1101, 1103, 1116, 1117, 1126, 1237, 1371, 1394], "rank": [382, 560, 773, 780, 795, 850, 994, 1185, 1371], "rankmethod": [648, 850, 1244, 1371], "rare": [455, 1072], "rather": [260, 356, 519, 596, 613, 645, 657, 743, 850, 896, 969, 1242, 1254, 1334, 1371], "raw": 155, "raw_output": [612, 924, 969], "raw_valu": 145, "re": [240, 245, 256, 321, 323, 356, 474, 475, 484, 487, 891, 932, 934, 969, 1095, 1096, 1105, 1108, 1399], "reach": [54, 717, 718, 743, 1308, 1309, 1334], "read": [37, 142, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 197, 224, 233, 356, 359, 449, 519, 850, 878, 913, 969, 1133, 1371, 1376], "read_arrow_batches_from_odbc": 154, "read_clipboard": [37, 356], "read_csv": [151, 157, 167], "read_csv_batch": 142, "read_csv_opt": 157, "read_databas": [97, 155], "read_database_uri": 154, "read_excel": 163, "read_ndjson": 161, "read_od": 157, "read_opt": 157, "read_parquet": 172, "read_tabl": 164, "readabl": 846, "reader": [47, 52, 142, 147, 152, 153, 158, 160, 162, 164, 169, 356, 969], "reader_overrid": 169, "readi": 962, "readthedoc": [41, 356], "real": [705, 1296], "realli": [446, 697, 721, 850, 1064, 1288, 1312, 1371], "realloc": [162, 167, 170, 171, 233, 356, 1133, 1371], "rearrang": [264, 356], "reason": [189, 223, 356, 588, 596, 850, 877, 969], "receiv": [58, 154, 167, 264, 279, 342, 356, 597, 642, 850, 910, 969, 1402], "recent": [176, 177, 178, 179, 314, 356, 639, 653, 850, 1237, 1250, 1351, 1371, 1383, 1399], "rechunk": [66, 133, 134, 138, 152, 153, 156, 158, 160, 162, 164, 167, 168, 170, 171, 172, 233, 356, 850, 1051, 1133, 1145, 1227, 1371], "recognis": [10, 16, 17, 21, 975], "recommend": [41, 189, 223, 257, 262, 279, 356, 588, 868, 877, 969, 975], "record": [38, 44, 49, 148, 160, 173, 356, 969], "record_batch": [258, 356], "recordbatch": [133, 258, 356, 829, 1381, 1383, 1399], "recurs": [49, 50, 51, 52, 503, 505, 506, 850, 969, 1127, 1129, 1130, 1371], "red": [57, 98, 100, 342, 761, 850, 952, 1360, 1371], "redempt": 1380, "redshift": 155, "redshift_format": 200, "reduc": [52, 152, 153, 162, 164, 167, 170, 171, 172, 290, 343, 344, 346, 349, 356, 684, 785, 798, 850, 953, 954, 956, 959, 969, 1223, 1241, 1275, 1341, 1371], "reduct": [238, 356, 597, 850], "ref": [704, 706, 1295, 1297], "refer": [0, 33, 41, 103, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 221, 224, 356, 360, 361, 449, 484, 487, 648, 704, 719, 720, 733, 735, 736, 740, 850, 878, 969, 1105, 1108, 1244, 1310, 1311, 1324, 1326, 1327, 1331, 1371], "referenc": [41, 356, 596, 719, 720, 746, 850, 1310, 1311, 1381, 1399], "reg": 148, "regard": [152, 780], "regardless": [138, 215, 244, 260, 319, 356, 427, 459, 713, 756, 840, 850, 867, 896, 931, 969, 1039, 1076, 1304, 1356, 1371], "regex": [101, 507, 603, 604, 606, 696, 698, 704, 705, 706, 708, 719, 720, 744, 796, 850, 975, 1287, 1289, 1295, 1296, 1297, 1299, 1310, 1311], "regexp_lik": 1392, "region": [41, 169, 356], "region_nam": 33, "regist": [1, 53, 54, 55, 59, 60, 61, 62, 147, 149, 186, 188, 303, 356, 850, 927, 969, 973, 1380, 1381, 1383, 1384, 1385, 1386, 1399, 1401], "register_dataframe_namespac": [1, 60, 61, 62], "register_expr_namespac": [1, 59, 61, 62], "register_glob": [1382, 1384, 1386, 1399], "register_io_sourc": 973, "register_lazyframe_namespac": [1, 59, 60, 62], "register_mani": [1382, 1383, 1386], "register_plugin": 850, "register_plugin_funct": 850, "register_series_namespac": [1, 59, 60, 61], "registr": [303, 356, 829, 862, 927, 969, 1386, 1399], "regrid": [532, 850], "regular": [141, 257, 289, 290, 326, 333, 356, 507, 696, 697, 698, 702, 704, 705, 706, 707, 708, 709, 719, 720, 721, 775, 796, 840, 846, 850, 942, 969, 975, 1287, 1288, 1289, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1310, 1311, 1312, 1397], "reinterpret": [850, 1371], "rel": [41, 53, 54, 55, 149, 155, 156, 168, 169, 176, 177, 178, 179, 356, 477, 503, 505, 506, 761, 850, 1098, 1127, 1129, 1130, 1360, 1371], "relat": [140, 154, 207, 719, 720, 975, 1310, 1311, 1387], "releas": [65, 259, 356, 597, 850, 873, 895, 969, 1402], "release_year": 1380, "relev": 66, "reli": [259, 356, 895, 969], "reliabl": [98, 100], "remain": [53, 152, 153, 167, 227, 228, 231, 236, 251, 280, 284, 356, 452, 453, 513, 532, 533, 559, 652, 725, 726, 850, 880, 881, 887, 894, 901, 914, 969, 1069, 1070, 1126, 1137, 1154, 1155, 1184, 1249, 1316, 1317, 1371, 1386], "remaind": [414, 726, 1026, 1317, 1393], "remap": 102, "remot": [97, 152, 153, 158, 160, 969], "remov": [4, 47, 52, 152, 153, 165, 167, 211, 225, 236, 265, 311, 356, 507, 622, 728, 729, 730, 731, 732, 796, 850, 879, 887, 902, 969, 1319, 1320, 1321, 1322, 1323, 1346, 1371, 1401], "removes_pronoun": 721, "removesuffix": 622, "renam": [1, 43, 44, 136, 140, 152, 153, 157, 158, 160, 164, 167, 170, 171, 172, 176, 177, 178, 179, 190, 215, 244, 245, 259, 280, 288, 294, 295, 308, 319, 326, 330, 331, 335, 337, 356, 368, 427, 446, 503, 505, 506, 519, 614, 615, 621, 622, 623, 624, 626, 628, 629, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 746, 748, 756, 826, 827, 828, 832, 850, 867, 890, 891, 895, 917, 919, 920, 931, 938, 939, 945, 947, 969, 981, 1064, 1125, 1127, 1129, 1130, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1299, 1338, 1345, 1347, 1371, 1399], "rename_field": [725, 726, 1316, 1317], "render": [612, 924, 969], "render_as_str": 154, "reoconstruct": [291, 356], "reorder": [265, 356, 902, 969], "repeat": [55, 158, 170, 649, 651, 822, 841, 850, 1248, 1371], "repeat_bi": [850, 1371], "replac": [39, 40, 42, 152, 153, 167, 234, 235, 286, 320, 323, 330, 331, 356, 359, 458, 481, 596, 597, 653, 720, 721, 736, 850, 934, 938, 939, 969, 1075, 1102, 1250, 1269, 1271, 1311, 1312, 1327, 1371, 1376, 1392], "replace_al": [719, 1249, 1310, 1371], "replace_column": 356, "replace_strict": [652, 850, 1249, 1371], "replace_time_zon": [455, 461, 463, 1077, 1078, 1106], "replace_with": [721, 1312], "replic": [754, 850, 1353, 1371], "report": [154, 231, 356, 716, 1126, 1307, 1371], "repr": [140, 429, 433, 487, 1041, 1046, 1108], "repres": [38, 41, 42, 49, 72, 73, 75, 86, 90, 95, 133, 135, 137, 138, 139, 154, 280, 303, 304, 313, 314, 327, 334, 356, 361, 432, 517, 541, 542, 584, 590, 596, 694, 710, 715, 719, 720, 723, 734, 762, 765, 782, 794, 796, 810, 811, 812, 821, 826, 827, 831, 839, 846, 850, 927, 928, 936, 969, 975, 1045, 1269, 1285, 1301, 1306, 1310, 1311, 1314, 1325, 1351, 1361, 1371, 1399], "represent": [11, 45, 46, 72, 73, 75, 90, 140, 296, 312, 356, 429, 431, 432, 433, 457, 462, 465, 468, 469, 470, 471, 472, 473, 476, 478, 479, 483, 496, 497, 499, 611, 754, 850, 883, 899, 921, 969, 1041, 1044, 1045, 1046, 1047, 1074, 1079, 1082, 1084, 1085, 1089, 1090, 1091, 1093, 1094, 1097, 1099, 1100, 1104, 1117, 1118, 1120, 1348, 1353, 1371, 1390], "request": 35, "requested_schema": [210, 978], "requir": [1, 33, 34, 35, 40, 41, 58, 66, 138, 143, 154, 155, 176, 177, 178, 179, 192, 221, 227, 289, 313, 314, 315, 318, 356, 407, 429, 433, 503, 505, 506, 589, 597, 638, 662, 664, 666, 668, 670, 673, 675, 677, 681, 684, 733, 735, 736, 758, 774, 776, 780, 782, 825, 850, 865, 875, 880, 881, 882, 926, 937, 969, 1019, 1125, 1127, 1129, 1130, 1214, 1270, 1275, 1310, 1324, 1326, 1327, 1351, 1352, 1357, 1371], "require_al": 975, "require_http": 192, "rerais": [65, 873, 969], "rerun": [233, 356, 1133, 1371], "resampl": [245, 356, 891, 969], "reset": [4, 207], "reset_index": [138, 245, 356, 891, 969], "reshap": [280, 314, 356, 561, 777, 850, 1186, 1371], "resolv": [149, 236, 356, 458, 588, 874, 875, 882, 918, 937, 969], "resourc": [944, 973], "respect": [41, 152, 167, 265, 280, 356, 697, 707, 709, 721, 902, 969, 975, 1288, 1298, 1300, 1312, 1354, 1371], "respons": [155, 272, 356, 907, 969], "rest": [741, 1332, 1394], "restor": [207, 356, 359, 1371, 1376], "restore_default": 207, "restrict": [31, 726, 1317], "result": [14, 38, 45, 46, 47, 49, 50, 51, 52, 58, 66, 137, 138, 139, 154, 155, 157, 167, 170, 172, 173, 187, 233, 236, 245, 246, 259, 260, 261, 276, 280, 284, 288, 291, 296, 297, 299, 313, 314, 315, 326, 333, 335, 341, 356, 454, 482, 484, 487, 495, 503, 504, 505, 506, 510, 517, 526, 534, 546, 587, 588, 596, 597, 611, 638, 643, 645, 652, 653, 654, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 703, 720, 724, 725, 736, 757, 761, 784, 785, 789, 791, 792, 793, 794, 809, 810, 811, 822, 825, 826, 827, 829, 840, 841, 850, 868, 872, 877, 887, 891, 895, 896, 897, 901, 911, 914, 917, 921, 922, 923, 942, 945, 951, 962, 963, 969, 975, 984, 1103, 1105, 1108, 1116, 1127, 1129, 1130, 1133, 1134, 1149, 1156, 1171, 1212, 1221, 1240, 1242, 1249, 1250, 1251, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1272, 1274, 1294, 1315, 1316, 1327, 1351, 1352, 1360, 1371, 1381, 1387, 1394, 1399, 1400, 1402], "resultset": 154, "retain": [236, 284, 356, 887, 914, 969], "retri": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 197, 356, 969], "retriev": [192, 193, 197, 240, 313, 356, 387, 388, 553, 554, 744, 821, 999, 1000, 1178, 1179, 1335, 1349, 1371, 1387], "return": [1, 5, 6, 31, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 97, 110, 113, 121, 129, 132, 133, 135, 136, 137, 138, 139, 141, 142, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 189, 190, 197, 209, 212, 215, 217, 220, 221, 222, 226, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 243, 244, 245, 247, 248, 249, 253, 255, 256, 257, 258, 259, 262, 263, 264, 265, 267, 269, 274, 275, 276, 278, 279, 280, 285, 288, 289, 290, 291, 292, 296, 303, 306, 307, 313, 314, 315, 318, 319, 320, 321, 326, 329, 330, 331, 337, 339, 341, 342, 345, 350, 356, 369, 371, 374, 375, 376, 377, 378, 379, 382, 383, 387, 388, 389, 391, 393, 394, 405, 410, 411, 412, 413, 414, 415, 416, 426, 427, 431, 432, 437, 438, 439, 440, 441, 447, 448, 454, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 504, 509, 517, 520, 521, 523, 527, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 553, 554, 556, 561, 563, 565, 566, 567, 569, 576, 586, 587, 594, 596, 597, 609, 611, 612, 613, 618, 642, 644, 645, 647, 651, 652, 653, 654, 656, 657, 680, 681, 686, 687, 688, 695, 696, 698, 699, 700, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 722, 723, 724, 725, 726, 734, 738, 743, 750, 751, 752, 753, 755, 756, 757, 759, 760, 761, 764, 765, 770, 771, 772, 773, 774, 775, 776, 780, 781, 782, 783, 788, 789, 790, 791, 792, 793, 794, 797, 798, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 822, 825, 828, 829, 832, 833, 835, 836, 837, 838, 840, 841, 850, 865, 867, 870, 872, 873, 875, 876, 877, 882, 883, 889, 891, 892, 895, 899, 900, 901, 902, 910, 911, 915, 917, 921, 924, 930, 931, 932, 937, 938, 939, 947, 949, 951, 955, 960, 962, 969, 974, 975, 977, 979, 982, 983, 984, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1017, 1019, 1022, 1023, 1024, 1026, 1027, 1038, 1039, 1043, 1044, 1045, 1052, 1058, 1059, 1065, 1066, 1071, 1072, 1074, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1126, 1128, 1132, 1133, 1138, 1143, 1150, 1151, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1186, 1188, 1190, 1191, 1192, 1194, 1201, 1211, 1212, 1219, 1221, 1226, 1235, 1241, 1242, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1268, 1270, 1278, 1286, 1287, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1309, 1313, 1314, 1315, 1316, 1317, 1325, 1329, 1334, 1341, 1342, 1345, 1352, 1355, 1356, 1358, 1359, 1360, 1362, 1371, 1380, 1381, 1385, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1397, 1399, 1400, 1401, 1402], "return_as_str": [243, 356, 613], "return_dtyp": [41, 264, 356, 361, 596, 597, 652, 653, 764, 798, 811, 812, 850, 1221, 1249, 1250, 1371], "return_typ": [313, 318, 356], "returns_scalar": [149, 596, 597, 798, 812, 850], "reus": [64, 207, 872, 883, 911, 924, 969], "reusabl": 207, "rev": [261, 356, 897, 969], "revers": [215, 231, 319, 356, 427, 441, 442, 443, 444, 445, 622, 624, 626, 756, 777, 783, 850, 867, 931, 969, 1039, 1059, 1060, 1061, 1062, 1063, 1356, 1371, 1389, 1392], "reverse_": 624, "reverse_a": 624, "reverse_b": 624, "revert": [7, 9, 11], "rfc": 152, "rhap": [707, 709, 1300], "rhapsodi": [707, 709, 1300], "right": [9, 11, 16, 17, 19, 28, 41, 74, 152, 153, 176, 177, 178, 179, 245, 259, 260, 288, 325, 356, 447, 503, 504, 505, 506, 534, 577, 578, 579, 580, 645, 658, 662, 664, 666, 668, 670, 673, 675, 677, 681, 689, 776, 789, 790, 792, 793, 808, 809, 837, 838, 840, 850, 891, 895, 896, 917, 935, 969, 1065, 1127, 1128, 1129, 1130, 1156, 1202, 1203, 1204, 1205, 1242, 1270, 1281, 1371, 1387, 1392], "right_left": [259, 325, 356, 895, 935, 969], "right_on": [259, 260, 325, 356, 895, 896, 935, 969], "rightmost": [681, 850, 1270, 1371, 1394], "rld": [728, 730, 1321], "rle": [657, 850, 1254, 1371], "rle_id": [656, 850, 1371], "rle_id_a": [657, 850], "rle_id_ab": [657, 850], "rmm": 944, "rn": [152, 153, 167], "role": [33, 155], "roll": [245, 356, 454, 474, 475, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 778, 826, 827, 850, 891, 969, 1071, 1095, 1096, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1371], "rollback": [475, 1096], "rolled_forward": 454, "rollforward": [474, 1095], "rolling_kurtosi": [850, 1371], "rolling_map": [850, 1371], "rolling_max": [850, 1371], "rolling_max_bi": 850, "rolling_mean": [850, 1371], "rolling_mean_bi": 850, "rolling_median": [850, 1371], "rolling_median_bi": 850, "rolling_min": [850, 1371], "rolling_min_bi": 850, "rolling_quantil": [850, 1371], "rolling_quantile_bi": 850, "rolling_row_max": [662, 850], "rolling_row_mean": [664, 850], "rolling_row_median": [666, 850], "rolling_row_min": [668, 850], "rolling_row_quantil": [670, 850], "rolling_row_std": [673, 850], "rolling_row_sum": [675, 850], "rolling_row_var": [677, 850], "rolling_skew": [850, 1371], "rolling_std": [850, 1371], "rolling_std_bi": 850, "rolling_sum": [660, 850, 1256, 1371], "rolling_sum_bi": 850, "rolling_var": [850, 1371], "rolling_var_bi": 850, "rollinggroupbi": [288, 356], "ronaldo": [704, 1295], "root": [156, 168, 434, 610, 621, 622, 624, 626, 628, 629, 693, 849, 850, 1049, 1284, 1371, 1393], "rotat": [356, 359, 1371, 1376], "round": [21, 41, 60, 140, 154, 356, 435, 439, 516, 679, 752, 850, 1050, 1140, 1267, 1371, 1392], "round_sig_fig": [850, 1371], "round_str": 1103, "round_td": 1103, "rounded_corn": 21, "roundmod": [678, 850, 1266, 1371], "row": [15, 21, 26, 38, 39, 41, 47, 49, 52, 54, 58, 59, 61, 66, 107, 113, 121, 129, 136, 137, 138, 139, 140, 147, 148, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 176, 177, 183, 212, 213, 215, 216, 217, 227, 228, 233, 236, 238, 239, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 271, 272, 276, 280, 284, 288, 291, 292, 301, 307, 310, 312, 313, 318, 319, 321, 323, 324, 325, 332, 333, 337, 339, 341, 342, 350, 356, 360, 382, 383, 391, 406, 427, 428, 509, 517, 521, 527, 550, 551, 552, 561, 585, 588, 638, 639, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 690, 692, 703, 712, 751, 756, 770, 773, 779, 781, 798, 802, 804, 805, 807, 809, 824, 826, 827, 835, 850, 867, 870, 880, 881, 887, 888, 889, 891, 892, 895, 896, 897, 898, 900, 901, 906, 907, 914, 925, 930, 931, 932, 934, 935, 941, 942, 947, 949, 951, 952, 960, 969, 979, 994, 997, 998, 1003, 1016, 1132, 1133, 1143, 1150, 1175, 1176, 1177, 1186, 1210, 1237, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1282, 1294, 1303, 1342, 1371, 1380, 1387, 1389, 1400, 1401, 1402], "row_count_nam": [152, 153, 158, 160, 164, 167, 170, 171, 172], "row_count_offset": [152, 153, 158, 160, 164, 167, 170, 171, 172], "row_group": [164, 172], "row_group_s": [47, 52, 356, 969], "row_height": [41, 356], "row_idx": 213, "row_index": [41, 356], "row_index_nam": [152, 153, 158, 160, 162, 164, 167, 170, 171, 172], "row_index_offset": [152, 153, 158, 160, 162, 164, 167, 170, 171, 172], "row_nr": [332, 356, 941, 969], "row_tot": [41, 356], "rowname_col": [356, 360], "rows_by_kei": [257, 290, 309, 356], "rowserror": [289, 356], "rowtotalsdefinit": [41, 356], "rtol": [176, 177, 178, 179], "rtrim": 1392, "ru": 1394, "rule": [152, 164, 167, 172, 238, 265, 356, 697, 721, 736, 902, 969, 1288, 1312, 1327], "run": [49, 50, 51, 52, 64, 65, 73, 97, 132, 154, 183, 186, 187, 188, 244, 259, 262, 264, 295, 321, 331, 342, 356, 432, 446, 560, 596, 597, 656, 657, 715, 828, 850, 872, 873, 883, 890, 895, 901, 906, 911, 913, 920, 924, 932, 939, 944, 969, 973, 975, 1045, 1064, 1185, 1221, 1253, 1254, 1306, 1371, 1399, 1402], "runtim": 973, "runtimeerror": [314, 356, 1351, 1371], "rust": [38, 47, 49, 103, 115, 149, 157, 158, 160, 164, 264, 342, 356, 706, 969, 973, 1221, 1297, 1371], "s1": [57, 98, 100, 178, 179, 238, 356, 776, 780, 782, 1018, 1124, 1125, 1145, 1170, 1180, 1213, 1233, 1245, 1362, 1371], "s2": [1, 57, 98, 100, 178, 179, 238, 356, 776, 780, 782, 1018, 1051, 1068, 1124, 1125, 1145, 1161, 1170, 1180, 1213, 1227, 1233, 1245, 1362, 1371], "s3": [1, 40, 156, 168, 169, 172, 173, 356, 913, 969, 1018, 1213, 1371], "s_": 487, "s_bar": 1389, "s_dt": [487, 1394, 1395], "s_dt1": 1394, "s_dt2": 1394, "s_dtm": 487, "s_foo": 1389, "s_from_str_repr": [1348, 1371], "s_head_5": 710, "s_head_n": 710, "s_tail_5": 734, "s_tail_n": 734, "s_td": 487, "s_tm": [487, 1394, 1395], "safe": [650, 850, 1246, 1371], "sale": [638, 850], "salesforce_format": 200, "sam": 13, "same": [21, 40, 41, 55, 57, 58, 64, 65, 66, 98, 100, 116, 158, 167, 176, 177, 178, 179, 181, 207, 213, 227, 228, 234, 235, 236, 244, 260, 264, 280, 284, 290, 291, 302, 321, 330, 331, 335, 342, 356, 365, 372, 405, 431, 452, 453, 487, 511, 512, 513, 517, 519, 520, 523, 587, 601, 607, 638, 652, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 685, 692, 703, 714, 746, 840, 846, 850, 872, 873, 880, 881, 885, 886, 887, 890, 896, 899, 901, 914, 924, 926, 932, 938, 939, 945, 969, 975, 980, 1017, 1044, 1069, 1070, 1075, 1108, 1135, 1136, 1212, 1221, 1249, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1294, 1305, 1362, 1371, 1385, 1387, 1395], "samoa": [455, 1072], "sampl": [152, 153, 342, 356, 685, 689, 808, 809, 850, 952, 1281, 1371, 1388], "sample_s": [152, 153], "sampled_from": 1402, "sandwich": [241, 356], "sat": [356, 359], "satisfi": [534, 850, 1156, 1371], "saturdai": [245, 356, 891, 969], "save": [2, 3, 6, 245, 260, 288, 326, 356, 455, 463, 477, 482, 495, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 794, 837, 838, 846, 850, 862, 891, 896, 917, 969, 1080, 1098, 1103, 1116], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [149, 212, 213, 255, 264, 289, 299, 356, 432, 596, 681, 683, 710, 715, 723, 734, 798, 810, 812, 850, 923, 969, 979, 1045, 1170, 1270, 1274, 1301, 1306, 1314, 1325, 1371], "scale": [29, 74, 231, 356, 415, 597, 642, 678, 737, 850, 975, 1126, 1328, 1371], "scale_negative_even": [642, 850], "scan": [56, 136, 139, 152, 153, 154, 157, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 197, 356, 712, 862, 969, 1303], "scan_csv": [49, 50, 51, 52, 152, 153, 969], "scan_ipc": 158, "scan_ndjson": 162, "scan_parquet": [53, 54, 55, 164, 173, 913, 969], "scan_pyarrow_dataset": [164, 172], "scan_tabl": 205, "scancastopt": 172, "scatter": [356, 359, 1371, 1376], "scenario": 1371, "schedul": [65, 873, 969], "schema": [0, 1, 15, 29, 36, 39, 40, 56, 59, 60, 61, 66, 97, 107, 124, 125, 133, 135, 136, 137, 139, 147, 148, 152, 153, 154, 155, 157, 159, 161, 162, 163, 164, 166, 167, 170, 171, 172, 193, 195, 196, 197, 201, 203, 217, 218, 219, 225, 229, 231, 258, 262, 264, 265, 272, 276, 285, 314, 318, 356, 361, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 461, 587, 588, 597, 608, 609, 612, 613, 623, 625, 627, 712, 764, 832, 850, 862, 870, 871, 874, 875, 879, 882, 901, 902, 907, 915, 937, 952, 969, 975, 1054, 1303, 1371, 1380], "schema_mod": [40, 356], "schema_overrid": [133, 135, 136, 137, 138, 139, 152, 153, 154, 155, 157, 161, 162, 163, 167, 171, 258, 314, 356, 678, 850, 969, 975], "schemadefinit": [133, 135, 136, 137, 139, 161, 162, 171, 356, 969], "schemadict": [89, 97, 133, 135, 136, 137, 138, 139, 147, 152, 154, 155, 157, 163, 164, 167, 170, 172, 265, 356, 361, 609, 612, 613, 832, 901, 902, 952, 969], "schemaerror": [265, 356, 902, 969], "schemainitdatatyp": 974, "scheme": [53, 54, 55], "schindler": 1380, "scientif": [12, 38, 49, 356, 969], "scikit": [318, 356], "scipi": [546, 689, 850, 1171, 1281, 1371], "scope": [34, 35, 207, 861, 975, 1383, 1386, 1399], "score": [41, 280, 356], "script": [356, 359, 1371, 1376], "scroll": [41, 356], "sdiff": 579, "sdk": 192, "search": [260, 356, 588, 697, 707, 709, 721, 896, 926, 969, 1153, 1288, 1298, 1300, 1312, 1371], "search_sort": [850, 1371], "searchsortedsid": [681, 850, 1270, 1371], "searchstrategi": [180, 182, 183, 184, 185, 187], "season": [719, 720], "sec": [1395, 1402], "second": [38, 49, 162, 167, 170, 171, 176, 177, 178, 179, 245, 260, 288, 326, 356, 465, 469, 471, 472, 476, 477, 480, 482, 487, 494, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 719, 720, 733, 736, 791, 792, 793, 794, 836, 837, 838, 850, 891, 896, 917, 969, 975, 1098, 1101, 1103, 1115, 1116, 1128, 1310, 1311, 1324, 1327, 1371, 1394, 1395, 1400, 1402], "second_part": [725, 726, 1316, 1317], "seconds_diff": 494, "secret": [169, 172], "section": [280, 356, 696, 704, 705, 708, 719, 720, 789, 790, 792, 793, 837, 838, 973, 1287, 1295, 1296, 1299, 1310, 1311], "secur": [449, 850, 878, 969], "see": [38, 40, 41, 43, 44, 47, 49, 50, 51, 52, 73, 147, 149, 154, 155, 156, 157, 158, 160, 162, 164, 167, 168, 169, 170, 171, 172, 176, 177, 178, 179, 183, 187, 197, 209, 221, 236, 245, 259, 279, 280, 284, 325, 356, 360, 420, 421, 423, 424, 436, 487, 512, 546, 596, 689, 696, 704, 705, 708, 710, 719, 720, 734, 789, 790, 792, 793, 824, 837, 838, 846, 850, 887, 891, 914, 935, 944, 969, 973, 975, 977, 1032, 1033, 1035, 1036, 1047, 1053, 1108, 1171, 1281, 1287, 1295, 1296, 1299, 1301, 1310, 1311, 1325, 1371, 1402], "seed": [97, 174, 246, 292, 356, 526, 576, 648, 680, 685, 850, 1149, 1201, 1244, 1268, 1277, 1371], "seed_1": [246, 356, 526, 850, 1149, 1371], "seed_2": [246, 356, 526, 850, 1149, 1371], "seed_3": [246, 356, 526, 850, 1149, 1371], "seen": [487, 1108], "seen_group": 153, "select": [1, 8, 39, 49, 50, 51, 52, 58, 59, 60, 61, 64, 65, 97, 104, 150, 152, 153, 154, 155, 156, 158, 160, 164, 167, 169, 173, 182, 212, 214, 255, 256, 260, 264, 276, 279, 289, 295, 301, 303, 316, 322, 326, 333, 356, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 391, 396, 397, 398, 403, 404, 405, 406, 407, 408, 410, 413, 416, 417, 422, 425, 426, 427, 430, 434, 435, 437, 438, 439, 440, 446, 448, 450, 451, 452, 453, 456, 458, 459, 468, 474, 475, 477, 481, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 503, 505, 506, 507, 508, 509, 510, 514, 516, 521, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 539, 545, 546, 547, 549, 550, 560, 561, 588, 591, 592, 593, 594, 596, 597, 598, 599, 600, 604, 616, 618, 620, 621, 623, 625, 627, 630, 631, 635, 636, 637, 638, 640, 641, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 659, 660, 671, 678, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 703, 704, 705, 706, 707, 708, 709, 711, 716, 733, 744, 746, 747, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 765, 767, 769, 772, 773, 774, 777, 778, 780, 781, 782, 786, 793, 794, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 813, 815, 817, 818, 820, 821, 824, 825, 829, 830, 831, 832, 833, 835, 839, 846, 850, 865, 866, 872, 873, 875, 883, 896, 910, 911, 920, 924, 925, 927, 933, 940, 942, 944, 969, 975, 979, 1102, 1142, 1185, 1269, 1271, 1282, 1300, 1304, 1324, 1371, 1380, 1381, 1382, 1383, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401], "select_from": [182, 185, 187], "select_seq": [356, 969], "selector": [0, 41, 216, 225, 227, 228, 232, 271, 278, 280, 302, 311, 313, 318, 321, 323, 324, 356, 360, 487, 507, 604, 850, 862, 869, 879, 880, 881, 884, 906, 926, 932, 934, 969], "selectortyp": [41, 356, 975], "self": [1, 59, 60, 61, 62, 64, 303, 334, 356, 829, 850, 872, 883, 911, 924, 927, 940, 969, 984, 1030, 1031, 1032, 1033, 1035, 1036, 1040, 1054, 1059, 1133, 1137, 1152, 1219, 1221, 1234, 1238, 1239, 1245, 1248, 1249, 1250, 1269, 1271, 1272, 1283, 1359, 1362, 1371, 1382, 1383, 1384, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1399], "semi": [148, 259, 356, 895, 969, 1387], "semigraph": 21, "sens": [152, 158, 160, 272, 326, 356, 638, 850, 907, 969], "sensit": [696, 705, 708, 719, 720, 1287, 1296, 1299, 1310, 1311], "sep": 148, "separ": [9, 11, 25, 28, 37, 38, 49, 142, 148, 151, 152, 153, 157, 167, 278, 280, 311, 320, 322, 356, 391, 394, 487, 561, 567, 597, 703, 779, 784, 785, 850, 924, 933, 969, 1003, 1006, 1108, 1186, 1192, 1294, 1340, 1346, 1371, 1394], "seq": 27, "seq1": 27, "seq2": 27, "sequenc": [41, 47, 52, 53, 55, 58, 89, 133, 135, 136, 137, 139, 143, 148, 152, 153, 154, 157, 161, 162, 163, 167, 171, 181, 182, 183, 184, 185, 213, 215, 223, 232, 233, 259, 260, 271, 276, 278, 279, 280, 291, 302, 311, 313, 318, 319, 323, 324, 325, 326, 356, 406, 427, 447, 520, 538, 588, 596, 642, 645, 652, 653, 692, 721, 731, 732, 746, 756, 773, 784, 785, 798, 800, 808, 809, 811, 812, 821, 824, 830, 850, 867, 877, 884, 895, 896, 906, 910, 926, 931, 934, 935, 969, 975, 1018, 1039, 1065, 1066, 1133, 1213, 1242, 1249, 1250, 1312, 1338, 1356, 1371], "sequenti": [64, 295, 331, 356, 872, 883, 911, 920, 924, 939, 969], "ser": [1077, 1078, 1106], "seri": [0, 1, 12, 26, 41, 57, 59, 60, 61, 62, 66, 67, 76, 89, 98, 100, 109, 133, 135, 138, 140, 149, 178, 179, 183, 212, 213, 226, 236, 238, 240, 242, 245, 246, 249, 250, 251, 252, 254, 256, 267, 269, 274, 284, 286, 288, 292, 306, 309, 312, 314, 316, 317, 336, 356, 372, 383, 406, 410, 429, 430, 431, 432, 433, 435, 481, 510, 513, 516, 520, 521, 531, 532, 533, 536, 538, 539, 541, 542, 543, 544, 555, 561, 563, 588, 594, 596, 597, 648, 649, 650, 651, 652, 653, 658, 660, 671, 682, 684, 710, 721, 733, 734, 735, 736, 740, 744, 755, 760, 770, 774, 776, 777, 780, 782, 784, 785, 789, 790, 792, 793, 798, 800, 804, 805, 808, 809, 810, 811, 812, 822, 824, 825, 828, 829, 832, 837, 838, 841, 850, 862, 887, 891, 894, 914, 917, 946, 969, 1363, 1365, 1367, 1370, 1372, 1375, 1376, 1377, 1378, 1379, 1381, 1383, 1394, 1399, 1402], "serial": [45, 46, 224, 356, 449, 615, 850, 878, 969], "serializ": [149, 850], "serializationformat": [224, 296, 356, 449, 611, 850, 878, 921, 969], "seriesplot": [1371, 1376], "server": [39, 154, 155, 356], "servic": 33, "service_account": [156, 168], "service_account_json_absolute_path": [156, 168], "session": 154, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 38, 39, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 58, 59, 64, 65, 70, 73, 74, 76, 134, 135, 136, 139, 149, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 197, 207, 211, 220, 227, 228, 237, 240, 244, 246, 257, 259, 260, 269, 271, 290, 292, 294, 296, 301, 306, 311, 313, 314, 318, 320, 321, 323, 324, 325, 330, 356, 359, 369, 371, 393, 394, 406, 418, 420, 421, 423, 424, 436, 447, 480, 481, 498, 526, 538, 563, 565, 567, 576, 577, 578, 579, 580, 582, 588, 596, 597, 604, 605, 611, 642, 645, 652, 653, 659, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 680, 685, 689, 690, 695, 711, 712, 719, 720, 723, 728, 729, 730, 731, 732, 733, 735, 736, 740, 761, 765, 767, 770, 774, 776, 779, 780, 782, 789, 790, 791, 792, 793, 794, 798, 804, 805, 808, 809, 810, 816, 822, 825, 826, 827, 828, 832, 834, 837, 838, 840, 841, 850, 862, 872, 873, 880, 883, 890, 895, 896, 901, 906, 911, 919, 921, 924, 925, 932, 934, 935, 938, 943, 952, 969, 982, 983, 1005, 1006, 1018, 1023, 1030, 1032, 1033, 1035, 1036, 1053, 1065, 1101, 1102, 1119, 1139, 1149, 1161, 1168, 1188, 1190, 1192, 1201, 1202, 1203, 1204, 1205, 1207, 1213, 1221, 1242, 1249, 1250, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1268, 1269, 1270, 1277, 1281, 1282, 1286, 1302, 1303, 1310, 1311, 1314, 1319, 1320, 1321, 1324, 1326, 1327, 1331, 1351, 1360, 1371, 1390, 1398, 1402], "set_": 207, "set_auto_structifi": [294, 330, 356, 919, 938, 969], "set_decimal_separ": 28, "set_environ": 186, "set_except": [65, 873, 969], "set_fmt_float": 31, "set_fmt_str_length": [697, 707, 709, 721, 1288, 1300, 1312], "set_index": [245, 356, 891, 969], "set_legend": [41, 356], "set_sort": [288, 326, 356, 658, 850, 917, 969, 1371], "set_stat": 31, "set_streaming_chunk_s": [872, 969], "set_styl": [41, 356], "set_tbl_column_data_type_inlin": 25, "set_tbl_format": [7, 58], "set_tbl_row": 207, "set_tbl_width_char": 721, "set_thousands_separ": 9, "set_titl": [41, 356], "set_verbos": 207, "setosa": [356, 359], "setup": 1402, "seventeen": [530, 850], "sever": [133, 135, 136, 137, 139, 161, 162, 171, 356, 913, 969, 1402], "sfu": 155, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 57, 58, 59, 60, 61, 62, 66, 67, 85, 89, 97, 98, 100, 107, 126, 133, 134, 135, 136, 137, 138, 139, 140, 148, 152, 161, 162, 167, 173, 178, 180, 183, 187, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 240, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 292, 294, 296, 299, 301, 302, 303, 304, 305, 306, 307, 309, 311, 312, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 616, 617, 618, 619, 620, 621, 622, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 846, 850, 865, 866, 867, 869, 870, 872, 873, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 940, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 969, 974, 975, 979, 980, 981, 984, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1124, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1140, 1142, 1143, 1145, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1226, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1242, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1274, 1275, 1277, 1278, 1279, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1337, 1340, 1342, 1343, 1344, 1346, 1347, 1348, 1353, 1355, 1356, 1357, 1358, 1359, 1360, 1362, 1371, 1380, 1381, 1382, 1383, 1385, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1399, 1400], "share": [176, 177, 178, 179, 231, 356, 1126, 1371], "shawshank": 1380, "sheet": [41, 157, 163, 356], "sheet1": [41, 356], "sheet_id": [157, 163], "sheet_nam": [157, 163], "sheet_zoom": [41, 356], "sheetnam": [157, 163], "shift": [245, 356, 409, 450, 518, 558, 639, 778, 850, 891, 969, 1021, 1067, 1141, 1183, 1237, 1371], "short": [176, 178, 414, 1026], "shorten": [176, 178], "shorter": [152, 153, 167, 588, 804, 805], "shorthand": [356, 359, 840, 1371, 1376], "should": [11, 39, 41, 47, 49, 50, 51, 52, 66, 97, 133, 135, 137, 139, 147, 148, 157, 161, 162, 167, 169, 171, 173, 180, 181, 183, 187, 213, 225, 257, 259, 260, 264, 289, 290, 291, 302, 310, 311, 322, 342, 356, 367, 446, 449, 454, 498, 504, 507, 541, 542, 560, 597, 611, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 689, 692, 719, 720, 737, 761, 773, 775, 794, 796, 810, 812, 826, 827, 846, 850, 872, 878, 879, 883, 895, 896, 901, 911, 921, 924, 926, 933, 969, 975, 1064, 1071, 1119, 1128, 1185, 1221, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1270, 1281, 1310, 1311, 1328, 1360, 1371, 1381], "show": [31, 41, 223, 228, 243, 262, 277, 356, 528, 612, 850, 877, 911, 924, 969, 1151, 1371, 1385, 1398], "show_graph": [262, 356, 969], "show_plot": [911, 969], "shrink": [300, 356, 684, 850, 1275, 1276, 1371], "shrink_dtyp": [850, 1371], "shrink_to_fit": [356, 1371], "shuffl": [174, 292, 318, 342, 356, 576, 680, 850, 952, 1201, 1268, 1371], "side": [41, 149, 245, 288, 356, 534, 577, 578, 579, 580, 658, 662, 664, 666, 668, 670, 673, 675, 677, 681, 789, 790, 792, 793, 808, 809, 837, 838, 850, 891, 917, 969, 1156, 1202, 1203, 1204, 1205, 1270, 1371], "sign": [72, 73, 75, 80, 81, 82, 83, 84, 90, 477, 650, 719, 720, 743, 850, 975, 1098, 1246, 1310, 1311, 1334, 1371, 1392], "sign_x": 1393, "signed_integ": 975, "signific": [172, 257, 264, 356, 420, 421, 423, 424, 597, 679, 850, 1032, 1033, 1035, 1036, 1221, 1267, 1371], "significantli": [157, 264, 342, 356, 1221, 1371, 1402], "silenc": 107, "silent": [56, 172, 738, 1329], "similar": [37, 47, 56, 151, 189, 213, 238, 260, 299, 321, 323, 356, 401, 484, 487, 581, 638, 683, 748, 807, 840, 850, 887, 896, 923, 932, 934, 969, 1013, 1105, 1108, 1206, 1274, 1371], "similarli": [41, 136, 245, 260, 288, 326, 356, 477, 482, 495, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 837, 838, 850, 891, 896, 917, 969, 1098, 1103, 1116], "simpl": [41, 276, 356], "simpler": [975, 1310], "simpli": [167, 784, 798], "simplifi": [64, 872, 883, 911, 924, 969], "simplify_express": [64, 872, 883, 911, 924, 943, 969], "sin": [850, 1371, 1392], "sinc": [40, 64, 67, 72, 73, 90, 152, 153, 154, 156, 162, 164, 167, 168, 170, 171, 172, 180, 181, 182, 183, 187, 190, 214, 271, 314, 332, 337, 356, 461, 464, 498, 519, 596, 615, 652, 695, 703, 763, 772, 780, 800, 850, 866, 872, 883, 906, 911, 924, 926, 940, 941, 947, 969, 1078, 1081, 1087, 1088, 1119, 1148, 1249, 1286, 1294, 1351, 1371], "sind": 1392, "sine": [376, 377, 596, 687, 688, 850, 988, 989, 1279, 1280, 1371, 1396], "singl": [41, 47, 58, 65, 66, 77, 151, 152, 153, 154, 155, 156, 157, 164, 167, 168, 170, 181, 213, 216, 225, 226, 227, 228, 233, 240, 246, 255, 264, 278, 289, 291, 302, 313, 314, 356, 390, 432, 436, 454, 477, 520, 523, 526, 557, 563, 596, 597, 649, 652, 654, 656, 692, 695, 710, 711, 715, 723, 734, 763, 773, 777, 778, 779, 805, 809, 811, 812, 830, 838, 840, 846, 850, 869, 879, 880, 881, 926, 969, 975, 1002, 1045, 1053, 1071, 1098, 1133, 1149, 1182, 1188, 1245, 1249, 1251, 1253, 1286, 1301, 1302, 1306, 1314, 1325, 1345, 1351, 1371, 1382], "singlecolselector": 212, "singleindexselector": [212, 979], "sinh": [850, 1371], "sink": 863, "sink_": [53, 55], "sink_csv": [53, 54, 55, 969], "sink_ipc": 969, "sink_ndjson": 969, "sink_parquet": [53, 143, 969], "site_id": [356, 360], "six": [681, 850], "size": [15, 47, 52, 54, 147, 152, 153, 154, 180, 181, 182, 183, 187, 189, 231, 324, 356, 495, 588, 654, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 770, 804, 805, 826, 827, 850, 872, 969, 1116, 1126, 1251, 1255, 1262, 1371, 1402], "sizeunit": [231, 356, 415, 1027, 1126, 1371], "skew": [671, 850, 1262, 1371], "skewtest": [689, 850, 1281, 1371], "skip": [152, 153, 157, 164, 167, 172, 260, 324, 356, 896, 969, 1221, 1371, 1387], "skip_empty_lin": 157, "skip_lin": [152, 167], "skip_nul": [597, 850, 1221, 1371], "skip_row": [152, 153, 167], "skip_rows_after_head": [152, 153, 167], "sklearn": [318, 356], "slice": [59, 64, 149, 231, 247, 258, 307, 356, 566, 586, 597, 608, 610, 660, 661, 663, 665, 667, 669, 672, 674, 676, 710, 734, 850, 865, 872, 883, 901, 911, 924, 969, 1126, 1150, 1191, 1211, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1301, 1325, 1342, 1371, 1394], "slice_pushdown": [64, 872, 883, 901, 911, 924, 943, 969], "slide": [446, 850, 1064, 1371], "slightli": [49, 50, 51, 52, 103, 517, 850, 969, 1395], "slot": [446, 450, 558, 850, 1064, 1067, 1183, 1371], "slow": [119, 136, 139, 152, 153, 154, 157, 161, 162, 163, 167, 171, 172, 356, 446, 597, 660, 712, 850, 952, 969, 1064, 1256, 1303, 1371], "slower": [137, 139, 157, 244, 264, 278, 326, 342, 356, 597, 812, 850, 890, 952, 969, 1221, 1371], "small": [12, 155, 482, 969, 1402], "smaller": [47, 52, 54, 231, 356, 969, 1126, 1371], "smallest": [215, 319, 356, 426, 427, 756, 850, 867, 931, 969, 1038, 1039, 1356, 1371, 1388, 1391], "smooth": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "snappi": [36, 47, 52, 356, 969], "snapshot": 169, "snapshot_id": 169, "snowflak": [154, 155], "snowflake_format": 200, "snowi": [719, 720], "so": [1, 41, 155, 157, 167, 189, 207, 243, 245, 261, 280, 288, 356, 383, 393, 449, 517, 534, 565, 588, 597, 658, 719, 720, 721, 728, 729, 730, 744, 850, 865, 878, 891, 897, 917, 969, 975, 1005, 1190, 1310, 1311, 1312, 1319, 1320, 1321], "softwar": [37, 151, 356], "solut": [39, 356], "solv": [97, 147], "some": [15, 31, 41, 47, 52, 57, 66, 100, 136, 152, 153, 154, 167, 211, 228, 280, 291, 314, 356, 360, 719, 720, 846, 913, 969, 1161, 1310, 1311, 1371, 1402], "some_account": [705, 1296], "some_t": 1401, "someth": [596, 850], "sometim": [794, 849], "somewher": [705, 1296], "sort": [53, 54, 55, 58, 59, 215, 245, 260, 272, 279, 280, 288, 297, 319, 326, 339, 350, 356, 382, 426, 427, 504, 513, 597, 638, 658, 681, 682, 692, 755, 756, 761, 763, 773, 789, 792, 812, 850, 867, 883, 891, 896, 907, 910, 911, 917, 922, 924, 931, 949, 960, 969, 975, 994, 1038, 1039, 1128, 1168, 1270, 1272, 1355, 1356, 1357, 1360, 1371, 1387, 1400, 1402], "sort_bi": 850, "sort_column": [280, 356], "sorted": [260, 356, 896, 969], "sorted_asc": [1139, 1371], "sorted_desc": [1139, 1371], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 846, 850, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 969, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1337, 1338, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1371, 1376, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1399], "source_ac": 140, "source_actor_id": 140, "source_alia": [40, 356], "source_cha": 140, "source_channel_id": 140, "south": 76, "space": [21, 245, 356, 487, 808, 809, 891, 969, 975, 1108], "spam": [268, 356, 705, 1296], "span": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "spanner": [356, 360], "spark": [47, 356], "sparklin": [41, 356], "speak": [689, 850, 1281, 1371], "spearman": 780, "speci": [356, 359], "special": [39, 55, 152, 153, 155, 167, 318, 333, 356, 660, 705, 719, 720, 850, 942, 969, 1221, 1256, 1296, 1310, 1311, 1371], "specif": [1, 31, 40, 41, 43, 44, 50, 103, 133, 135, 137, 139, 148, 152, 155, 156, 157, 161, 162, 163, 168, 169, 171, 213, 216, 257, 259, 265, 308, 313, 356, 361, 484, 487, 733, 735, 736, 740, 761, 850, 869, 895, 902, 969, 974, 975, 1105, 1108, 1324, 1326, 1327, 1331, 1345, 1349, 1360, 1371, 1387, 1399, 1401, 1402], "specifi": [10, 38, 39, 40, 41, 47, 49, 58, 104, 107, 110, 125, 128, 152, 157, 163, 164, 167, 172, 184, 193, 195, 196, 197, 213, 215, 216, 231, 232, 235, 240, 244, 245, 259, 260, 278, 280, 288, 289, 291, 294, 295, 299, 302, 313, 319, 322, 330, 331, 335, 356, 427, 436, 480, 487, 503, 505, 506, 507, 512, 638, 651, 653, 661, 663, 665, 667, 669, 672, 674, 676, 683, 692, 748, 756, 773, 776, 777, 778, 779, 789, 790, 792, 793, 794, 796, 828, 832, 837, 838, 846, 850, 867, 869, 884, 886, 890, 891, 895, 896, 917, 919, 920, 923, 926, 931, 933, 938, 939, 945, 969, 975, 1039, 1053, 1101, 1108, 1126, 1127, 1129, 1130, 1136, 1248, 1250, 1274, 1349, 1356, 1371, 1387, 1394, 1401], "speed": [52, 297, 356, 597, 850, 922, 969, 973, 1402], "speedup": [58, 172, 257, 264, 356, 597, 850, 1221, 1371], "split": [1, 41, 47, 53, 54, 55, 59, 258, 356, 703, 725, 726, 1294, 1316, 1317, 1394], "split_by_column_dtyp": 61, "split_inclus": 724, "split_part": 1392, "splitfram": [1, 59], "spreadsheet": [37, 151, 157, 163, 280, 356], "spring": [719, 720], "sql": [0, 39, 122, 123, 131, 154, 155, 259, 299, 356, 401, 581, 683, 807, 830, 850, 862, 923, 969, 1013, 1206, 1274, 1371, 1380, 1381, 1383, 1385, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1400, 1401], "sql_expr": 1399, "sqlalchemi": [39, 154, 175, 356], "sqlcontext": [303, 356, 829, 927, 969, 1398], "sqldw_format": 200, "sqlite": [39, 154, 356], "sqrt": [597, 689, 748, 850, 1221, 1281, 1371, 1392], "sqrt_x": 1393, "squar": [1, 62, 342, 546, 654, 693, 850, 952, 1171, 1251, 1284, 1371, 1393], "st": [33, 1402], "stabil": [246, 356, 526, 850, 1149, 1371], "stabl": [164, 209, 221, 223, 224, 246, 292, 296, 303, 356, 449, 526, 593, 611, 754, 850, 877, 878, 906, 921, 926, 927, 969, 977, 1149, 1353, 1371], "stack": [66, 249, 328, 356, 359, 1381], "stage": [924, 969], "stai": [596, 685, 850], "standalon": [181, 975], "standard": [7, 11, 41, 154, 304, 313, 318, 356, 468, 505, 672, 673, 689, 694, 713, 716, 831, 846, 850, 865, 928, 969, 1085, 1124, 1129, 1233, 1281, 1285, 1304, 1307, 1371, 1388, 1402], "standardis": [41, 356], "start": [41, 49, 50, 51, 52, 55, 150, 152, 153, 155, 157, 158, 160, 162, 163, 164, 167, 170, 171, 172, 189, 239, 244, 245, 262, 301, 326, 332, 333, 356, 410, 413, 416, 429, 433, 454, 462, 466, 473, 478, 482, 495, 496, 507, 521, 564, 582, 657, 662, 664, 666, 668, 670, 673, 675, 677, 690, 696, 701, 705, 709, 718, 723, 727, 728, 730, 731, 734, 743, 770, 775, 784, 788, 789, 790, 791, 792, 793, 796, 798, 804, 805, 808, 809, 837, 838, 840, 846, 850, 889, 890, 891, 911, 925, 941, 942, 969, 975, 1028, 1041, 1046, 1071, 1073, 1076, 1079, 1081, 1082, 1089, 1091, 1093, 1094, 1097, 1099, 1103, 1107, 1116, 1117, 1143, 1189, 1207, 1254, 1282, 1292, 1296, 1300, 1309, 1314, 1318, 1319, 1321, 1325, 1334, 1371, 1387, 1394, 1402], "start_bi": [245, 356, 891, 969], "startbi": [245, 356, 891, 969], "starts_a": 1394, "starts_with": [59, 280, 356, 360, 410, 413, 429, 604, 696, 701, 829, 927, 969, 975, 1041, 1292, 1392], "starts_with_expr": 416, "starts_with_lit": 416, "startup": [313, 356], "stat": [546, 689, 850, 1171, 1281, 1371], "state": [4, 5, 115, 784, 862, 1399], "statement": [638, 840, 850, 1385, 1400], "static": [48, 95, 952], "statist": [47, 52, 152, 153, 164, 170, 172, 223, 356, 505, 506, 546, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 689, 850, 877, 969, 1066, 1129, 1130, 1171, 1255, 1262, 1281, 1371], "std": [223, 356, 672, 673, 850, 877, 969, 1066, 1263, 1371], "std_dev": [41, 356], "stddev": 1392, "stddev_samp": 1388, "stdev": [41, 356, 1388], "stdev_samp": 1388, "stdout": [207, 243, 356, 613], "step": [324, 356, 517, 770, 804, 805, 850, 865], "steve": [272, 356, 907, 969], "still": [154, 155], "stock": [356, 359], "stop": [147, 150, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 662, 664, 666, 668, 670, 673, 675, 677, 850, 865, 1073, 1076, 1081, 1082, 1089, 1091, 1093, 1097, 1103, 1107], "storag": [38, 40, 43, 47, 49, 50, 51, 52, 152, 156, 158, 160, 162, 164, 167, 168, 169, 170, 171, 172, 197, 356, 969], "storage_loc": [198, 201, 202], "storage_opt": [38, 40, 43, 47, 49, 50, 51, 52, 152, 156, 158, 160, 162, 164, 167, 168, 169, 170, 171, 172, 197, 356, 969], "store": [40, 169, 233, 257, 290, 356, 430, 656, 850, 1042, 1133, 1253, 1371], "store_id": [638, 850], "str": [1, 2, 3, 5, 6, 9, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 73, 76, 77, 99, 101, 132, 133, 134, 135, 136, 137, 139, 140, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 180, 181, 183, 186, 187, 188, 192, 193, 195, 196, 197, 198, 199, 201, 202, 207, 213, 215, 216, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 236, 237, 238, 240, 241, 243, 244, 245, 247, 249, 250, 252, 254, 255, 257, 259, 260, 261, 263, 265, 266, 268, 270, 271, 272, 273, 276, 278, 280, 282, 284, 285, 286, 287, 288, 289, 290, 292, 296, 297, 301, 302, 303, 304, 305, 307, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 366, 367, 368, 389, 394, 406, 410, 411, 412, 413, 416, 417, 422, 425, 427, 429, 430, 433, 441, 447, 449, 451, 459, 477, 481, 482, 484, 487, 495, 504, 507, 513, 515, 519, 520, 523, 531, 534, 555, 565, 566, 567, 582, 586, 588, 597, 608, 610, 611, 612, 613, 615, 622, 623, 624, 625, 626, 627, 628, 629, 635, 638, 642, 645, 651, 652, 653, 655, 657, 658, 662, 664, 666, 668, 670, 673, 675, 677, 684, 691, 692, 744, 745, 746, 747, 756, 761, 763, 764, 765, 766, 767, 768, 769, 771, 772, 778, 779, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 846, 850, 857, 867, 869, 872, 873, 875, 877, 878, 879, 880, 881, 883, 884, 887, 890, 891, 893, 895, 896, 897, 902, 906, 907, 910, 911, 914, 915, 916, 917, 921, 922, 924, 925, 926, 927, 931, 932, 933, 934, 935, 940, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 969, 974, 975, 981, 1006, 1018, 1024, 1040, 1041, 1042, 1046, 1065, 1066, 1076, 1098, 1102, 1103, 1105, 1108, 1116, 1128, 1136, 1139, 1180, 1192, 1213, 1229, 1230, 1231, 1242, 1247, 1249, 1250, 1271, 1335, 1337, 1338, 1346, 1347, 1348, 1349, 1360, 1371, 1377, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1391, 1394, 1395, 1399, 1400, 1402], "str_date": 1394, "str_timestamp": 1394, "str_valu": [53, 145], "strategi": [38, 49, 58, 66, 152, 172, 180, 181, 182, 183, 184, 185, 187, 235, 245, 259, 260, 275, 325, 326, 356, 409, 442, 445, 512, 518, 588, 597, 850, 863, 886, 891, 895, 896, 913, 935, 969, 1021, 1136, 1141, 1213, 1371], "stream": [10, 15, 43, 44, 49, 50, 51, 52, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 244, 259, 321, 356, 596, 850, 872, 883, 890, 895, 901, 906, 911, 924, 926, 932, 969], "streamabl": [901, 906, 934, 969], "streaming_t": 204, "strftime": [103, 487, 1108, 1392, 1394], "strict": [135, 136, 139, 148, 216, 225, 285, 356, 411, 428, 487, 696, 699, 708, 733, 735, 736, 738, 740, 850, 869, 879, 915, 969, 975, 1023, 1040, 1108, 1125, 1287, 1290, 1299, 1324, 1326, 1327, 1329, 1331, 1371], "strictli": [38, 49, 57, 100, 152, 260, 356, 896, 969], "string": [1, 2, 3, 5, 6, 13, 15, 16, 17, 21, 36, 38, 39, 40, 41, 45, 46, 49, 57, 70, 73, 76, 89, 96, 98, 100, 101, 103, 109, 127, 136, 140, 148, 152, 153, 154, 155, 167, 176, 177, 178, 179, 180, 187, 191, 215, 216, 219, 224, 229, 231, 238, 240, 243, 244, 245, 260, 265, 278, 280, 288, 291, 293, 294, 295, 296, 302, 312, 313, 319, 320, 324, 326, 330, 331, 335, 356, 366, 389, 394, 413, 427, 429, 431, 432, 433, 436, 449, 477, 482, 484, 487, 495, 504, 507, 515, 519, 534, 567, 611, 613, 638, 642, 652, 653, 658, 662, 664, 666, 668, 670, 673, 675, 677, 692, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 748, 756, 764, 766, 768, 773, 776, 777, 778, 779, 787, 789, 790, 792, 793, 799, 814, 816, 819, 828, 832, 834, 837, 838, 840, 846, 850, 862, 867, 869, 874, 878, 882, 883, 890, 891, 896, 902, 917, 918, 919, 920, 921, 926, 931, 938, 939, 945, 969, 974, 975, 1006, 1023, 1024, 1025, 1039, 1041, 1043, 1044, 1045, 1046, 1098, 1103, 1105, 1108, 1116, 1128, 1156, 1192, 1249, 1250, 1286, 1287, 1288, 1289, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1337, 1348, 1349, 1356, 1371, 1380, 1381, 1389, 1392, 1395, 1398, 1402], "string_to_arrai": 1392, "stringcach": [98, 100, 259, 356, 862, 1043, 1047], "stringio": [161, 162, 519, 850], "strings_hex": 700, "strip": [29, 728, 729, 730, 731, 732, 1319, 1320, 1321, 1394], "strip_chars_end": [730, 732], "strip_chars_start": [729, 731], "strip_prefix": [730, 732], "strip_suffix": [729, 731], "strongli": [41, 189, 264, 289, 342, 356, 597, 850, 1221, 1371], "strpo": 1392, "strptime": [288, 356, 481, 658, 850, 917, 969, 1102, 1392], "struct": [8, 56, 77, 128, 140, 143, 265, 276, 294, 317, 322, 330, 356, 406, 447, 528, 588, 596, 597, 623, 625, 627, 645, 656, 657, 706, 712, 725, 726, 754, 761, 784, 785, 787, 811, 840, 850, 902, 919, 933, 938, 952, 969, 1018, 1065, 1213, 1221, 1242, 1253, 1297, 1303, 1316, 1317, 1351, 1353, 1371], "struct_col": [744, 746, 747], "struct_seri": 952, "structarrai": [231, 356, 1126, 1371], "structfieldnotfounderror": 746, "structur": [41, 43, 44, 50, 109, 112, 126, 148, 213, 233, 279, 291, 308, 314, 356, 642, 850, 910, 969, 1133, 1345, 1371, 1399], "student": [280, 356], "style": [7, 21, 41, 53, 154, 280, 356], "sub": [342, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 408, 567, 574, 850, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1016, 1020, 1192, 1199], "subarrai": [385, 386, 997, 998], "subclass": [1, 356], "subexpress": [64, 872, 883, 911, 924, 969], "subinterv": 1388, "subject": [47, 169, 280, 356], "sublist": [393, 553, 554, 556, 558, 562, 563, 564, 565, 566, 567, 568, 577, 582, 586, 588, 1005, 1161, 1178, 1179, 1181, 1183, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1202, 1207, 1211, 1213, 1371], "subplan": [64, 132, 872, 883, 911, 924, 969], "subscript": 865, "subsequ": [41, 164, 172, 283, 315, 356, 588, 829, 840, 883, 969, 1352, 1371, 1386], "subset": [227, 228, 276, 321, 356, 880, 881, 932, 969], "substr": [410, 413, 416, 429, 433, 696, 701, 708, 719, 720, 723, 724, 725, 726, 727, 975, 1022, 1025, 1028, 1041, 1046, 1287, 1292, 1299, 1310, 1311, 1314, 1315, 1316, 1317, 1318, 1392], "subtl": [41, 356], "subtli": [517, 850], "subtract": [546, 749, 850, 1171, 1371], "succe": [152, 153, 167], "success": [698, 705, 1289, 1296], "successfulli": [53, 54, 55, 872, 883, 911, 924, 969], "suffer": 55, "suffix": [259, 260, 261, 294, 330, 335, 356, 368, 413, 427, 429, 541, 542, 543, 544, 602, 622, 624, 627, 628, 629, 655, 678, 701, 729, 732, 756, 850, 895, 896, 897, 919, 938, 940, 945, 969, 975, 1025, 1041, 1292, 1323], "suffix_field": [623, 625], "sugar": [325, 356, 652, 653, 721, 765, 767, 769, 781, 783, 786, 796, 801, 802, 803, 813, 815, 817, 818, 820, 822, 823, 828, 831, 833, 835, 839, 841, 850, 935, 969, 1249, 1250, 1284, 1312, 1371], "suggest": [356, 359, 1371, 1376], "suitabl": [58, 66, 154, 181, 264, 356, 597, 681, 850, 1221, 1270, 1371], "sum": [41, 97, 149, 231, 238, 244, 245, 255, 280, 288, 306, 335, 356, 444, 445, 449, 500, 513, 588, 597, 608, 610, 611, 612, 613, 614, 652, 653, 658, 674, 675, 763, 765, 777, 784, 786, 787, 798, 812, 824, 834, 850, 872, 873, 878, 883, 890, 891, 909, 911, 913, 917, 921, 924, 945, 969, 975, 1062, 1063, 1122, 1126, 1264, 1371, 1380, 1387, 1389, 1392, 1399], "sum_": [689, 850, 1281, 1371], "sum_a": [288, 356, 658, 850, 917, 969], "sum_horizont": [58, 356, 833], "summari": [223, 356, 877, 969, 1066, 1371, 1387], "summer": [719, 720], "sun": [356, 359, 733, 1324], "sundai": [245, 356, 454, 466, 484, 487, 497, 775, 891, 969, 1071, 1083, 1105, 1108, 1118], "sunni": [719, 720, 1310, 1311], "supercast": [238, 356], "supertyp": [66, 149, 235, 314, 318, 356, 372, 778, 850, 886, 969, 1371], "suppli": [39, 41, 133, 135, 136, 137, 139, 154, 161, 162, 171, 236, 284, 289, 313, 356, 513, 642, 850, 887, 914, 969, 1349, 1371], "support": [1, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 64, 65, 66, 133, 134, 135, 136, 137, 138, 139, 140, 154, 155, 156, 157, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 180, 184, 187, 197, 207, 213, 257, 258, 259, 260, 290, 291, 301, 302, 310, 315, 318, 356, 487, 504, 582, 638, 652, 653, 690, 692, 697, 707, 709, 710, 719, 720, 721, 723, 734, 846, 850, 856, 865, 872, 873, 883, 895, 896, 911, 924, 925, 926, 969, 975, 1108, 1128, 1207, 1249, 1250, 1282, 1288, 1298, 1300, 1301, 1310, 1311, 1312, 1314, 1325, 1352, 1354, 1371, 1375, 1389, 1394, 1395, 1397, 1398, 1399], "supportsinterchang": 134, "suppos": [212, 280, 356, 597, 850, 1221, 1371], "sure": [66, 133, 134, 138, 149, 152, 153, 156, 158, 160, 164, 168, 283, 356, 850], "surreal_query_to_fram": 154, "surrealdb": 154, "surrealql": 154, "suscept": 969, "swap": [840, 915, 969], "swim": 779, "switch": [64, 65, 455, 872, 873, 883, 911, 924, 969, 1072], "sy": 207, "sydnei": 791, "symbol": [37, 38, 49, 356, 850, 969], "symmetr": [579, 975, 1204], "symmetri": [875, 882, 918, 937, 969], "sync": [49, 50, 51, 52, 969], "sync_on_clos": [49, 50, 51, 52, 969], "synchron": [154, 963], "synconclosemethod": [49, 50, 51, 52, 969], "syntact": [325, 356, 652, 653, 721, 765, 767, 769, 781, 783, 786, 796, 801, 802, 803, 813, 815, 817, 818, 820, 822, 823, 828, 831, 833, 835, 839, 841, 850, 935, 969, 1249, 1250, 1284, 1312, 1371], "syntax": [41, 123, 213, 236, 264, 276, 284, 356, 612, 696, 704, 705, 708, 719, 720, 804, 805, 846, 865, 887, 914, 924, 969, 1287, 1295, 1296, 1299, 1310, 1311, 1371, 1395, 1397], "system": [37, 152, 153, 356, 459, 872, 883, 911, 924, 969, 1076], "t": [37, 38, 40, 49, 66, 97, 147, 151, 152, 157, 163, 167, 245, 260, 264, 279, 321, 324, 356, 446, 455, 463, 481, 487, 500, 503, 505, 506, 560, 597, 638, 642, 704, 708, 719, 720, 730, 733, 736, 741, 840, 850, 891, 896, 910, 932, 969, 975, 1064, 1102, 1108, 1122, 1127, 1129, 1130, 1185, 1221, 1295, 1299, 1310, 1311, 1320, 1321, 1324, 1327, 1332, 1371, 1383, 1384, 1394], "t_": [322, 356, 504, 850, 933, 969, 1128, 1371], "t_0": [288, 356, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 850, 917, 969, 1128, 1371], "t_1": [288, 356, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 850, 917, 969, 1128, 1371], "t_a": [322, 356, 933, 969], "t_b": [322, 356, 933, 969], "t_c": [322, 356, 933, 969], "t_d": [322, 356, 933, 969], "t_i": [504, 850, 1128, 1371], "t_id": [261, 356, 897, 969], "t_n": [288, 356, 658, 662, 664, 666, 668, 670, 673, 675, 677, 850, 917, 969], "t_struct": [322, 356, 933, 969], "tab_spann": [356, 360], "tab_stub": [356, 360], "tab_styl": [356, 360], "tabl": [7, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 39, 40, 41, 42, 133, 140, 148, 156, 157, 163, 168, 169, 193, 196, 197, 199, 202, 203, 259, 261, 280, 303, 308, 315, 324, 325, 356, 360, 829, 862, 895, 897, 927, 935, 969, 1381, 1382, 1383, 1384, 1386, 1387, 1398, 1399], "table_id": 202, "table_nam": [39, 41, 157, 193, 197, 303, 356, 927, 969], "table_path": [40, 156, 168, 169, 356], "table_styl": [41, 356], "table_typ": 202, "tableinfo": [193, 196, 205], "tablemerg": [40, 356], "tablenotfounderror": [40, 356], "tables_scale_100": [142, 153], "tabletyp": [202, 205], "tail": [243, 247, 356, 372, 689, 850, 969, 1150, 1281, 1371], "take": [41, 97, 148, 157, 163, 183, 184, 207, 238, 239, 245, 269, 272, 279, 280, 285, 356, 382, 454, 466, 477, 513, 520, 521, 563, 564, 596, 623, 625, 627, 692, 773, 775, 795, 797, 806, 850, 889, 891, 907, 913, 915, 969, 994, 1071, 1083, 1098, 1142, 1143, 1188, 1189, 1362, 1371, 1389], "taken": [582, 723, 1207, 1314], "talkin": [741, 1332], "tan": [850, 1371, 1392], "tand": 1392, "tangent": [378, 379, 752, 753, 850, 990, 991, 1343, 1344, 1371, 1396], "tanh": [280, 356, 850, 1371], "target": [1, 39, 40, 41, 42, 63, 157, 265, 318, 356, 704, 719, 720, 733, 735, 736, 840, 902, 969, 975, 1295, 1310, 1311, 1324, 1326, 1327, 1394], "target_alia": [40, 356], "target_t": [39, 356], "task": [65, 873, 969], "tau": [503, 504, 850, 1127, 1128, 1371], "tb": [176, 178, 231, 356, 415, 1126, 1371], "tbl": [97, 140, 142, 153, 1401], "tbl0": 1386, "tbl1": [1384, 1386], "tbl2": [1384, 1386], "tbl3": 1384, "tbl4": 1384, "tbl_cell_numeric_align": [9, 11, 28], "tbl_col": 18, "tbl_format": [21, 207], "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "tbl_row": [26, 223, 356, 877, 969], "tbl_width_char": 794, "td": 487, "td1": 975, "td2": 975, "td3": 975, "tdf": [279, 356], "technic": 846, "tell": [697, 721, 1288, 1312], "tempor": [103, 216, 245, 257, 288, 290, 291, 310, 356, 436, 487, 534, 658, 662, 664, 666, 668, 670, 673, 675, 677, 808, 850, 862, 869, 891, 917, 969, 975, 1053, 1108, 1156, 1371, 1392, 1398], "temporalliter": [436, 808, 809, 850, 1053, 1087, 1088, 1371], "temporari": [39, 356], "temporarili": [189, 207, 245, 288, 356, 658, 850, 891, 917, 969], "tenant": 34, "tenant_id": 34, "tend": [176, 178], "tensor": [318, 356, 1354, 1371], "tensordataset": [318, 356], "term": [503, 505, 506, 710, 723, 734, 850, 1127, 1129, 1130, 1301, 1314, 1325, 1371], "termin": [38, 49, 356, 969], "terminologi": 201, "test": [0, 39, 154, 155, 157, 163, 169, 230, 280, 356, 862, 1125, 1371, 1394], "test1": 1386, "test2": 1386, "test3": 1386, "test_1": [280, 356], "test_1_math": [280, 356], "test_1_phys": [280, 356], "test_2": [280, 356], "test_2_math": [280, 356], "test_2_phys": [280, 356], "test_data": 154, "test_df_height": 183, "test_func": 811, "test_lf": [940, 969], "test_miscellan": 1402, "test_numer": 1402, "test_price_calcul": 1402, "test_series_len": 187, "test_tabl": 155, "test_unique_xyz": 181, "testdb": 155, "testing1234": 1386, "text": [151, 154, 200, 431, 432, 702, 710, 714, 715, 716, 719, 720, 722, 723, 734, 830, 913, 969, 1044, 1045, 1301, 1305, 1306, 1313, 1314, 1325, 1386, 1402], "text1": 720, "text2": 720, "textclaus": 154, "texttt": [689, 850, 1281, 1371], "th": [239, 356, 521, 564, 577, 689, 710, 734, 850, 889, 969, 1143, 1189, 1202, 1281, 1301, 1325, 1371, 1394], "than": [41, 49, 50, 51, 52, 55, 106, 129, 137, 139, 152, 153, 154, 157, 163, 167, 173, 217, 244, 257, 259, 260, 264, 278, 289, 290, 292, 324, 342, 356, 431, 517, 519, 522, 524, 534, 548, 576, 595, 596, 597, 613, 645, 657, 680, 689, 710, 714, 717, 718, 726, 734, 743, 780, 812, 840, 850, 890, 895, 896, 952, 969, 1044, 1156, 1201, 1221, 1242, 1254, 1268, 1281, 1301, 1305, 1308, 1309, 1317, 1325, 1334, 1351, 1371, 1402], "the_aws_access_key_id": [40, 156, 168, 169, 356], "the_aws_region": [40, 356], "the_aws_secret_access_kei": [40, 156, 168, 169, 356], "thei": [38, 41, 49, 57, 65, 66, 98, 100, 136, 149, 167, 207, 260, 262, 291, 356, 638, 681, 721, 729, 730, 850, 872, 883, 896, 911, 924, 969, 973, 975, 1270, 1312, 1371], "them": [65, 133, 135, 136, 137, 139, 154, 155, 157, 161, 162, 163, 164, 167, 170, 171, 172, 207, 232, 233, 245, 260, 272, 280, 288, 318, 326, 356, 394, 504, 534, 567, 630, 631, 638, 658, 778, 789, 790, 792, 793, 837, 838, 850, 873, 884, 891, 896, 907, 917, 969, 975, 1006, 1128, 1133, 1192, 1230, 1231, 1371, 1389, 1399], "then1": 840, "then2": 840, "therebi": [167, 170, 171], "therefor": [55, 152, 158, 162, 164, 231, 356, 597, 850, 1126, 1371], "theta": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "thi": [1, 4, 5, 11, 13, 15, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 72, 73, 74, 75, 80, 90, 97, 99, 100, 107, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 201, 203, 207, 209, 211, 212, 214, 215, 218, 219, 221, 223, 224, 227, 228, 231, 233, 237, 238, 243, 244, 245, 246, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 270, 271, 272, 273, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 303, 304, 305, 308, 310, 313, 314, 315, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 337, 342, 355, 356, 359, 360, 361, 369, 372, 373, 382, 394, 400, 401, 402, 407, 409, 426, 427, 430, 436, 446, 447, 449, 454, 455, 456, 466, 468, 474, 475, 477, 481, 484, 487, 498, 502, 509, 518, 519, 526, 528, 531, 532, 534, 538, 560, 561, 567, 576, 577, 578, 579, 580, 581, 583, 588, 589, 593, 594, 596, 597, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 615, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 638, 645, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 682, 683, 684, 685, 690, 691, 692, 695, 697, 704, 707, 709, 711, 712, 716, 717, 718, 721, 728, 729, 730, 731, 732, 737, 741, 743, 745, 748, 755, 756, 758, 759, 760, 761, 765, 769, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 797, 798, 800, 802, 803, 806, 807, 808, 809, 812, 815, 817, 820, 822, 828, 831, 835, 839, 840, 841, 846, 850, 862, 866, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 887, 890, 891, 893, 895, 896, 897, 899, 901, 902, 906, 907, 911, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 932, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 947, 952, 966, 967, 968, 969, 973, 974, 975, 977, 984, 985, 994, 1006, 1012, 1013, 1014, 1019, 1021, 1038, 1039, 1042, 1047, 1048, 1053, 1054, 1064, 1065, 1071, 1072, 1073, 1075, 1083, 1085, 1095, 1096, 1098, 1102, 1105, 1108, 1119, 1121, 1124, 1126, 1132, 1133, 1141, 1143, 1145, 1149, 1151, 1161, 1170, 1185, 1186, 1192, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1214, 1219, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1233, 1236, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1282, 1283, 1285, 1286, 1288, 1295, 1298, 1300, 1302, 1303, 1307, 1308, 1309, 1312, 1319, 1320, 1321, 1328, 1332, 1334, 1335, 1337, 1340, 1341, 1345, 1347, 1349, 1350, 1351, 1352, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1371, 1376, 1380, 1381, 1382, 1386, 1394, 1397, 1398, 1399, 1400, 1402], "thing": [167, 174], "think": [474, 475, 1095, 1096], "third": [596, 850], "thoma": [272, 356, 907, 969], "those": [5, 31, 41, 152, 157, 236, 284, 291, 315, 325, 356, 517, 648, 704, 812, 850, 865, 914, 935, 969, 975, 1244, 1295, 1352, 1371], "though": [39, 152, 154, 245, 356, 846, 891, 969], "thought": 840, "thousand": [9, 28], "thousands_separ": [9, 11, 28], "thread": [15, 38, 49, 65, 142, 152, 153, 155, 189, 190, 302, 356, 560, 597, 692, 773, 850, 873, 926, 969, 1014, 1185, 1208, 1283, 1371], "thread_loc": [597, 850], "thread_pool_s": 190, "three": [41, 212, 288, 317, 356, 447, 645, 658, 681, 710, 719, 734, 850, 917, 969, 1018, 1065, 1213, 1242, 1301, 1311, 1325, 1371], "threshold": [294, 356, 919, 969], "through": [154, 265, 280, 356, 846, 902, 969, 975, 1371, 1386], "throughout": 207, "throw": [40, 135, 136, 139, 225, 285, 356, 712, 713, 869, 879, 915, 969, 1303, 1304, 1371], "thu": [41, 233, 356, 359, 780, 973, 1133, 1371], "thursdai": [245, 356, 454, 466, 775, 891, 969, 1071, 1083], "ti": [648, 850, 1244, 1371], "time": [13, 38, 40, 43, 47, 49, 50, 51, 52, 55, 63, 64, 65, 73, 75, 116, 156, 162, 164, 167, 168, 170, 171, 172, 183, 184, 187, 197, 223, 233, 245, 260, 261, 288, 326, 356, 426, 427, 455, 456, 458, 459, 460, 463, 464, 474, 475, 477, 480, 481, 482, 484, 486, 487, 495, 498, 504, 555, 588, 657, 658, 662, 664, 666, 668, 670, 673, 675, 677, 685, 733, 736, 740, 754, 755, 756, 778, 779, 789, 790, 791, 792, 793, 794, 800, 808, 837, 838, 850, 872, 873, 877, 891, 896, 897, 911, 917, 969, 975, 1038, 1039, 1072, 1073, 1075, 1076, 1080, 1081, 1098, 1101, 1102, 1103, 1105, 1107, 1108, 1116, 1119, 1128, 1133, 1180, 1254, 1277, 1324, 1327, 1331, 1353, 1355, 1356, 1371, 1380, 1386, 1395, 1402], "time_column": [326, 356], "time_format": [38, 49, 356, 969], "time_unit": [73, 75, 456, 458, 464, 486, 498, 736, 791, 792, 793, 794, 800, 974, 975, 1073, 1075, 1081, 1107, 1119, 1327], "time_unit_m": [456, 1073], "time_unit_n": [456, 1073], "time_unit_u": 498, "time_zon": [73, 459, 461, 481, 736, 791, 792, 793, 974, 975, 1072, 1076, 1080, 1102, 1327], "timedelta": [245, 260, 288, 326, 356, 477, 482, 487, 495, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 789, 790, 792, 793, 837, 838, 850, 891, 896, 917, 969, 974, 975, 1086, 1092, 1098, 1103, 1116, 1128, 1230, 1231, 1285, 1361, 1371], "timeout": [65, 873, 969], "timestamp": [140, 156, 168, 245, 356, 481, 482, 495, 800, 891, 969, 1102, 1103, 1116, 1392], "timestamp_m": 486, "timestamp_n": 1107, "timestamp_u": [486, 1107], "timestep": 800, "timeunit": [38, 49, 73, 75, 356, 456, 458, 486, 498, 736, 791, 792, 793, 794, 969, 975, 1073, 1075, 1107, 1119, 1327], "timezon": [56, 73, 156, 168, 461, 975, 1395], "tip": [597, 850], "titl": [41, 356, 359, 1371, 1376, 1380], "titlecas": [741, 1332], "tm": [458, 487, 975, 1395], "to_arrow": [258, 356, 1351, 1371, 1399], "to_batch": [258, 356], "to_dict": [216, 291, 356, 869, 969, 975], "to_dummi": [313, 318, 356, 1371], "to_fram": [430, 464, 482, 486, 495, 733, 974, 1065, 1242, 1269, 1271, 1316, 1317, 1324, 1371, 1376], "to_init_repr": [140, 356, 1371], "to_jax": [318, 356, 1371], "to_list": [140, 288, 356, 1287, 1299, 1371], "to_lowercas": 629, "to_numpi": [313, 318, 356, 596, 850, 1371], "to_panda": [356, 1371], "to_phys": [850, 1047, 1371], "to_python": 974, "to_seri": [59, 240, 356, 733, 774, 825, 1324, 1394], "to_sql": [39, 356], "to_str": [484, 1105], "to_struct": [356, 705], "to_torch": [313, 356, 1371], "to_uppercas": [368, 628, 706, 850], "togeth": 1394, "token": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 169, 170, 171, 172, 192, 197, 356, 969], "tokyo": [140, 975], "tokyo_tz": 975, "toler": [176, 177, 178, 179, 260, 356, 896, 969], "tone": [41, 356], "tonight": [697, 721, 1288, 1312], "too": [15, 280, 356, 414, 638, 850, 969, 1026], "tooltip": [356, 359, 1371, 1376], "toomanyrowsreturnederror": [289, 356], "top": [41, 303, 319, 356, 359, 756, 850, 927, 931, 969, 1371, 1376, 1399], "top_col": [41, 356], "top_k": [215, 356, 426, 427, 756, 850, 867, 969, 1038, 1039, 1356, 1371], "top_k_bi": [426, 427, 755, 850, 1038, 1039, 1355, 1371], "top_row": [41, 356], "tor_id": 140, "torch": [175, 318, 356, 1354, 1371], "torchexporttyp": [318, 356], "total": [41, 231, 337, 356, 488, 489, 490, 491, 492, 493, 494, 549, 569, 850, 947, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1126, 1174, 1194, 1371], "total_gross": 1380, "toward": [337, 549, 569, 850, 947, 1174, 1194, 1371], "tp": [1, 61], "tpu": [313, 356, 1349, 1371], "tr15": [716, 1307], "trace": 76, "traceback": [176, 177, 178, 179, 314, 356, 653, 850, 1250, 1351, 1371], "tracebacktyp": 1399, "track": [156, 168, 169, 264, 356, 588, 1399], "trail": [29, 243, 356, 728, 729, 1319, 1320], "train": [318, 356], "train_lf": [940, 969], "transfer": 155, "transferencod": [411, 412, 699, 700, 1023, 1024, 1290, 1291], "transform": [264, 303, 356, 596, 741, 829, 850, 927, 969, 1332], "transform_dens": [1371, 1376], "transit": [236, 284, 356, 887, 914, 969], "translat": 154, "transpar": [872, 883, 911, 924, 969], "transpos": [280, 356], "travel": [156, 168], "travers": [661, 663, 665, 667, 669, 672, 674, 676, 850, 1257, 1258, 1260, 1263, 1264, 1265, 1371], "treat": [152, 153, 167, 209, 389, 504, 538, 556, 696, 698, 708, 719, 720, 840, 850, 977, 1001, 1128, 1161, 1181, 1287, 1289, 1299, 1310, 1311, 1371], "tree": [613, 883, 969], "tree_format": [883, 969], "trend": [41, 356], "tri": [264, 356], "triangl": [342, 952], "trigger": [40, 149, 262, 315, 356, 850, 1352, 1371], "trigonometri": [1392, 1398], "trim": [140, 1394], "trim_decimal_zero": 29, "trip": 154, "true": [7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 39, 40, 41, 47, 49, 50, 51, 52, 53, 55, 64, 65, 66, 97, 133, 134, 135, 136, 138, 139, 140, 142, 143, 148, 149, 152, 153, 154, 156, 157, 158, 160, 163, 164, 167, 168, 170, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 192, 207, 211, 216, 217, 218, 223, 225, 230, 235, 236, 238, 240, 242, 243, 244, 245, 252, 253, 254, 257, 259, 260, 261, 262, 268, 269, 275, 276, 278, 280, 281, 284, 285, 289, 290, 291, 292, 294, 302, 303, 306, 309, 311, 313, 314, 315, 318, 320, 321, 322, 324, 325, 326, 330, 336, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 359, 367, 368, 369, 370, 371, 372, 383, 385, 386, 389, 393, 394, 402, 406, 410, 411, 413, 416, 417, 422, 425, 427, 428, 429, 433, 441, 442, 443, 444, 445, 447, 454, 456, 459, 462, 464, 466, 467, 474, 475, 477, 478, 481, 482, 483, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 505, 506, 513, 520, 522, 523, 524, 525, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 551, 552, 556, 563, 565, 567, 583, 588, 595, 596, 597, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 632, 633, 635, 637, 640, 641, 645, 650, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 684, 685, 689, 691, 692, 695, 696, 697, 698, 699, 701, 707, 708, 709, 711, 712, 713, 719, 720, 724, 725, 727, 733, 735, 736, 738, 740, 744, 746, 747, 756, 758, 761, 764, 765, 766, 767, 768, 770, 773, 774, 775, 776, 780, 782, 789, 792, 798, 804, 808, 809, 816, 822, 825, 828, 829, 832, 834, 837, 840, 841, 850, 869, 870, 871, 872, 873, 877, 879, 883, 886, 887, 890, 891, 895, 896, 897, 899, 901, 906, 911, 914, 915, 919, 924, 926, 927, 932, 933, 934, 935, 938, 944, 946, 948, 950, 953, 954, 955, 956, 957, 958, 959, 968, 969, 974, 975, 982, 983, 995, 997, 998, 1001, 1005, 1006, 1014, 1022, 1023, 1025, 1028, 1040, 1041, 1043, 1046, 1048, 1051, 1052, 1065, 1071, 1072, 1073, 1076, 1079, 1080, 1081, 1082, 1083, 1084, 1088, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1122, 1124, 1125, 1127, 1129, 1130, 1137, 1147, 1151, 1153, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1176, 1177, 1181, 1188, 1190, 1192, 1208, 1221, 1227, 1233, 1235, 1238, 1239, 1242, 1245, 1246, 1255, 1262, 1281, 1283, 1286, 1287, 1288, 1289, 1290, 1292, 1298, 1299, 1300, 1302, 1303, 1304, 1310, 1311, 1315, 1316, 1318, 1324, 1326, 1327, 1329, 1331, 1346, 1351, 1352, 1360, 1362, 1371, 1376, 1380, 1381, 1383, 1385, 1389, 1391, 1394, 1399, 1402], "truediv": [517, 850], "truncat": [21, 140, 152, 153, 167, 243, 245, 257, 290, 291, 310, 356, 891, 911, 969, 1398], "truncate_nod": [911, 969], "truncate_ragged_lin": [152, 153, 167], "truncate_str": 495, "truncate_td": 495, "trust": [449, 850, 878, 969], "try": [38, 43, 47, 49, 50, 51, 52, 64, 126, 152, 153, 158, 162, 164, 167, 170, 171, 172, 197, 356, 840, 872, 883, 911, 924, 969], "try_cast": 1392, "try_parse_d": [142, 152, 153, 167], "try_parse_hive_d": [164, 170, 172], "ts_local": [481, 1102], "tseri": [474, 475, 1095, 1096], "tstamp": 975, "tstamp_tokyo": 975, "tstamp_utc": 975, "tue": [356, 359], "tuesdai": [245, 356, 891, 969], "tupl": [41, 67, 155, 157, 163, 212, 213, 257, 264, 278, 289, 290, 291, 298, 318, 334, 356, 612, 654, 850, 911, 924, 969, 974, 975, 1251, 1273, 1371], "turn": [8, 64, 152, 153, 167, 259, 260, 356, 872, 883, 895, 896, 901, 911, 969], "twice": [41, 356], "two": [41, 57, 98, 100, 135, 137, 139, 155, 212, 236, 238, 260, 261, 271, 272, 284, 290, 317, 323, 336, 342, 356, 360, 367, 451, 458, 517, 520, 523, 588, 645, 691, 771, 772, 778, 780, 782, 789, 792, 826, 827, 829, 850, 887, 896, 897, 906, 907, 914, 934, 946, 952, 969, 975, 1018, 1068, 1075, 1213, 1242, 1371, 1386, 1387, 1388, 1391, 1400], "two_a": 1399, "tworld": [730, 1319, 1321], "txt": [1, 13, 167, 696, 708, 1299, 1394], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 56, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 133, 135, 136, 137, 138, 139, 141, 152, 153, 154, 156, 157, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 209, 212, 213, 219, 229, 232, 238, 243, 245, 246, 258, 259, 264, 288, 293, 296, 308, 313, 314, 317, 318, 321, 333, 356, 361, 369, 371, 374, 375, 376, 377, 378, 379, 382, 387, 388, 389, 391, 394, 405, 406, 410, 411, 412, 413, 414, 415, 416, 428, 430, 431, 432, 436, 437, 438, 439, 440, 447, 448, 454, 455, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 507, 509, 520, 523, 526, 534, 535, 536, 537, 538, 539, 540, 549, 553, 554, 556, 561, 567, 569, 587, 588, 596, 597, 611, 645, 647, 651, 652, 653, 654, 656, 657, 658, 662, 664, 666, 668, 670, 673, 675, 677, 686, 687, 688, 695, 698, 699, 700, 703, 704, 705, 706, 709, 710, 711, 713, 714, 715, 723, 724, 725, 726, 733, 734, 738, 752, 753, 754, 761, 770, 778, 781, 788, 789, 790, 791, 792, 793, 794, 796, 804, 805, 807, 808, 809, 810, 811, 812, 822, 825, 836, 837, 838, 841, 846, 850, 862, 863, 872, 882, 883, 884, 891, 895, 911, 917, 918, 924, 932, 942, 969, 974, 977, 982, 983, 995, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1017, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1040, 1042, 1044, 1045, 1053, 1065, 1066, 1071, 1072, 1074, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1125, 1128, 1132, 1149, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1176, 1177, 1178, 1179, 1181, 1186, 1192, 1194, 1212, 1213, 1235, 1242, 1248, 1249, 1250, 1251, 1253, 1254, 1276, 1278, 1286, 1287, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1300, 1301, 1302, 1304, 1305, 1306, 1314, 1315, 1316, 1317, 1324, 1325, 1329, 1350, 1351, 1353, 1362, 1371, 1380, 1387, 1392, 1394, 1398, 1399], "type_coercion": [64, 872, 883, 911, 924, 969], "type_json": 199, "type_nam": 199, "type_text": 199, "typeerror": [40, 213, 356], "typenam": [41, 356], "typic": [136, 154, 172, 264, 356, 463, 686, 850, 975, 1080, 1221, 1278, 1371], "tz": [736, 1327], "tzinfo": [73, 156, 168, 975], "u": [41, 73, 75, 172, 185, 260, 356, 456, 458, 464, 486, 498, 733, 736, 766, 768, 791, 792, 793, 794, 800, 896, 969, 974, 975, 1073, 1075, 1081, 1107, 1119, 1324, 1327, 1384, 1395], "u1": [314, 356], "u16": [167, 1397, 1402], "u32": [13, 154, 214, 216, 222, 277, 332, 333, 337, 341, 347, 349, 356, 367, 373, 380, 381, 382, 383, 384, 387, 388, 390, 399, 415, 431, 432, 440, 441, 528, 530, 549, 553, 554, 557, 569, 574, 620, 636, 648, 656, 657, 662, 664, 666, 668, 670, 673, 675, 677, 681, 698, 708, 709, 714, 715, 716, 754, 759, 761, 765, 769, 773, 774, 781, 783, 804, 807, 820, 850, 866, 869, 876, 909, 941, 942, 947, 951, 957, 959, 969, 975, 994, 995, 996, 999, 1000, 1002, 1011, 1040, 1044, 1045, 1047, 1059, 1151, 1178, 1179, 1182, 1194, 1199, 1244, 1253, 1254, 1270, 1289, 1299, 1300, 1305, 1306, 1353, 1358, 1360, 1371, 1380, 1388, 1389, 1390, 1394, 1399], "u64": [246, 333, 356, 526, 650, 850, 911, 942, 969, 975, 1149, 1246, 1371], "u8": [216, 311, 312, 324, 356, 653, 764, 850, 869, 969, 975, 1250, 1346, 1371, 1402], "udf": [189, 264, 279, 342, 356, 449, 597, 642, 812, 850, 878, 910, 952, 969, 1221, 1371], "ufunc": 106, "uid": 154, "uint": 1402, "uint16": [167, 444, 445, 750, 850, 975, 1062, 1063, 1341, 1351, 1354, 1371], "uint2": 1397, "uint32": [141, 175, 216, 231, 288, 333, 356, 382, 387, 388, 415, 431, 432, 440, 504, 520, 523, 549, 553, 554, 569, 651, 656, 657, 658, 662, 664, 666, 668, 670, 673, 675, 677, 698, 709, 714, 715, 754, 781, 804, 807, 850, 869, 917, 942, 969, 975, 995, 999, 1000, 1027, 1040, 1044, 1045, 1126, 1128, 1178, 1179, 1194, 1248, 1253, 1254, 1289, 1300, 1305, 1306, 1353, 1354, 1371], "uint4": 1399, "uint64": [141, 246, 288, 333, 356, 387, 388, 504, 526, 553, 554, 650, 658, 662, 664, 666, 668, 670, 673, 675, 677, 850, 917, 942, 969, 975, 999, 1000, 1128, 1149, 1178, 1179, 1246, 1354, 1371], "uint8": [154, 216, 312, 313, 314, 324, 356, 444, 445, 653, 750, 764, 850, 869, 969, 974, 975, 1062, 1063, 1250, 1341, 1354, 1371, 1402], "uint8_pair": 1402, "uit": [723, 1314], "uk": [705, 1296], "unabl": [108, 157], "unalias": 603, "unari": [634, 850], "unbias": [505, 506, 850, 1129, 1130, 1371], "unchang": [231, 356, 652, 754, 850, 901, 952, 969, 1126, 1249, 1353, 1371], "uncompress": [36, 43, 44, 47, 50, 52, 158, 170, 356, 969], "undefin": [152, 757, 850], "under": [38, 43, 47, 49, 50, 51, 52, 57, 59, 60, 61, 62, 98, 100, 162, 164, 167, 170, 171, 172, 195, 196, 197, 280, 303, 356, 842, 843, 845, 846, 851, 852, 855, 857, 858, 859, 927, 969, 1363, 1365, 1367, 1372, 1377, 1378, 1379], "underestim": [231, 356, 1126, 1371], "underli": [1, 57, 72, 73, 75, 90, 100, 105, 115, 133, 135, 136, 137, 139, 154, 155, 157, 161, 162, 163, 164, 171, 180, 183, 187, 232, 233, 257, 258, 290, 308, 314, 356, 411, 456, 457, 458, 462, 465, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 481, 483, 487, 496, 497, 498, 499, 650, 678, 696, 699, 708, 850, 884, 969, 975, 1023, 1047, 1073, 1074, 1075, 1079, 1082, 1084, 1085, 1089, 1090, 1091, 1093, 1094, 1097, 1099, 1100, 1102, 1104, 1108, 1117, 1118, 1119, 1120, 1133, 1246, 1266, 1276, 1287, 1290, 1299, 1345, 1351, 1371, 1399], "understood": 812, "undo": [614, 621, 622, 624, 626, 628, 629], "unexpect": [115, 124, 154, 236, 284, 356, 596, 597, 850, 887, 914, 969, 1221, 1371], "unhelpfulli": [176, 178], "unicod": [21, 432, 710, 715, 716, 723, 734, 975, 1045, 1301, 1306, 1307, 1314, 1325, 1394], "unicodeform": [716, 1307], "unifi": [41, 313, 318, 356, 975], "uniform": [41, 356, 528, 645, 850, 1151, 1242, 1371], "unimod": [689, 850, 1281, 1371], "union": [64, 66, 580, 872, 883, 911, 924, 969, 975, 1205, 1398, 1399], "uniqu": [47, 52, 58, 76, 149, 157, 180, 181, 182, 185, 187, 214, 254, 259, 276, 280, 291, 347, 356, 373, 384, 399, 447, 545, 574, 620, 645, 733, 735, 736, 740, 759, 761, 769, 820, 850, 866, 895, 957, 969, 985, 996, 1011, 1065, 1169, 1199, 1228, 1242, 1324, 1326, 1327, 1331, 1358, 1360, 1371, 1387, 1389], "unique_column_valu": [280, 356], "unique_count": [850, 1371], "uniquekeepstrategi": [321, 356, 932, 969], "unit": [41, 73, 75, 149, 176, 177, 178, 179, 183, 187, 231, 356, 415, 456, 458, 464, 480, 486, 498, 504, 510, 594, 609, 733, 736, 760, 777, 791, 792, 793, 794, 800, 850, 911, 969, 975, 1027, 1073, 1075, 1081, 1101, 1107, 1119, 1126, 1128, 1134, 1219, 1324, 1327, 1359, 1371, 1402], "uniti": [192, 193, 195, 196, 197, 205, 862], "unity_catalog": 200, "univers": [209, 977], "unix": [72, 73, 464, 495, 800, 1081, 1116], "unknown": [588, 704, 810, 1295], "unless": [41, 58, 135, 152, 259, 313, 318, 356, 728, 729, 825, 895, 969, 1319, 1394], "unlik": [148, 245, 325, 356, 865, 891, 935, 969], "unnam": [706, 1297], "unnest": [148, 356, 447, 645, 656, 705, 706, 725, 726, 746, 748, 761, 840, 850, 969, 1018, 1065, 1213, 1242, 1253, 1316, 1317, 1371, 1392, 1398], "unpivot": [271, 356, 906, 969], "unregist": [1382, 1383, 1384, 1399, 1401], "unsaf": [149, 850], "unset": [39, 164, 170, 182, 341, 356, 419, 420, 421, 423, 424, 481, 588, 850, 951, 1031, 1032, 1033, 1035, 1036, 1102, 1371, 1380], "unsign": [91, 92, 93, 94, 650, 850, 975, 1246, 1371], "unsigned_integ": 975, "unstabl": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 99, 130, 132, 143, 144, 145, 146, 147, 148, 154, 156, 162, 164, 167, 168, 169, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 265, 303, 313, 318, 325, 356, 359, 360, 361, 446, 447, 454, 466, 528, 597, 645, 659, 660, 662, 664, 666, 668, 670, 671, 673, 675, 677, 775, 777, 850, 872, 873, 883, 902, 911, 924, 927, 935, 943, 969, 1048, 1064, 1065, 1071, 1083, 1151, 1242, 1255, 1256, 1259, 1261, 1262, 1349, 1354, 1371, 1376], "unstack": 356, "unstackdirect": [324, 356], "unsuit": 131, "unsupport": [40, 213, 356, 865], "until": [49, 50, 51, 52, 97, 98, 245, 262, 356, 717, 718, 743, 891, 969, 1308, 1309, 1334], "up": [11, 41, 89, 155, 257, 260, 280, 290, 291, 297, 310, 356, 435, 436, 597, 710, 719, 720, 734, 850, 895, 896, 901, 922, 969, 975, 1050, 1301, 1310, 1311, 1325, 1371], "upcast": [56, 265, 356, 372, 850, 902, 969], "upcast_integer_typ": [1, 61], "updat": [40, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 207, 223, 356, 877, 969], "updated_at": [198, 201, 202], "updated_bi": [198, 201, 202], "upgrad": 111, "upheld": [901, 969], "upon": 153, "upper": [152, 153, 154, 231, 245, 356, 436, 528, 534, 588, 623, 760, 770, 789, 790, 792, 793, 808, 809, 837, 838, 850, 891, 969, 1053, 1126, 1151, 1156, 1219, 1359, 1371, 1389, 1392], "upper_bound": [245, 356, 436, 534, 588, 850, 891, 969, 1053, 1156, 1219, 1371], "uppercas": [629, 742, 1333, 1394], "upsampl": [245, 356, 891, 969], "urandom": [415, 1027], "uri": [39, 40, 154, 155, 156, 168, 169, 356], "url": [154, 155, 164, 170, 172, 192, 704, 706, 1295, 1297], "urllib": 155, "us": [1, 7, 9, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 49, 50, 51, 52, 53, 55, 57, 58, 64, 65, 66, 67, 73, 89, 98, 100, 103, 107, 130, 134, 136, 137, 139, 141, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 192, 213, 214, 215, 216, 219, 223, 225, 227, 228, 234, 235, 236, 238, 244, 245, 252, 254, 256, 257, 258, 260, 264, 271, 275, 276, 278, 279, 280, 284, 288, 289, 290, 291, 292, 294, 295, 297, 302, 303, 304, 308, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 323, 324, 325, 326, 327, 330, 331, 332, 333, 335, 342, 356, 359, 361, 367, 369, 371, 373, 382, 383, 406, 411, 412, 414, 427, 429, 431, 432, 433, 436, 446, 449, 452, 453, 461, 480, 481, 482, 484, 487, 495, 498, 500, 503, 504, 505, 506, 507, 511, 512, 513, 517, 532, 533, 534, 546, 560, 576, 584, 588, 590, 596, 597, 600, 621, 624, 626, 628, 629, 638, 644, 645, 648, 650, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 680, 682, 684, 685, 689, 691, 692, 694, 695, 696, 697, 699, 700, 701, 703, 704, 705, 707, 708, 709, 712, 713, 714, 715, 716, 719, 720, 721, 723, 725, 727, 729, 730, 731, 732, 733, 735, 736, 740, 743, 744, 748, 750, 756, 762, 763, 765, 766, 767, 768, 769, 772, 773, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 798, 800, 804, 805, 807, 808, 810, 812, 813, 814, 816, 818, 819, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 837, 838, 839, 840, 841, 846, 849, 850, 861, 862, 865, 866, 867, 868, 869, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 890, 891, 896, 899, 906, 911, 914, 917, 918, 919, 920, 922, 924, 926, 927, 928, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 945, 952, 969, 973, 974, 975, 982, 983, 985, 1014, 1018, 1023, 1024, 1026, 1039, 1044, 1045, 1048, 1064, 1066, 1069, 1070, 1078, 1087, 1088, 1101, 1102, 1103, 1105, 1108, 1116, 1119, 1122, 1127, 1128, 1129, 1130, 1135, 1136, 1142, 1148, 1155, 1156, 1171, 1185, 1201, 1208, 1213, 1221, 1241, 1242, 1244, 1246, 1249, 1251, 1253, 1254, 1255, 1256, 1268, 1269, 1271, 1272, 1275, 1281, 1283, 1285, 1286, 1287, 1288, 1290, 1291, 1294, 1295, 1296, 1298, 1299, 1300, 1305, 1306, 1307, 1310, 1311, 1312, 1314, 1316, 1324, 1326, 1327, 1331, 1334, 1341, 1345, 1346, 1348, 1351, 1352, 1356, 1361, 1371, 1380, 1381, 1382, 1383, 1384, 1386, 1387, 1394, 1395, 1399, 1401, 1402], "usag": [183, 187, 300, 356, 840, 975, 1276, 1371], "usd": [243, 356, 1402], "use_abs_path": 149, "use_pyarrow": [47, 52, 152, 156, 158, 160, 164, 168, 314, 356, 969, 1351, 1371], "use_pyarrow_extension_arrai": [315, 356, 1352, 1371], "use_pyarrow_write_to_dataset": [47, 356], "use_statist": [164, 172], "user": [39, 147, 149, 154, 155, 209, 264, 279, 342, 356, 596, 597, 642, 682, 798, 812, 850, 910, 952, 969, 973, 977, 1221, 1272, 1371], "user_conn": 154, "usernam": [152, 155, 158, 160], "userwarn": 1, "usr": 154, "usual": [107, 155, 207, 318, 356, 455, 1072], "utc": [156, 168, 455, 459, 461, 463, 481, 733, 736, 974, 975, 1072, 1076, 1080, 1102, 1324, 1327], "utc_tz": 975, "utf": [38, 49, 88, 356, 969], "utf8": [21, 152, 153, 167, 710, 723, 734, 1301, 1314, 1325], "utf8_borders_onli": 21, "utf8_ful": [21, 58, 140], "utf8_full_condens": [7, 21, 140], "utf8_horizontal_onli": 21, "utf8_no_bord": 21, "util": [318, 356, 800, 969], "uvloop": 154, "uvw": [705, 1296], "v": [8, 9, 10, 47, 231, 356, 681, 766, 768, 850, 1270, 1371, 1383, 1384], "v1": 33, "v2": [8, 10, 158, 170], "val": [41, 287, 356, 597, 642, 754, 840, 850, 916, 969], "valid": [38, 41, 49, 73, 97, 147, 152, 154, 158, 160, 164, 167, 187, 207, 225, 231, 259, 260, 285, 356, 446, 696, 698, 704, 705, 706, 708, 713, 719, 720, 840, 850, 879, 895, 896, 915, 944, 969, 975, 1064, 1126, 1287, 1289, 1295, 1296, 1297, 1299, 1304, 1310, 1311, 1371, 1380, 1381], "validate_output_schema": [901, 969], "validate_schema": [97, 147], "vals_phys": [754, 850], "valu": [4, 5, 11, 12, 13, 14, 18, 21, 29, 31, 37, 38, 41, 47, 49, 52, 53, 55, 57, 58, 66, 67, 70, 76, 77, 85, 86, 95, 100, 109, 135, 136, 138, 139, 145, 152, 153, 154, 155, 164, 167, 170, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 207, 211, 213, 214, 215, 216, 223, 227, 228, 230, 233, 234, 235, 236, 240, 243, 245, 246, 247, 251, 255, 257, 259, 260, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 276, 278, 280, 281, 282, 284, 285, 288, 289, 290, 291, 292, 299, 302, 304, 305, 306, 307, 309, 310, 314, 315, 319, 320, 323, 324, 325, 326, 327, 334, 337, 338, 340, 343, 344, 346, 347, 356, 359, 360, 365, 366, 367, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 416, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 445, 446, 447, 450, 452, 453, 458, 462, 473, 478, 487, 496, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 559, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 581, 583, 584, 585, 586, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 605, 616, 617, 618, 619, 620, 630, 631, 632, 633, 636, 638, 639, 642, 643, 644, 645, 646, 648, 651, 652, 653, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 686, 687, 688, 689, 691, 692, 693, 695, 696, 698, 699, 700, 701, 702, 704, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 734, 743, 745, 749, 750, 752, 753, 755, 756, 757, 758, 759, 760, 761, 764, 765, 766, 767, 768, 769, 773, 776, 778, 779, 781, 783, 784, 785, 786, 787, 797, 798, 803, 804, 805, 806, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 833, 834, 840, 850, 866, 867, 877, 880, 881, 885, 886, 887, 891, 893, 894, 895, 896, 903, 904, 905, 906, 908, 909, 912, 913, 914, 915, 917, 923, 926, 928, 929, 931, 934, 935, 936, 947, 948, 950, 953, 954, 956, 957, 969, 975, 980, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1039, 1040, 1041, 1044, 1045, 1046, 1050, 1053, 1055, 1056, 1057, 1059, 1064, 1065, 1066, 1067, 1069, 1070, 1075, 1079, 1094, 1099, 1108, 1117, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1140, 1141, 1142, 1143, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1206, 1208, 1209, 1210, 1211, 1214, 1215, 1221, 1222, 1223, 1225, 1226, 1228, 1230, 1231, 1233, 1234, 1236, 1237, 1241, 1242, 1243, 1244, 1248, 1249, 1250, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1268, 1269, 1270, 1271, 1274, 1278, 1279, 1280, 1281, 1283, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1318, 1325, 1334, 1337, 1341, 1342, 1343, 1344, 1351, 1352, 1353, 1356, 1358, 1360, 1362, 1371, 1380, 1385, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1397, 1399, 1401, 1402], "value1": [692, 850], "value2": [692, 850], "value_a": 1399, "value_b": 1399, "value_count": [759, 850, 1371], "value_cum_sum": [445, 850], "value_cum_sum_all_fil": [445, 850], "value_nam": [271, 323, 356, 906, 934, 969], "value_var": [271, 323, 356, 906, 934, 969], "valueerror": [10, 16, 21, 213], "valueexcept": 810, "var": [41, 188, 356, 676, 677, 850, 969, 1371, 1388], "var_samp": 1388, "vari": [157, 163, 213, 455, 1072, 1402], "variabl": [31, 38, 43, 47, 49, 50, 51, 52, 64, 65, 85, 162, 164, 167, 170, 171, 172, 186, 189, 197, 271, 311, 323, 356, 872, 873, 883, 906, 911, 924, 934, 969, 1346, 1371, 1381, 1383, 1399], "variable_nam": [271, 323, 356, 906, 934, 969], "variad": 154, "varianc": [327, 356, 506, 546, 676, 677, 762, 839, 850, 936, 969, 1130, 1171, 1265, 1361, 1371, 1392], "variou": [154, 212, 219, 356, 850, 874, 969, 974, 975, 1371], "vector": [661, 663, 665, 667, 669, 672, 674, 676, 850, 1257, 1258, 1260, 1263, 1264, 1265, 1371], "vector_index_format": 200, "vectoris": [474, 475, 1095, 1096], "vein": 207, "verbos": [30, 176, 178, 207, 705, 1296], "veri": [154, 257, 320, 356, 597, 850, 952, 1393], "verifi": [260, 356, 896, 969], "versicolor": [356, 359], "version": [39, 40, 43, 44, 55, 63, 64, 67, 134, 140, 152, 153, 156, 157, 158, 160, 164, 167, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 197, 211, 214, 215, 224, 245, 246, 259, 271, 280, 288, 296, 303, 308, 313, 314, 318, 319, 326, 332, 337, 356, 359, 427, 446, 449, 454, 461, 474, 475, 487, 498, 503, 505, 506, 519, 526, 604, 605, 611, 615, 652, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 695, 703, 737, 748, 756, 763, 772, 775, 780, 824, 826, 827, 829, 850, 866, 867, 872, 878, 883, 891, 895, 906, 911, 913, 917, 921, 924, 927, 931, 940, 941, 947, 969, 975, 1064, 1071, 1078, 1087, 1088, 1095, 1096, 1108, 1119, 1125, 1127, 1129, 1130, 1148, 1149, 1249, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1286, 1294, 1328, 1345, 1349, 1351, 1354, 1371, 1376, 1399], "versu": [223, 356, 877, 969], "vertic": [66, 233, 324, 328, 356, 695, 711, 1286, 1302], "vertical_relax": 66, "via": [31, 152, 153, 154, 158, 162, 164, 167, 170, 171, 172, 210, 212, 224, 257, 290, 356, 449, 597, 706, 850, 878, 913, 969, 978, 1297], "view": [204, 597, 850], "virtual": 149, "visibl": [18, 231, 356, 1126, 1371], "visit": [446, 850, 1064, 1371], "visual": [252, 254, 356, 612, 924, 969], "volk": 148, "vote": [704, 706, 1295, 1297], "vowel": [719, 720, 1310, 1311], "vstack": [66, 233, 356], "w": [41, 154, 245, 291, 356, 698, 702, 704, 706, 766, 768, 891, 969, 975, 1289, 1293, 1295, 1297, 1320, 1383, 1384, 1387], "w_i": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "wa": [39, 43, 44, 63, 107, 140, 152, 153, 157, 158, 160, 164, 167, 170, 171, 172, 176, 177, 178, 179, 215, 224, 245, 259, 280, 288, 308, 313, 314, 319, 326, 356, 359, 427, 446, 449, 503, 505, 506, 653, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 721, 756, 794, 826, 827, 850, 867, 878, 891, 895, 917, 931, 969, 975, 1064, 1125, 1127, 1129, 1130, 1250, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1312, 1345, 1351, 1371, 1376, 1394, 1399], "wai": [98, 100, 133, 135, 136, 137, 139, 161, 162, 171, 244, 258, 279, 302, 335, 356, 482, 642, 681, 692, 704, 781, 840, 846, 850, 875, 882, 890, 910, 918, 926, 937, 945, 952, 969, 973, 1103, 1270, 1295, 1371], "wait": [49, 50, 51, 52, 969], "walk": 779, "want": [65, 136, 138, 152, 157, 158, 162, 164, 167, 207, 233, 264, 276, 288, 303, 356, 431, 454, 466, 513, 596, 597, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 685, 697, 714, 719, 720, 721, 775, 784, 789, 792, 798, 822, 825, 841, 850, 873, 927, 944, 969, 975, 1044, 1071, 1083, 1133, 1221, 1288, 1305, 1310, 1311, 1312, 1371, 1386], "warehous": 155, "warn": [102, 103, 106, 107, 110, 117, 119, 120, 130, 169, 638, 808, 809, 850, 1371], "watermark": [47, 356], "wb": [41, 356], "we": [47, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 212, 223, 224, 245, 260, 280, 288, 326, 356, 359, 449, 477, 482, 495, 528, 560, 588, 596, 597, 658, 662, 664, 666, 668, 670, 673, 675, 677, 706, 719, 720, 738, 788, 789, 790, 791, 792, 793, 810, 837, 838, 840, 850, 877, 878, 887, 891, 896, 901, 914, 917, 969, 1098, 1103, 1116, 1151, 1185, 1221, 1297, 1311, 1329, 1371, 1376, 1383], "weather": [719, 720, 1310, 1311], "wed": [356, 359], "wednesdai": [245, 356, 484, 487, 891, 969, 1105, 1108], "week": [245, 260, 288, 326, 356, 454, 466, 477, 482, 495, 497, 504, 658, 662, 664, 666, 668, 670, 673, 675, 677, 775, 789, 790, 792, 793, 794, 837, 838, 850, 891, 896, 917, 969, 975, 1071, 1083, 1098, 1103, 1116, 1118, 1128, 1371, 1395], "week_mask": [454, 466, 775, 1071, 1083], "weekdai": [462, 478], "weekend": [454, 466, 775, 1071, 1083], "weekli": [245, 356, 495, 891, 969, 1116], "weghorst": [706, 1297], "weight": [148, 503, 504, 505, 506, 660, 661, 663, 665, 667, 669, 672, 674, 676, 689, 850, 1127, 1128, 1129, 1130, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1281, 1371], "wei\u00df": 1394, "well": [41, 152, 153, 154, 167, 356, 534, 829, 850, 1156, 1371, 1399], "were": [207, 652, 653, 846, 850, 1249, 1250, 1371], "west": [76, 261, 356, 897, 969], "what": [53, 212, 265, 276, 356, 454, 596, 697, 721, 850, 902, 969, 1071, 1288, 1312], "whatev": 207, "when": [10, 11, 15, 18, 20, 24, 38, 39, 40, 41, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 73, 89, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 147, 148, 152, 153, 154, 155, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 183, 187, 207, 215, 223, 229, 231, 233, 235, 236, 238, 245, 259, 261, 264, 272, 279, 285, 289, 291, 294, 295, 299, 302, 308, 311, 313, 314, 318, 319, 321, 325, 331, 356, 401, 414, 431, 432, 436, 454, 466, 503, 505, 506, 512, 581, 588, 609, 642, 644, 652, 653, 683, 691, 692, 697, 703, 707, 709, 710, 714, 715, 721, 723, 728, 729, 730, 733, 734, 750, 773, 775, 784, 798, 808, 833, 850, 867, 877, 886, 891, 895, 897, 901, 907, 915, 919, 920, 923, 926, 931, 932, 935, 939, 966, 969, 1013, 1026, 1044, 1045, 1053, 1066, 1071, 1083, 1126, 1127, 1129, 1130, 1133, 1136, 1161, 1206, 1249, 1250, 1269, 1271, 1274, 1288, 1294, 1298, 1300, 1301, 1305, 1306, 1312, 1314, 1319, 1320, 1321, 1324, 1325, 1345, 1346, 1351, 1371, 1386, 1399], "when1": 840, "when2": 840, "when_matched_update_al": [40, 356], "when_not_matched_insert_al": [40, 356], "where": [41, 55, 58, 107, 154, 155, 157, 213, 227, 228, 233, 236, 245, 257, 261, 271, 280, 284, 290, 303, 304, 313, 318, 323, 325, 327, 356, 383, 487, 497, 500, 502, 504, 513, 584, 590, 596, 633, 651, 681, 689, 692, 694, 721, 741, 762, 774, 780, 782, 826, 827, 829, 831, 839, 840, 850, 880, 881, 887, 891, 897, 906, 914, 927, 928, 934, 935, 936, 969, 995, 1108, 1118, 1122, 1124, 1128, 1133, 1137, 1233, 1248, 1270, 1281, 1285, 1312, 1332, 1361, 1362, 1371, 1380, 1388, 1398, 1399, 1401], "wherea": [152, 167, 288, 356, 429, 433, 482, 495, 630, 631, 658, 850, 917, 969, 1103, 1116, 1230, 1231, 1371], "wherev": [41, 264, 342, 356, 597, 850, 1221, 1371], "whether": [38, 49, 53, 55, 97, 137, 139, 147, 148, 157, 163, 164, 170, 172, 187, 191, 230, 256, 260, 297, 302, 356, 369, 371, 385, 386, 466, 467, 483, 525, 551, 552, 638, 681, 682, 692, 707, 709, 773, 798, 850, 896, 901, 913, 922, 926, 969, 975, 982, 983, 997, 998, 1043, 1048, 1083, 1084, 1104, 1125, 1147, 1148, 1176, 1177, 1270, 1298, 1300, 1371, 1383, 1399], "which": [1, 6, 10, 11, 21, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 66, 136, 138, 152, 153, 154, 155, 156, 157, 162, 163, 164, 167, 168, 169, 170, 171, 172, 183, 186, 188, 207, 215, 216, 223, 224, 227, 228, 231, 233, 244, 245, 250, 259, 260, 280, 288, 296, 313, 314, 319, 321, 325, 326, 356, 369, 406, 414, 449, 454, 466, 477, 482, 484, 495, 504, 510, 534, 536, 539, 541, 542, 543, 544, 588, 596, 597, 609, 611, 658, 662, 664, 666, 668, 670, 673, 675, 677, 720, 738, 775, 789, 790, 792, 793, 794, 808, 809, 837, 838, 840, 850, 867, 869, 872, 875, 877, 878, 880, 882, 883, 891, 895, 896, 911, 913, 917, 921, 924, 931, 932, 935, 937, 969, 975, 1018, 1026, 1071, 1083, 1098, 1103, 1105, 1116, 1126, 1128, 1133, 1134, 1156, 1159, 1162, 1164, 1165, 1166, 1167, 1213, 1271, 1329, 1349, 1351, 1371, 1381, 1387, 1399, 1402], "while": [40, 65, 153, 156, 157, 168, 172, 183, 187, 197, 207, 257, 271, 320, 323, 325, 356, 432, 652, 715, 850, 873, 906, 934, 935, 969, 1045, 1249, 1306, 1371], "white": [41, 356], "whitespac": [140, 728, 729, 730, 1319, 1320, 1321, 1394], "whole": [596, 691, 692, 704, 850, 952, 969, 1295], "whose": [58, 101, 260, 280, 356, 507, 796, 850, 896, 969, 975], "why": [872, 883, 911, 924, 969], "wide": [154, 243, 271, 280, 323, 324, 356, 906, 934, 969], "wider": 56, "width": [27, 41, 67, 152, 153, 167, 356, 359, 587, 777, 969, 1212, 1371, 1376], "wiki": 21, "wikipedia": 21, "wildcard": [149, 507, 744, 784, 785, 798, 824, 846, 850], "win_loss": [41, 356], "window": [152, 153, 167, 245, 288, 356, 446, 503, 505, 506, 597, 638, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 778, 826, 827, 850, 891, 917, 969, 1064, 1127, 1129, 1130, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1371], "window_s": [659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 826, 827, 850, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1371], "windowmappingstrategi": [638, 850], "winter": [707, 709, 719, 720, 1298, 1300], "wise": [41, 58, 154, 238, 356, 374, 375, 376, 377, 378, 379, 437, 438, 439, 508, 592, 686, 687, 688, 752, 753, 798, 824, 850, 986, 987, 988, 989, 990, 991, 1055, 1056, 1057, 1131, 1217, 1218, 1278, 1279, 1280, 1343, 1344, 1371], "wish": [215, 319, 356, 426, 427, 755, 756, 850, 867, 931, 969, 1038, 1039, 1355, 1356, 1371], "with_column": [1, 13, 61, 64, 147, 213, 245, 279, 288, 318, 324, 331, 356, 361, 366, 368, 383, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 399, 400, 401, 402, 406, 411, 412, 414, 415, 428, 429, 431, 432, 433, 436, 441, 442, 443, 444, 445, 447, 450, 454, 455, 457, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 496, 497, 499, 501, 502, 504, 511, 512, 517, 522, 524, 526, 532, 533, 534, 537, 538, 540, 541, 542, 543, 544, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 595, 596, 597, 617, 619, 621, 622, 624, 626, 628, 629, 632, 633, 634, 638, 639, 642, 643, 645, 648, 652, 653, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 683, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 737, 738, 739, 741, 742, 743, 745, 748, 749, 754, 757, 764, 766, 768, 771, 775, 776, 777, 778, 779, 783, 784, 785, 787, 788, 790, 791, 795, 805, 808, 809, 811, 814, 816, 819, 830, 834, 836, 838, 840, 846, 850, 872, 883, 891, 893, 910, 911, 917, 924, 939, 969, 975, 1065, 1102, 1242, 1300, 1371, 1399], "with_column_nam": 167, "with_columns_seq": [356, 969], "with_context": 969, "with_field": [597, 850], "with_replac": [292, 356, 576, 680, 850, 1201, 1268, 1371], "with_row_count": [356, 969], "with_row_index": [1, 288, 332, 356, 662, 664, 666, 668, 670, 673, 675, 677, 850, 941, 969, 1269, 1371, 1376], "within": [47, 53, 54, 55, 67, 77, 85, 176, 177, 178, 179, 198, 199, 201, 213, 244, 245, 246, 260, 288, 326, 356, 526, 648, 692, 850, 891, 896, 917, 969, 1149, 1371, 1399], "without": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 74, 80, 99, 107, 110, 132, 140, 143, 144, 145, 146, 147, 148, 156, 159, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 259, 261, 265, 303, 313, 314, 318, 324, 325, 356, 359, 360, 361, 446, 447, 454, 466, 528, 597, 645, 659, 660, 662, 664, 666, 668, 670, 671, 673, 675, 677, 697, 707, 709, 721, 775, 777, 781, 808, 809, 828, 850, 872, 873, 883, 895, 897, 902, 911, 927, 935, 943, 969, 973, 1043, 1048, 1064, 1065, 1071, 1083, 1151, 1242, 1255, 1256, 1259, 1261, 1262, 1288, 1298, 1300, 1312, 1349, 1351, 1354, 1371, 1376, 1401], "without_fil": [156, 168, 169], "wod": [730, 1321], "womp": [322, 356, 933, 969], "word": [155, 719, 720, 729, 730, 741, 1332, 1394], "work": [41, 74, 80, 152, 153, 158, 162, 164, 173, 295, 331, 356, 369, 371, 407, 431, 432, 435, 436, 507, 516, 560, 589, 596, 597, 621, 622, 624, 626, 628, 629, 638, 710, 714, 715, 723, 734, 758, 808, 850, 913, 920, 939, 969, 973, 975, 982, 983, 1019, 1044, 1045, 1050, 1053, 1140, 1185, 1214, 1301, 1305, 1306, 1314, 1325, 1357, 1371], "workaround": 356, "workbook": [41, 157, 163, 356], "workday_raas_format": 200, "worker": [913, 969], "working_with_conditional_format": [41, 356], "working_with_sparklin": [41, 356], "worksheet": [41, 157, 163, 356], "workspac": 192, "workspace_url": 192, "world": [1, 21, 697, 721, 728, 729, 730, 975, 1192, 1288, 1312, 1319, 1320, 1321, 1382, 1385, 1394], "wors": [926, 969], "worth": [560, 1185], "worthwhil": [176, 178], "would": [106, 152, 153, 167, 212, 314, 318, 356, 359, 382, 393, 454, 466, 565, 596, 597, 608, 638, 644, 648, 750, 773, 775, 833, 850, 994, 1005, 1071, 1083, 1190, 1241, 1244, 1341, 1351, 1371, 1376, 1397], "wrap": [87, 140, 428, 534, 596, 850, 1040, 1371], "wrap_numer": [428, 850, 1040, 1371], "wrapper": [65, 873, 969], "writabl": [36, 38, 43, 44, 45, 46, 47, 296, 314, 356, 1351, 1371], "write": [36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 143, 151, 153, 158, 207, 219, 356, 436, 612, 615, 850, 899, 924, 969, 975, 1053, 1371], "write_avro": 356, "write_clipboard": [151, 356], "write_csv": [37, 153, 167, 356], "write_databas": 356, "write_delta": 356, "write_excel": 356, "write_iceberg": 356, "write_ipc": [158, 356], "write_ipc_stream": 356, "write_json": 356, "write_markdown_frame_to_stdout": 207, "write_ndjson": [45, 356], "write_parquet": 356, "write_t": [47, 356], "write_to_dataset": [47, 356], "writeabl": [314, 356, 1351, 1371], "writer": [40, 356], "writer_properti": [40, 356], "writerproperti": [40, 356], "written": [6, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 296, 356, 611, 921, 969], "ww": [1394, 1401], "www": [716, 746, 1307], "x": [28, 58, 66, 89, 109, 134, 140, 143, 152, 153, 155, 157, 163, 167, 180, 181, 183, 211, 231, 249, 252, 254, 259, 280, 290, 291, 320, 323, 324, 356, 359, 361, 366, 368, 370, 389, 394, 415, 441, 448, 501, 502, 517, 522, 524, 526, 548, 555, 567, 593, 595, 596, 597, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 637, 643, 651, 652, 653, 657, 686, 689, 725, 748, 749, 754, 757, 764, 766, 768, 771, 772, 778, 782, 784, 785, 787, 798, 810, 811, 814, 816, 819, 824, 829, 834, 840, 850, 895, 901, 925, 927, 934, 969, 974, 975, 1006, 1047, 1059, 1136, 1155, 1221, 1249, 1250, 1278, 1281, 1316, 1349, 1353, 1354, 1371, 1376, 1383, 1384, 1387, 1393, 1394, 1399, 1401], "x00": [410, 411, 412, 413, 414, 416, 699, 1022, 1023, 1024, 1025, 1026, 1028, 1290], "x01": [414, 1026], "x05": [414, 1026], "x07": 415, "x1": 415, "x10": [414, 1026], "x80": 415, "x83": 415, "x88": 415, "x8e": 415, "x99": 415, "x_": [504, 850, 1128, 1371], "x_0": [324, 356, 503, 504, 505, 506, 850, 1127, 1128, 1129, 1130, 1371], "x_1": [324, 356, 504, 850, 1128, 1371], "x_2": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "x_i": [504, 850, 1128, 1371], "x_invers": [643, 850], "x_pow_8": 1393, "x_round": 1393, "x_round_1": 1393, "x_squar": [643, 850], "x_t": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "x_uniqu": [620, 850], "x_y": [394, 567], "xb": 415, "xb9neq": 415, "xbd": 415, "xc14": 415, "xd3": 415, "xdist": 1402, "xee": 415, "xf4v": 415, "xf9": 415, "xfb": 415, "xff": [410, 411, 412, 413, 416, 699, 1022, 1023, 1024, 1025, 1028, 1290], "xi": [705, 1296], "xl": 157, "xlog2": [619, 643, 850], "xlsb": 157, "xlsx": [41, 157, 356], "xlsx2csv": [157, 175], "xlsx2csv_option": 157, "xlsxwriter": [41, 175, 356], "xor": [425, 850, 1037, 1371, 1390], "xor_xi": [764, 850], "xx": [11, 59, 61, 187, 223, 250, 303, 356, 877, 969, 975, 1387, 1394, 1401], "xxx": [227, 356, 746, 880, 969], "xy": [59, 61], "xyz": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 366, 698, 705, 850, 1289, 1296, 1347, 1371, 1394], "y": [28, 58, 66, 89, 109, 134, 140, 143, 180, 181, 183, 211, 231, 252, 254, 259, 280, 290, 291, 320, 323, 324, 356, 359, 366, 368, 370, 389, 394, 415, 484, 487, 501, 502, 522, 524, 548, 555, 567, 595, 597, 620, 622, 624, 626, 628, 629, 632, 633, 637, 651, 652, 653, 657, 733, 735, 736, 748, 757, 764, 766, 768, 771, 772, 782, 787, 794, 810, 814, 816, 819, 829, 834, 850, 895, 925, 927, 934, 969, 974, 975, 1006, 1047, 1105, 1108, 1249, 1250, 1324, 1326, 1327, 1371, 1376, 1387, 1394, 1395, 1401], "y_": [503, 504, 505, 506, 850, 1127, 1128, 1129, 1130, 1371], "y_0": [324, 356, 503, 504, 505, 506, 850, 1127, 1128, 1129, 1130, 1371], "y_1": [324, 356], "y_i": [504, 850, 1128, 1371], "y_mul": 748, "y_t": [503, 505, 506, 850, 1127, 1129, 1130, 1371], "y_uniqu": [620, 850], "ya": [723, 1314], "ya29": 169, "ye": [143, 840], "year": [53, 55, 245, 260, 288, 303, 326, 356, 454, 466, 467, 468, 477, 478, 480, 482, 495, 496, 658, 662, 664, 666, 668, 670, 673, 675, 677, 775, 788, 789, 790, 791, 792, 793, 837, 838, 850, 891, 896, 917, 969, 975, 1071, 1083, 1084, 1085, 1098, 1099, 1101, 1103, 1116, 1117, 1395], "yellow": [356, 360, 410, 411, 412, 413, 416], "yield": [137, 139, 152, 153, 154, 167, 231, 233, 256, 320, 356, 517, 596, 638, 850, 969, 1126, 1133, 1371], "you": [1, 11, 15, 41, 47, 52, 58, 65, 66, 133, 135, 136, 137, 138, 139, 149, 152, 153, 154, 155, 157, 158, 161, 162, 164, 167, 171, 173, 207, 215, 233, 236, 245, 256, 257, 260, 264, 276, 280, 284, 288, 289, 290, 291, 303, 310, 313, 319, 320, 321, 323, 342, 356, 359, 426, 427, 431, 454, 466, 474, 475, 477, 481, 484, 487, 507, 513, 534, 560, 588, 596, 597, 612, 638, 643, 644, 650, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 685, 697, 714, 719, 720, 721, 741, 744, 750, 755, 756, 775, 784, 789, 792, 794, 798, 808, 812, 822, 825, 829, 833, 841, 850, 867, 873, 887, 891, 896, 913, 914, 917, 924, 927, 931, 932, 934, 944, 952, 969, 973, 975, 1038, 1039, 1044, 1071, 1083, 1095, 1096, 1102, 1105, 1108, 1133, 1156, 1185, 1221, 1240, 1241, 1246, 1288, 1305, 1310, 1311, 1312, 1332, 1341, 1349, 1355, 1356, 1371, 1376, 1381, 1386, 1402], "your": [39, 41, 57, 58, 100, 147, 152, 153, 154, 155, 157, 173, 207, 257, 259, 264, 290, 291, 294, 310, 330, 335, 342, 356, 359, 459, 504, 519, 597, 706, 733, 735, 736, 743, 812, 850, 895, 901, 919, 938, 945, 952, 969, 973, 1076, 1128, 1221, 1297, 1324, 1326, 1327, 1334, 1371, 1376, 1402], "yy": [11, 59, 61, 187, 223, 250, 303, 356, 877, 969, 975, 1387, 1394, 1401], "yyi": [227, 356, 746, 880, 969], "yyyi": [41, 356], "yz": [59, 61], "z": [41, 66, 89, 140, 181, 231, 252, 254, 259, 290, 291, 320, 323, 324, 356, 366, 368, 370, 526, 555, 597, 622, 624, 626, 628, 629, 637, 651, 652, 653, 697, 705, 707, 709, 721, 733, 736, 766, 768, 787, 814, 816, 819, 825, 829, 834, 850, 895, 925, 927, 934, 969, 974, 975, 1136, 1249, 1250, 1288, 1296, 1298, 1300, 1312, 1324, 1327, 1371, 1383, 1387, 1399, 1401], "z_0": [324, 356], "z_1": [324, 356], "zap": 975, "zero": [29, 41, 133, 134, 150, 152, 153, 158, 160, 164, 182, 185, 211, 235, 245, 257, 289, 303, 308, 314, 315, 356, 512, 588, 593, 678, 681, 689, 743, 757, 850, 870, 886, 891, 969, 1052, 1136, 1213, 1281, 1334, 1345, 1351, 1352, 1371, 1393, 1399], "zero_copy_onli": [1351, 1371], "zfill": [718, 764, 850, 1309], "zip": 1402, "zip_with": [238, 356, 1371], "zone": [73, 183, 184, 187, 455, 459, 481, 504, 736, 791, 792, 793, 850, 975, 1072, 1076, 1102, 1128, 1327, 1371], "zoneinfo": [73, 975], "zoom": [41, 356], "zstd": [40, 43, 44, 47, 50, 52, 356, 969], "zz": [187, 223, 250, 303, 356, 877, 969, 1387, 1394, 1401], "zzz": 746, "\u03bc": [140, 216, 245, 257, 288, 290, 291, 310, 326, 356, 455, 456, 458, 459, 460, 461, 463, 465, 469, 471, 472, 474, 475, 476, 477, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 658, 662, 664, 666, 668, 670, 673, 675, 677, 733, 736, 791, 792, 793, 794, 800, 850, 869, 891, 917, 969, 975, 1072, 1073, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1088, 1089, 1093, 1095, 1096, 1097, 1098, 1102, 1103, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1324, 1327, 1394], "\u0441\u0438\u043d\u0438\u0439": 1394, "\u0967\u096f\u096f\u096f": 975, "\u0968\u0966\u096d\u096d": 975, "\u4eac\u90fd": 975, "\u5927\u962a": 975, "\u6771\u4eac": [431, 432, 714, 715, 975, 1044, 1045, 1305, 1306], "\u90fd\u5e02": 975, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [716, 1307], "\uff54\uff45\uff53\uff54": 1394, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1394, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1394, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1394, "\ud835\udf0b": 1393}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType.to_dtype_expr", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.ScanCastOptions", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.dtype_of", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.parquet.ParquetFieldOverwrites", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_metadata", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.__setitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.match_to_schema", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "DataType expressions", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_business_day", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_kurtosis", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.__getitem__", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.match_to_schema", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.QueryOptFlags", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.backward_fill", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.bottom_k_by", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_business_day", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.forward_fill", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.repeat_by", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_kurtosis", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.top_k_by", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1387, 1400], "IF": 1391, "__array__": [209, 977], "__arrow_c_stream__": [210, 978], "__dataframe__": 211, "__getitem__": [212, 865, 979], "__iter__": 334, "__setitem__": 213, "ab": [365, 980, 1393], "aco": 1396, "acosd": 1396, "add": 366, "add_business_dai": [454, 1071], "agg": [335, 945], "agg_group": 367, "aggreg": [208, 364, 864, 976, 1388], "alia": [368, 981], "alias": [1388, 1393, 1394], "align_fram": 58, "all": [336, 369, 385, 551, 765, 946, 982, 997, 1176, 1400], "all_horizont": 766, "and_": 370, "ani": [371, 386, 552, 767, 983, 998, 1177], "any_horizont": 768, "api": [1, 59, 60, 61, 62, 862, 1399], "append": [372, 984], "approx_n_uniqu": [214, 373, 769, 866, 985], "arang": 770, "arcco": [374, 986], "arccosh": [375, 987], "arcsin": [376, 988], "arcsinh": [377, 989], "arctan": [378, 990], "arctan2": 771, "arctan2d": 772, "arctanh": [379, 991], "arg_max": [380, 387, 553, 992, 999, 1178], "arg_min": [381, 388, 554, 993, 1000, 1179], "arg_sort": [382, 994], "arg_sort_bi": 773, "arg_tru": [383, 995], "arg_uniqu": [384, 996], "arg_wher": 774, "arr": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "arrai": [67, 842, 1363, 1389], "array_agg": 1389, "array_contain": 1389, "array_get": 1389, "array_length": 1389, "array_low": 1389, "array_mean": 1389, "array_revers": 1389, "array_sum": 1389, "array_to_str": 1389, "array_uniqu": 1389, "array_upp": 1389, "asin": 1396, "asind": 1396, "assert": 1402, "assert_frame_equ": 176, "assert_frame_not_equ": 177, "assert_series_equ": 178, "assert_series_not_equ": 179, "atan": 1396, "atan2": 1396, "atan2d": 1396, "atand": 1396, "attribut": [351, 964, 1364], "avail": 1, "avg": 1388, "avro": 863, "backward_fil": [409, 1021], "base_utc_offset": [455, 1072], "basepartitioncontext": 144, "batched_read": 142, "batchedcsvread": 142, "bin": [410, 411, 412, 413, 414, 415, 416, 1022, 1023, 1024, 1025, 1026, 1027, 1028], "binari": [68, 843, 856, 1365], "bit_and": 1390, "bit_count": 1390, "bit_length": 1394, "bit_or": 1390, "bit_xor": 1390, "bitwis": 1390, "bitwise_and": [417, 1029], "bitwise_count_on": [418, 1030], "bitwise_count_zero": [419, 1031], "bitwise_leading_on": [420, 1032], "bitwise_leading_zero": [421, 1033], "bitwise_or": [422, 1034], "bitwise_trailing_on": [423, 1035], "bitwise_trailing_zero": [424, 1036], "bitwise_xor": [425, 1037], "boolean": [69, 844, 1366], "bottom_k": [215, 426, 867, 1038], "bottom_k_bi": [427, 1039], "build_info": 63, "business_day_count": 775, "cach": 868, "cancel": 961, "cast": [216, 428, 863, 869, 1040, 1397], "cast_time_unit": [456, 1073], "cat": [429, 430, 431, 432, 433, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "catalog": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "cataloginfo": 198, "categor": 70, "categori": [845, 1367], "categoricalremappingwarn": 102, "cbrt": [434, 1049, 1393], "ceil": [435, 1050, 1393], "centuri": [457, 1074], "chronoformatwarn": 103, "chunk_length": 1051, "claus": 1387, "clear": [217, 870, 1052], "clip": [436, 1053], "clipboard": 863, "clone": [218, 871, 1054], "cloud": 863, "co": [437, 1055, 1396], "coalesc": [776, 1391], "col": 846, "collect": 872, "collect_al": 64, "collect_all_async": 65, "collect_async": 873, "collect_schema": [219, 874], "column": [180, 181, 220, 847, 875], "columninfo": 199, "columnnotfounderror": 104, "combin": [458, 1075], "comparison": [856, 1375], "comput": [352, 848, 1368], "computeerror": 105, "concat": [66, 555, 695, 1180, 1286, 1394], "concat_arr": 777, "concat_list": 778, "concat_str": 779, "concat_w": 1394, "condit": 1391, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 207], "conjunct": 856, "contain": [389, 410, 556, 696, 1001, 1022, 1181, 1287], "contains_ani": [697, 1288], "context": 207, "convers": 861, "convert_time_zon": [459, 1076], "corr": [221, 780, 1388], "cosd": 1396, "cosh": [438, 1056], "cot": [439, 1057, 1396], "cotd": 1396, "count": [222, 337, 440, 781, 876, 947, 1058, 1388], "count_match": [390, 557, 698, 1002, 1182, 1289], "cov": 782, "creat": 1401, "create_list_strategi": 182, "credenti": 863, "credentialprovid": 32, "credentialprovideraw": 33, "credentialproviderazur": 34, "credentialprovidergcp": 35, "csv": [142, 863], "cum_count": [441, 783, 1059], "cum_fold": 784, "cum_max": [442, 1060], "cum_min": [443, 1061], "cum_prod": [444, 1062], "cum_reduc": 785, "cum_sum": [445, 786, 1063], "cum_sum_horizont": 787, "cumulative_ev": [446, 1064], "customufuncwarn": 106, "cut": [447, 1065], "dai": [462, 1079], "data": 362, "databas": 863, "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 183, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356], "dataorientationwarn": 107, "dataset": 863, "datasourceformat": 200, "datatyp": [48, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 361, 362], "date": [72, 460, 788, 1077, 1394], "date_part": 1395, "date_rang": [789, 790], "datetim": [73, 461, 791, 1078], "datetime_rang": [792, 793], "decim": 74, "decod": [411, 699, 1023, 1290], "decor": 207, "defer": 97, "degre": [448, 1396], "delet": 1401, "delta": 863, "describ": [223, 877, 1066], "descript": [353, 965, 1369], "deseri": [224, 449, 878], "diff": [450, 558, 1067, 1183], "disable_string_cach": 98, "distinct": 1387, "div": 1393, "document": 1399, "dot": [451, 1068], "drop": [225, 879, 1401], "drop_in_plac": 226, "drop_nan": [227, 452, 880, 1069], "drop_nul": [228, 453, 559, 881, 1070, 1184], "dst_offset": [463, 1080], "dt": [454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120], "dtype": [184, 229, 882, 1121], "dtype_of": 99, "duplicateerror": 108, "durat": [75, 794], "element": 795, "enable_string_cach": 100, "encod": [412, 700, 1024, 1291], "ends_with": [413, 429, 701, 1025, 1041, 1292, 1394], "engine_config": 944, "entropi": [500, 1122], "enum": 76, "epoch": [464, 1081], "eq": [501, 601, 1123], "eq_miss": [502, 1124], "equal": [230, 1125], "error": 363, "escape_regex": [101, 702, 1293], "estimated_s": [231, 1126], "eval": [560, 1185], "ewm_mean": [503, 1127], "ewm_mean_bi": [504, 1128], "ewm_std": [505, 1129], "ewm_var": [506, 1130], "exampl": [1, 975, 1402], "excel": 863, "except": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 363, 1400], "exclud": [507, 796], "execut": 1380, "execute_glob": 1381, "exp": [508, 1131, 1393], "explain": [883, 1401], "explain_al": 132, "explod": [232, 391, 509, 561, 703, 884, 1003, 1132, 1186, 1294], "export": [354, 1370], "expr": [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "express": [361, 850, 973, 1399], "extend": [1, 233, 1133], "extend_const": [510, 1134], "extract": [704, 1295, 1395], "extract_al": [705, 1296], "extract_group": [706, 1297], "extract_mani": [707, 1298], "feather": 863, "fetch": 962, "fetch_block": 963, "field": [77, 744, 1335, 1336], "fill_nan": [234, 511, 885, 1135], "fill_nul": [235, 512, 886, 1136], "filter": [236, 513, 887, 1137], "find": [708, 1299], "find_mani": [709, 1300], "first": [338, 392, 514, 562, 797, 888, 948, 1004, 1138, 1187, 1388], "flag": [237, 1139], "flatten": 515, "float32": 78, "float64": 79, "floor": [516, 1140, 1393], "floordiv": 517, "fold": [238, 798], "format": 799, "forward_fil": [518, 1141], "frame": 1399, "from": 1387, "from_arrow": 133, "from_datafram": 134, "from_dict": [135, 136], "from_epoch": 800, "from_json": 519, "from_numpi": 137, "from_panda": 138, "from_record": 139, "from_repr": 140, "function": [1, 361, 849, 861, 975, 1392], "gather": [520, 563, 1142, 1188], "gather_everi": [239, 521, 564, 889, 1143, 1189], "ge": [522, 1144], "get": [393, 523, 565, 1005, 1190], "get_categori": [430, 1042], "get_chunk": 1145, "get_column": [240, 242], "get_column_index": 241, "get_index_typ": 141, "get_polars_schema": 203, "get_table_info": 193, "glimps": 243, "global": 1399, "gpuengin": [944, 966], "greatest": 1391, "group": [801, 1387], "group_bi": [244, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 890, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960], "group_by_dynam": [245, 891], "groupbi": [334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 355, 967], "gt": [524, 1146], "has_multiple_output": 602, "has_nul": [525, 1147], "has_valid": 1148, "hash": [526, 1149], "hash_row": 246, "have": 1387, "head": [247, 339, 527, 566, 710, 802, 892, 949, 1150, 1191, 1301], "height": 248, "helper": 1402, "hist": [528, 1151], "hour": [465, 1082], "hstack": 249, "iceberg": 863, "ifnul": 1391, "implod": [529, 803, 1152], "import": 975, "in_process": [961, 962, 963], "index": 0, "index_of": [530, 1153], "initcap": 1394, "inprocessqueri": [961, 962, 963, 968], "input": 863, "insert_column": 250, "inspect": [531, 893], "instanc": 207, "int128": 80, "int16": 81, "int32": 82, "int64": 83, "int8": 84, "int_rang": [804, 805], "interfac": 1398, "interpol": [251, 532, 894, 1154], "interpolate_bi": [533, 1155], "intersect": 1400, "introduct": 1399, "invalidoperationerror": 109, "io": [142, 143, 144, 145, 146, 147, 973], "ipc": 863, "is_between": [534, 1156], "is_business_dai": [466, 1083], "is_column": 603, "is_column_select": 604, "is_dupl": [252, 535, 1157], "is_empti": [253, 1158], "is_finit": [536, 1159], "is_first_distinct": [537, 1160], "is_in": [538, 1161], "is_infinit": [539, 1162], "is_last_distinct": [540, 1163], "is_leap_year": [467, 1084], "is_liter": 605, "is_loc": 1043, "is_nan": [541, 1164], "is_not_nan": [542, 1165], "is_not_nul": [543, 1166], "is_nul": [544, 1167], "is_regex_project": 606, "is_sort": 1168, "is_uniqu": [254, 545, 1169], "iso_year": [468, 1085], "item": [255, 1170], "iter_column": 256, "iter_row": 257, "iter_slic": 258, "join": [259, 394, 567, 711, 895, 1006, 1192, 1302, 1387], "join_asof": [260, 896], "join_wher": [261, 897], "json": 863, "json_decod": [712, 1303], "json_encod": [745, 1337], "json_norm": 148, "json_path_match": [713, 1304], "keep": 621, "keyedpartit": 145, "keyedpartitioncontext": 146, "kurtosi": [546, 1171], "lake": 863, "last": [340, 395, 547, 568, 806, 898, 950, 1007, 1172, 1193, 1388], "lazi": [262, 899], "lazyfram": [49, 50, 51, 52, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 969], "lazygroupbi": [945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960], "le": [548, 1173], "least": 1391, "left": 1394, "len": [341, 549, 569, 807, 951, 1174, 1194], "len_byt": [431, 714, 1044, 1305], "len_char": [432, 715, 1045, 1306], "length": 1394, "limit": [263, 550, 900, 1175, 1387], "linear_spac": [808, 809], "list": [85, 185, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 851, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1372], "list_catalog": 194, "list_namespac": 195, "list_tabl": 196, "lit": 810, "ln": 1393, "load": [2, 207], "load_from_fil": 3, "load_profil": 186, "log": [591, 1216, 1393], "log10": [592, 1217, 1393], "log1p": [593, 1218, 1393], "log2": 1393, "lower": 1394, "lower_bound": [594, 1219], "lt": [595, 1220], "ltrim": 1394, "manag": 207, "manipul": [358, 854, 971, 1374], "map": 622, "map_batch": [596, 811, 901], "map_el": [597, 1221], "map_field": 623, "map_group": [342, 812, 952], "map_row": 264, "mapwithoutreturndtypewarn": 110, "match_to_schema": [265, 902], "math": 1393, "max": [266, 343, 396, 570, 598, 813, 903, 953, 1008, 1086, 1195, 1222, 1388], "max_horizont": [267, 814], "mean": [268, 344, 571, 599, 815, 904, 954, 1087, 1196, 1223], "mean_horizont": [269, 816], "median": [270, 345, 397, 572, 600, 817, 905, 955, 1009, 1088, 1197, 1224, 1388], "melt": [271, 906], "merge_sort": [272, 907], "meta": [601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 852], "metadata": 972, "method": 1399, "microsecond": [469, 1089], "millennium": [470, 1090], "millisecond": [471, 1091], "min": [273, 346, 398, 573, 616, 818, 908, 956, 1010, 1092, 1198, 1225, 1388], "min_horizont": [274, 819], "minut": [472, 1093], "miscellan": [357, 853, 861, 970, 1373], "mod": [617, 1393], "mode": [618, 1226], "moduleupgraderequirederror": 111, "month": [473, 1094], "month_end": [474, 1095], "month_start": [475, 1096], "mul": 619, "multipl": [207, 861], "n_chunk": [275, 1227], "n_uniqu": [276, 347, 399, 574, 620, 820, 957, 1011, 1199, 1228], "name": [621, 622, 623, 624, 625, 626, 627, 628, 629, 847, 855, 1229, 1400], "namespaceinfo": 201, "nan_max": [630, 1230], "nan_min": [631, 1231], "nanosecond": [476, 1097], "ne": [607, 632, 1232], "ne_miss": [633, 1233], "neg": 634, "nest": 362, "new": 1, "new_from_index": 1234, "next_batch": 142, "nodataerror": 112, "normal": [716, 1307, 1394], "norowsreturnederror": 113, "not_": [635, 1235], "nth": 821, "null": 86, "null_count": [277, 636, 909, 1236], "nullif": 1391, "numer": [362, 856, 1375], "object": 87, "octet_length": 1394, "od": 863, "offset": 1387, "offset_bi": [477, 1098], "ones": 822, "oper": [856, 975, 1375, 1400, 1401], "option": [207, 863], "or_": 637, "order": 1387, "ordinal_dai": [478, 1099], "other": 362, "outofboundserror": 114, "output": 863, "output_nam": 608, "over": 638, "pad_end": [717, 1308], "pad_start": [718, 1309], "panic": 363, "panicexcept": 115, "parametercollisionerror": 116, "parametr": [180, 181, 182, 183, 184, 185, 186, 187, 188, 1402], "parquet": [143, 863], "parquetfieldoverwrit": 143, "partit": [144, 145, 146, 863], "partition_bi": 278, "partitionbykei": 53, "partitionmaxs": 54, "partitionpart": 55, "pct_chang": [639, 1237], "peak_max": [640, 1238], "peak_min": [641, 1239], "performancewarn": 117, "pi": 1393, "pipe": [279, 642, 910], "pivot": 280, "plot": [359, 1376], "plugin": [147, 149, 973], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 846, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1402], "polarserror": 118, "polarsinefficientmapwarn": 119, "polarswarn": 120, "pop": 609, "pow": [643, 1240, 1393], "prefix": 624, "prefix_field": 625, "product": [281, 644, 1241], "profil": [911, 1402], "provid": 1, "pyarrow": 863, "python": [862, 1399], "qcut": [645, 1242], "quantil": [282, 348, 646, 823, 912, 958, 1243], "quantile_cont": 1388, "quantile_disc": 1388, "quarter": [479, 1100], "queri": [861, 1399], "queryoptflag": 943, "radian": [647, 1396], "random": 861, "rank": [648, 1244], "read_avro": 150, "read_clipboard": 151, "read_csv": 152, "read_csv_batch": 153, "read_databas": 154, "read_database_uri": 155, "read_delta": 156, "read_excel": 157, "read_ipc": 158, "read_ipc_schema": 159, "read_ipc_stream": 160, "read_json": 161, "read_ndjson": 162, "read_od": 163, "read_parquet": 164, "read_parquet_metadata": 165, "read_parquet_schema": 166, "rechunk": [283, 649, 1245], "reduc": 824, "refer": 862, "regexp_lik": 1394, "regist": 1382, "register_dataframe_namespac": 59, "register_expr_namespac": 60, "register_glob": 1383, "register_io_sourc": 147, "register_lazyframe_namespac": 61, "register_mani": 1384, "register_plugin_funct": 149, "register_series_namespac": 62, "registr": 1, "reinterpret": [414, 650, 1026, 1246], "remot": 913, "remov": [284, 914], "renam": [285, 915, 1247], "rename_field": [746, 1338], "repeat": 825, "repeat_bi": [651, 1248], "replac": [480, 652, 719, 1101, 1249, 1310, 1394], "replace_al": [720, 1311], "replace_column": 286, "replace_mani": [721, 1312], "replace_strict": [653, 1250], "replace_time_zon": [481, 1102], "reshap": [654, 1251], "restore_default": 4, "revers": [287, 400, 575, 655, 722, 916, 1012, 1200, 1252, 1313, 1394], "right": 1394, "rle": [656, 1253], "rle_id": [657, 1254], "roll": [288, 658, 917], "rolling_corr": 826, "rolling_cov": 827, "rolling_kurtosi": [659, 1255], "rolling_map": [660, 1256], "rolling_max": [661, 1257], "rolling_max_bi": 662, "rolling_mean": [663, 1258], "rolling_mean_bi": 664, "rolling_median": [665, 1259], "rolling_median_bi": 666, "rolling_min": [667, 1260], "rolling_min_bi": 668, "rolling_quantil": [669, 1261], "rolling_quantile_bi": 670, "rolling_skew": [671, 1262], "rolling_std": [672, 1263], "rolling_std_bi": 673, "rolling_sum": [674, 1264], "rolling_sum_bi": 675, "rolling_var": [676, 1265], "rolling_var_bi": 677, "root_nam": 610, "round": [482, 678, 1103, 1266, 1393], "round_sig_fig": [679, 1267], "row": [289, 290], "rows_by_kei": 291, "rowserror": 121, "rtrim": 1394, "sampl": [292, 576, 680, 1201, 1268], "save": [5, 207], "save_to_fil": 6, "scan": 863, "scan_csv": 167, "scan_delta": 168, "scan_iceberg": 169, "scan_ipc": 170, "scan_ndjson": 171, "scan_parquet": 172, "scan_pyarrow_dataset": 173, "scan_tabl": 197, "scancastopt": 56, "scatter": 1269, "schema": [293, 918, 974, 1339], "schemaerror": 124, "schemafieldnotfounderror": 125, "search_sort": [681, 1270], "second": [483, 1104], "select": [294, 358, 828, 854, 919, 971, 1374, 1387], "select_seq": [295, 920], "selector": 975, "seri": [187, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1371], "serial": [296, 357, 611, 921, 970], "set": [975, 1271, 1400], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [577, 1202], "set_engine_affin": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_intersect": [578, 1203], "set_profil": 188, "set_random_se": 174, "set_sort": [297, 682, 922, 1272], "set_streaming_chunk_s": 15, "set_symmetric_differ": [579, 1204], "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_union": [580, 1205], "set_verbos": 30, "shape": [298, 1273], "shapeerror": 126, "shift": [299, 401, 581, 683, 923, 1013, 1206, 1274], "show": 1401, "show_graph": [612, 924], "show_vers": 175, "shrink_dtyp": [684, 1275], "shrink_to_fit": [300, 1276], "shuffl": [685, 1277], "sign": [686, 1278, 1393], "sin": [687, 1279, 1396], "sind": 1396, "sinh": [688, 1280], "sink_csv": 49, "sink_ipc": 50, "sink_ndjson": 51, "sink_parquet": 52, "size": [415, 1027], "skew": [689, 1281], "slice": [301, 582, 690, 723, 925, 1207, 1282, 1314], "sort": [302, 402, 583, 691, 926, 1014, 1208, 1283], "sort_bi": 692, "split": [724, 1315], "split_exact": [725, 1316], "split_part": 1394, "splitn": [726, 1317], "sql": [303, 829, 927, 1387, 1392, 1398, 1399], "sql_expr": 830, "sqlcontext": [1380, 1381, 1382, 1383, 1384, 1385, 1386, 1399], "sqlinterfaceerror": 122, "sqlsyntaxerror": 123, "sqrt": [693, 1284, 1393], "starts_with": [416, 433, 727, 1028, 1046, 1318, 1394], "state": [31, 207], "std": [304, 403, 584, 694, 831, 928, 1015, 1209, 1285], "stddev": 1388, "str": [695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334], "strategi": 1402, "strftime": [484, 1105, 1395], "string": [88, 362, 857, 1377, 1394], "string_to_arrai": 1394, "stringcach": [57, 861], "stringcachemismatcherror": 127, "strip_char": [728, 1319], "strip_chars_end": [729, 1320], "strip_chars_start": [730, 1321], "strip_prefix": [731, 1322], "strip_suffix": [732, 1323], "strpo": 1394, "strptime": [733, 1324, 1394], "struct": [89, 744, 745, 746, 747, 748, 832, 858, 1335, 1336, 1337, 1338, 1339, 1340, 1378], "structfieldnotfounderror": 128, "style": 360, "sub": 749, "substr": 1394, "suffix": 626, "suffix_field": 627, "sum": [305, 349, 404, 585, 750, 833, 929, 959, 1016, 1210, 1341, 1388], "sum_horizont": [306, 834], "tabl": [1385, 1401], "tableinfo": [202, 203], "tabletyp": 204, "tail": [307, 350, 586, 734, 751, 835, 930, 960, 1211, 1325, 1342], "tan": [752, 1343, 1396], "tand": 1396, "tanh": [753, 1344], "tempor": [362, 859, 1379, 1395], "test": [176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 1402], "thread_pool_s": 189, "threadpool_s": 190, "time": [90, 485, 836, 1106], "time_rang": [837, 838], "timestamp": [486, 1107, 1394], "to_arrai": [587, 1212], "to_arrow": [308, 1345], "to_dat": [735, 1326], "to_datetim": [736, 1327], "to_decim": [737, 1328], "to_dict": [309, 310], "to_dtype_expr": 48, "to_dummi": [311, 1346], "to_fram": 1347, "to_init_repr": [312, 1348], "to_integ": [738, 1329], "to_jax": [313, 1349], "to_list": [405, 1017, 1350], "to_loc": 1047, "to_lowercas": [628, 739, 1330], "to_numpi": [314, 1351], "to_panda": [315, 1352], "to_phys": [754, 1353], "to_seri": 316, "to_str": [487, 1108], "to_struct": [317, 406, 588, 1018, 1213], "to_tim": [740, 1331], "to_titlecas": [741, 1332], "to_torch": [318, 1354], "to_uppercas": [629, 742, 1333], "toomanyrowsreturnederror": 129, "top_k": [319, 755, 931, 1355], "top_k_bi": [756, 1356], "total_dai": [488, 1109], "total_hour": [489, 1110], "total_microsecond": [490, 1111], "total_millisecond": [491, 1112], "total_minut": [492, 1113], "total_nanosecond": [493, 1114], "total_second": [494, 1115], "transpos": 320, "tree_format": 613, "trigonometri": 1396, "truediv": 757, "truncat": [495, 1116, 1401], "try_cast": 1397, "type": [362, 1397], "uint16": 91, "uint32": 92, "uint64": 93, "uint8": 94, "undo_alias": 614, "union": 1400, "uniqu": [321, 407, 589, 758, 932, 1019, 1214, 1357], "unique_count": [759, 1358], "uniti": [198, 199, 200, 201, 202, 203, 204, 206], "unknown": 95, "unnest": [322, 747, 933, 1340, 1389, 1401], "unpivot": [323, 934], "unregist": 1386, "unstablewarn": 130, "unstack": 324, "unsuitablesqlerror": 131, "updat": [325, 935], "upper": 1394, "upper_bound": [760, 1359], "upsampl": 326, "us": 207, "uses_lexical_ord": 1048, "using_string_cach": 191, "utf8": 96, "value_count": [761, 1360], "var": [327, 408, 590, 762, 839, 936, 1020, 1215, 1361], "varianc": 1388, "vstack": 328, "warn": 363, "week": [496, 1117], "weekdai": [497, 1118], "when": 840, "where": [763, 1387], "width": [329, 937], "window": 860, "with_column": [330, 938], "with_columns_seq": [331, 939], "with_context": 940, "with_field": 748, "with_row_count": [332, 941], "with_row_index": [333, 942], "with_time_unit": [498, 1119], "write_avro": 36, "write_clipboard": 37, "write_csv": 38, "write_databas": 39, "write_delta": 40, "write_excel": 41, "write_iceberg": 42, "write_ipc": 43, "write_ipc_stream": 44, "write_json": [45, 615], "write_ndjson": 46, "write_parquet": 47, "xor": 764, "year": [499, 1120], "zero": 841, "zfill": [743, 1334], "zip_with": 1362}})